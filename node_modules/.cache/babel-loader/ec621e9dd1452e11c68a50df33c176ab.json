{"ast":null,"code":"import * as constants from '../constants/constants';\nexport default function recursiveDivision(origin, width, height, wallInfo, timer) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    console.log(origin);\n    console.log(`width: ${width}, height: ${height}`);\n    return timer;\n  }\n\n  let isHorizontal = Boolean(width < height);\n\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  } // let isHorizontal = 0;\n\n\n  let wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n  let mazeDelay;\n\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    let mazeDelayOne = recursiveDivision(origin, width, Math.abs(wallIdx - origin.row), wallInfo, timer);\n    let mazeDelayTwo = recursiveDivision({\n      row: wallIdx + 1,\n      col: origin.col\n    }, width, height + origin.row - wallIdx - 1, wallInfo, timer);\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    let mazeDelayOne = recursiveDivision(origin, Math.abs(wallIdx - origin.col), height, wallInfo, timer);\n    let mazeDelayTwo = recursiveDivision({\n      row: origin.row,\n      col: wallIdx + 1\n    }, width + origin.col - wallIdx - 1, height, wallInfo, timer);\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  }\n\n  return mazeDelay;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${wallIdx}-${col}`).className) && col !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${row}-${wallIdx}`).className) && row !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/recursiveDivision.js"],"names":["constants","recursiveDivision","origin","width","height","wallInfo","timer","console","log","isHorizontal","Boolean","randomIntFromInterval","wallIdx","row","col","holeIdx","Math","floor","random","mazeDelay","maxRow","buildHorizontalWall","mazeDelayOne","abs","mazeDelayTwo","maxCol","buildVerticalWall","min","max","includes","document","getElementById","className","setTimeout"],"mappings":"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","sourcesContent":["import * as constants from '../constants/constants';\n\nexport default function recursiveDivision(\n  origin,\n  width,\n  height,\n  wallInfo,\n  timer\n) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    console.log(origin);\n    console.log(`width: ${width}, height: ${height}`);\n    return timer;\n  }\n\n  let isHorizontal = Boolean(width < height);\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  }\n  // let isHorizontal = 0;\n\n  let wallIdx = isHorizontal\n    ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n    : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal\n      ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n      : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal\n    ? Math.floor(Math.random() * (width - 1)) + origin.col\n    : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal\n      ? Math.floor(Math.random() * (width - 1)) + origin.col\n      : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  let mazeDelay;\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      width,\n      Math.abs(wallIdx - origin.row),\n      wallInfo,\n      timer\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: wallIdx + 1, col: origin.col },\n      width,\n      height + origin.row - wallIdx - 1,\n      wallInfo,\n      timer\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      Math.abs(wallIdx - origin.col),\n      height,\n      wallInfo,\n      timer\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: origin.row, col: wallIdx + 1 },\n      width + origin.col - wallIdx - 1,\n      height,\n      wallInfo,\n      timer\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  }\n\n  return mazeDelay;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${wallIdx}-${col}`).className\n      ) &&\n      col !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${row}-${wallIdx}`).className\n      ) &&\n      row !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n"]},"metadata":{},"sourceType":"module"}