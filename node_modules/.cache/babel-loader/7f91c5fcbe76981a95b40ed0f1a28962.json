{"ast":null,"code":"import*as constants from'../constants/constants';export default function recursiveDivision(origin,width,height,wallInfo,timer,withWeight){// Recursion termination\nif(width<2||height<2){return timer;}var isHorizontal=Boolean(width<height);if(width===height){isHorizontal=randomIntFromInterval(0,100)>50;}// let isHorizontal = 0;\nvar wallIdx=isHorizontal?randomIntFromInterval(origin.row+1,height+origin.row-2):randomIntFromInterval(origin.col+1,width+origin.col-2);while(wallIdx%2===0){wallIdx=isHorizontal?randomIntFromInterval(origin.row+1,height+origin.row-2):randomIntFromInterval(origin.col+1,width+origin.col-2);}var holeIdx=isHorizontal?Math.floor(Math.random()*(width-1))+origin.col:Math.floor(Math.random()*(height-1))+origin.row;while(holeIdx%2===1){holeIdx=isHorizontal?Math.floor(Math.random()*(width-1))+origin.col:Math.floor(Math.random()*(height-1))+origin.row;}wallInfo.isHorizontal=isHorizontal;wallInfo.holeIdx=holeIdx;var mazeDelay;if(isHorizontal){if(wallIdx>=constants.maxRow){return;}timer=buildHorizontalWall(origin,wallIdx,wallInfo,width,timer,withWeight);var mazeDelayOne=recursiveDivision(origin,width,Math.abs(wallIdx-origin.row),wallInfo,timer,withWeight);var mazeDelayTwo=recursiveDivision({row:wallIdx+1,col:origin.col},width,height+origin.row-wallIdx-1,wallInfo,timer,withWeight);mazeDelay=mazeDelayOne>mazeDelayTwo?mazeDelayOne:mazeDelayTwo;}else{if(wallIdx>=constants.maxCol){return;}timer=buildVerticalWall(origin,wallIdx,wallInfo,height,timer,withWeight);var _mazeDelayOne=recursiveDivision(origin,Math.abs(wallIdx-origin.col),height,wallInfo,timer,withWeight);var _mazeDelayTwo=recursiveDivision({row:origin.row,col:wallIdx+1},width+origin.col-wallIdx-1,height,wallInfo,timer,withWeight);mazeDelay=_mazeDelayOne>_mazeDelayTwo?_mazeDelayOne:_mazeDelayTwo;}return mazeDelay;}function randomIntFromInterval(min,max){// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}function buildHorizontalWall(origin,wallIdx,wallInfo,width,timer,withWeight){var _loop=function _loop(col){if(!['start-node','end-node'].includes(document.getElementById(\"node-\".concat(wallIdx,\"-\").concat(col)).className)&&col!==wallInfo.holeIdx){setTimeout(function(){if(withWeight&&Math.floor(Math.random()*100)>90&&col%2===0){document.getElementById(\"node-\".concat(wallIdx,\"-\").concat(col)).className='weight-node';}else{document.getElementById(\"node-\".concat(wallIdx,\"-\").concat(col)).className='wall-node';}},70*timer);timer++;}};for(var col=origin.col;col<width+origin.col;col++){_loop(col);}return timer;}function buildVerticalWall(origin,wallIdx,wallInfo,height,timer,withWeight){var _loop2=function _loop2(row){if(!['start-node','end-node'].includes(document.getElementById(\"node-\".concat(row,\"-\").concat(wallIdx)).className)&&row!==wallInfo.holeIdx){setTimeout(function(){if(withWeight&&Math.floor(Math.random()*100)>90&&row%2===0){document.getElementById(\"node-\".concat(row,\"-\").concat(wallIdx)).className='weight-node';}else{document.getElementById(\"node-\".concat(row,\"-\").concat(wallIdx)).className='wall-node';}},70*timer);timer++;}};for(var row=origin.row;row<height+origin.row;row++){_loop2(row);}return timer;}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/recursiveDivision.js"],"names":["constants","recursiveDivision","origin","width","height","wallInfo","timer","withWeight","isHorizontal","Boolean","randomIntFromInterval","wallIdx","row","col","holeIdx","Math","floor","random","mazeDelay","maxRow","buildHorizontalWall","mazeDelayOne","abs","mazeDelayTwo","maxCol","buildVerticalWall","min","max","includes","document","getElementById","className","setTimeout"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,SAAZ,KAA2B,wBAA3B,CAEA,cAAe,SAASC,CAAAA,iBAAT,CACbC,MADa,CAEbC,KAFa,CAGbC,MAHa,CAIbC,QAJa,CAKbC,KALa,CAMbC,UANa,CAOb,CACA;AACA,GAAIJ,KAAK,CAAG,CAAR,EAAaC,MAAM,CAAG,CAA1B,CAA6B,CAC3B,MAAOE,CAAAA,KAAP,CACD,CAED,GAAIE,CAAAA,YAAY,CAAGC,OAAO,CAACN,KAAK,CAAGC,MAAT,CAA1B,CACA,GAAID,KAAK,GAAKC,MAAd,CAAsB,CACpBI,YAAY,CAAGE,qBAAqB,CAAC,CAAD,CAAI,GAAJ,CAArB,CAAgC,EAA/C,CACD,CACD;AAEA,GAAIC,CAAAA,OAAO,CAAGH,YAAY,CACtBE,qBAAqB,CAACR,MAAM,CAACU,GAAP,CAAa,CAAd,CAAiBR,MAAM,CAAGF,MAAM,CAACU,GAAhB,CAAsB,CAAvC,CADC,CAEtBF,qBAAqB,CAACR,MAAM,CAACW,GAAP,CAAa,CAAd,CAAiBV,KAAK,CAAGD,MAAM,CAACW,GAAf,CAAqB,CAAtC,CAFzB,CAIA,MAAOF,OAAO,CAAG,CAAV,GAAgB,CAAvB,CAA0B,CACxBA,OAAO,CAAGH,YAAY,CAClBE,qBAAqB,CAACR,MAAM,CAACU,GAAP,CAAa,CAAd,CAAiBR,MAAM,CAAGF,MAAM,CAACU,GAAhB,CAAsB,CAAvC,CADH,CAElBF,qBAAqB,CAACR,MAAM,CAACW,GAAP,CAAa,CAAd,CAAiBV,KAAK,CAAGD,MAAM,CAACW,GAAf,CAAqB,CAAtC,CAFzB,CAGD,CAED,GAAIC,CAAAA,OAAO,CAAGN,YAAY,CACtBO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBd,KAAK,CAAG,CAAzB,CAAX,EAA0CD,MAAM,CAACW,GAD3B,CAEtBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBb,MAAM,CAAG,CAA1B,CAAX,EAA2CF,MAAM,CAACU,GAFtD,CAIA,MAAOE,OAAO,CAAG,CAAV,GAAgB,CAAvB,CAA0B,CACxBA,OAAO,CAAGN,YAAY,CAClBO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBd,KAAK,CAAG,CAAzB,CAAX,EAA0CD,MAAM,CAACW,GAD/B,CAElBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBb,MAAM,CAAG,CAA1B,CAAX,EAA2CF,MAAM,CAACU,GAFtD,CAGD,CACDP,QAAQ,CAACG,YAAT,CAAwBA,YAAxB,CACAH,QAAQ,CAACS,OAAT,CAAmBA,OAAnB,CAEA,GAAII,CAAAA,SAAJ,CACA,GAAIV,YAAJ,CAAkB,CAChB,GAAIG,OAAO,EAAIX,SAAS,CAACmB,MAAzB,CAAiC,CAC/B,OACD,CACDb,KAAK,CAAGc,mBAAmB,CACzBlB,MADyB,CAEzBS,OAFyB,CAGzBN,QAHyB,CAIzBF,KAJyB,CAKzBG,KALyB,CAMzBC,UANyB,CAA3B,CAQA,GAAIc,CAAAA,YAAY,CAAGpB,iBAAiB,CAClCC,MADkC,CAElCC,KAFkC,CAGlCY,IAAI,CAACO,GAAL,CAASX,OAAO,CAAGT,MAAM,CAACU,GAA1B,CAHkC,CAIlCP,QAJkC,CAKlCC,KALkC,CAMlCC,UANkC,CAApC,CAQA,GAAIgB,CAAAA,YAAY,CAAGtB,iBAAiB,CAClC,CAAEW,GAAG,CAAED,OAAO,CAAG,CAAjB,CAAoBE,GAAG,CAAEX,MAAM,CAACW,GAAhC,CADkC,CAElCV,KAFkC,CAGlCC,MAAM,CAAGF,MAAM,CAACU,GAAhB,CAAsBD,OAAtB,CAAgC,CAHE,CAIlCN,QAJkC,CAKlCC,KALkC,CAMlCC,UANkC,CAApC,CASAW,SAAS,CAAGG,YAAY,CAAGE,YAAf,CAA8BF,YAA9B,CAA6CE,YAAzD,CACD,CA9BD,IA8BO,CACL,GAAIZ,OAAO,EAAIX,SAAS,CAACwB,MAAzB,CAAiC,CAC/B,OACD,CACDlB,KAAK,CAAGmB,iBAAiB,CACvBvB,MADuB,CAEvBS,OAFuB,CAGvBN,QAHuB,CAIvBD,MAJuB,CAKvBE,KALuB,CAMvBC,UANuB,CAAzB,CAQA,GAAIc,CAAAA,aAAY,CAAGpB,iBAAiB,CAClCC,MADkC,CAElCa,IAAI,CAACO,GAAL,CAASX,OAAO,CAAGT,MAAM,CAACW,GAA1B,CAFkC,CAGlCT,MAHkC,CAIlCC,QAJkC,CAKlCC,KALkC,CAMlCC,UANkC,CAApC,CAQA,GAAIgB,CAAAA,aAAY,CAAGtB,iBAAiB,CAClC,CAAEW,GAAG,CAAEV,MAAM,CAACU,GAAd,CAAmBC,GAAG,CAAEF,OAAO,CAAG,CAAlC,CADkC,CAElCR,KAAK,CAAGD,MAAM,CAACW,GAAf,CAAqBF,OAArB,CAA+B,CAFG,CAGlCP,MAHkC,CAIlCC,QAJkC,CAKlCC,KALkC,CAMlCC,UANkC,CAApC,CASAW,SAAS,CAAGG,aAAY,CAAGE,aAAf,CAA8BF,aAA9B,CAA6CE,aAAzD,CACD,CAED,MAAOL,CAAAA,SAAP,CACD,CAED,QAASR,CAAAA,qBAAT,CAA+BgB,GAA/B,CAAoCC,GAApC,CAAyC,CACvC;AACA,MAAOZ,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBU,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CAAP,CACD,CAED,QAASN,CAAAA,mBAAT,CACElB,MADF,CAEES,OAFF,CAGEN,QAHF,CAIEF,KAJF,CAKEG,KALF,CAMEC,UANF,CAOE,0BACSM,GADT,EAEE,GACE,CAAC,CAAC,YAAD,CAAe,UAAf,EAA2Be,QAA3B,CACCC,QAAQ,CAACC,cAAT,gBAAgCnB,OAAhC,aAA2CE,GAA3C,GAAkDkB,SADnD,CAAD,EAGAlB,GAAG,GAAKR,QAAQ,CAACS,OAJnB,CAKE,CACAkB,UAAU,CAAC,UAAM,CACf,GACEzB,UAAU,EACVQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,GAA3B,EAAkC,EADlC,EAEAJ,GAAG,CAAG,CAAN,GAAY,CAHd,CAIE,CACAgB,QAAQ,CAACC,cAAT,gBAAgCnB,OAAhC,aAA2CE,GAA3C,GAAkDkB,SAAlD,CACE,aADF,CAED,CAPD,IAOO,CACLF,QAAQ,CAACC,cAAT,gBAAgCnB,OAAhC,aAA2CE,GAA3C,GAAkDkB,SAAlD,CACE,WADF,CAED,CACF,CAZS,CAYP,GAAKzB,KAZE,CAAV,CAaAA,KAAK,GACN,CAtBH,EACA,IAAK,GAAIO,CAAAA,GAAG,CAAGX,MAAM,CAACW,GAAtB,CAA2BA,GAAG,CAAGV,KAAK,CAAGD,MAAM,CAACW,GAAhD,CAAqDA,GAAG,EAAxD,CAA4D,OAAnDA,GAAmD,EAsB3D,CAED,MAAOP,CAAAA,KAAP,CACD,CAED,QAASmB,CAAAA,iBAAT,CACEvB,MADF,CAEES,OAFF,CAGEN,QAHF,CAIED,MAJF,CAKEE,KALF,CAMEC,UANF,CAOE,4BACSK,GADT,EAEE,GACE,CAAC,CAAC,YAAD,CAAe,UAAf,EAA2BgB,QAA3B,CACCC,QAAQ,CAACC,cAAT,gBAAgClB,GAAhC,aAAuCD,OAAvC,GAAkDoB,SADnD,CAAD,EAGAnB,GAAG,GAAKP,QAAQ,CAACS,OAJnB,CAKE,CACAkB,UAAU,CAAC,UAAM,CACf,GACEzB,UAAU,EACVQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,GAA3B,EAAkC,EADlC,EAEAL,GAAG,CAAG,CAAN,GAAY,CAHd,CAIE,CACAiB,QAAQ,CAACC,cAAT,gBAAgClB,GAAhC,aAAuCD,OAAvC,GAAkDoB,SAAlD,CACE,aADF,CAED,CAPD,IAOO,CACLF,QAAQ,CAACC,cAAT,gBAAgClB,GAAhC,aAAuCD,OAAvC,GAAkDoB,SAAlD,CACE,WADF,CAED,CACF,CAZS,CAYP,GAAKzB,KAZE,CAAV,CAaAA,KAAK,GACN,CAtBH,EACA,IAAK,GAAIM,CAAAA,GAAG,CAAGV,MAAM,CAACU,GAAtB,CAA2BA,GAAG,CAAGR,MAAM,CAAGF,MAAM,CAACU,GAAjD,CAAsDA,GAAG,EAAzD,CAA6D,QAApDA,GAAoD,EAsB5D,CAED,MAAON,CAAAA,KAAP,CACD","sourcesContent":["import * as constants from '../constants/constants';\n\nexport default function recursiveDivision(\n  origin,\n  width,\n  height,\n  wallInfo,\n  timer,\n  withWeight\n) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    return timer;\n  }\n\n  let isHorizontal = Boolean(width < height);\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  }\n  // let isHorizontal = 0;\n\n  let wallIdx = isHorizontal\n    ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n    : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal\n      ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n      : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal\n    ? Math.floor(Math.random() * (width - 1)) + origin.col\n    : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal\n      ? Math.floor(Math.random() * (width - 1)) + origin.col\n      : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  let mazeDelay;\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n    timer = buildHorizontalWall(\n      origin,\n      wallIdx,\n      wallInfo,\n      width,\n      timer,\n      withWeight\n    );\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      width,\n      Math.abs(wallIdx - origin.row),\n      wallInfo,\n      timer,\n      withWeight\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: wallIdx + 1, col: origin.col },\n      width,\n      height + origin.row - wallIdx - 1,\n      wallInfo,\n      timer,\n      withWeight\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n    timer = buildVerticalWall(\n      origin,\n      wallIdx,\n      wallInfo,\n      height,\n      timer,\n      withWeight\n    );\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      Math.abs(wallIdx - origin.col),\n      height,\n      wallInfo,\n      timer,\n      withWeight\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: origin.row, col: wallIdx + 1 },\n      width + origin.col - wallIdx - 1,\n      height,\n      wallInfo,\n      timer,\n      withWeight\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  }\n\n  return mazeDelay;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(\n  origin,\n  wallIdx,\n  wallInfo,\n  width,\n  timer,\n  withWeight\n) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${wallIdx}-${col}`).className\n      ) &&\n      col !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        if (\n          withWeight &&\n          Math.floor(Math.random() * 100) > 90 &&\n          col % 2 === 0\n        ) {\n          document.getElementById(`node-${wallIdx}-${col}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${wallIdx}-${col}`).className =\n            'wall-node';\n        }\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n\nfunction buildVerticalWall(\n  origin,\n  wallIdx,\n  wallInfo,\n  height,\n  timer,\n  withWeight\n) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${row}-${wallIdx}`).className\n      ) &&\n      row !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        if (\n          withWeight &&\n          Math.floor(Math.random() * 100) > 90 &&\n          row % 2 === 0\n        ) {\n          document.getElementById(`node-${row}-${wallIdx}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${row}-${wallIdx}`).className =\n            'wall-node';\n        }\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n"]},"metadata":{},"sourceType":"module"}