{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/header/header.jsx\";\nimport React, { Component } from \"react\";\nimport \"./header.css\";\nimport Buttons from \"./buttons/buttons\";\nimport Grid from \"./grid/grid\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      selectionMode: \"\",\n      buttonPressed: \"\",\n      resetGridCalled: false\n    }; // this.handleStartClick = this.handleStartClick.bind(this);\n    // this.handleEndClick = this.handleEndClick.bind(this);\n    // this.handleWallClick = this.handleWallClick.bind(this);\n    // this.handleResetClick = this.handleResetClick.bind(this);\n    // this.handleGoClick = this.handleGoClick.bind(this);\n\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.gridRef = React.createRef(); // used to handle reseting the grid. Need to access the method from here\n  }\n\n  handleButtonClick(buttonClicked) {\n    if (buttonClicked === \"start\") {\n      this.setState({\n        selectionMode: \"start\",\n        buttonPressed: \"start\"\n      });\n    } else if (buttonClicked === \"end\") {\n      this.setState({\n        selectionMode: \"end\",\n        buttonPressed: \"end\"\n      });\n    } else if (buttonClicked === \"wall\") {\n      this.setState({\n        selectionMode: \"wall\",\n        buttonPressed: \"wall\"\n      });\n    } else if (buttonClicked === \"clear-grid\") {\n      this.gridRef.current.resetGrid();\n      this.setState({\n        selectionMode: \"\",\n        buttonPressed: \"reset\"\n      });\n    } else if (buttonClicked === \"go\") {\n      this.gridRef.current.visualiseDijkstras();\n      this.setState({\n        buttonPressed: \"go\"\n      });\n    }\n  } // handleStartClick() {\n  //   this.setState({ selectionMode: \"start\", buttonPressed: \"start\" });\n  // }\n  // handleEndClick() {\n  //   this.setState({ selectionMode: \"end\", buttonPressed: \"end\" });\n  // }\n  // handleWallClick() {\n  //   this.setState({ selectionMode: \"wall\", buttonPressed: \"wall\" });\n  // }\n  // handleResetClick() {\n  //   this.gridRef.current.resetGrid();\n  //   this.setState({ selectionMode: \"\", buttonPressed: \"reset\" });\n  // }\n  // handleGoClick() {\n  //   this.gridRef.current.visualiseDijkstras();\n  //   this.setState({ buttonPressed: \"go\" });\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Buttons, {\n      handleButtonClick: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      selectionMode: this.state.selectionMode,\n      resetGrid: this.state.resetGridCalled,\n      ref: this.gridRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Header;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/header/header.jsx"],"names":["React","Component","Buttons","Grid","Header","constructor","props","state","nodes","selectionMode","buttonPressed","resetGridCalled","handleButtonClick","bind","gridRef","createRef","buttonClicked","setState","current","resetGrid","visualiseDijkstras","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,aAAa,EAAE,EAFJ;AAGXC,MAAAA,aAAa,EAAE,EAHJ;AAIXC,MAAAA,eAAe,EAAE;AAJN,KAAb,CAFiB,CASjB;AACA;AACA;AACA;AACA;;AAEA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,OAAL,GAAed,KAAK,CAACe,SAAN,EAAf,CAhBiB,CAgBiB;AACnC;;AAEDH,EAAAA,iBAAiB,CAACI,aAAD,EAAgB;AAC/B,QAAIA,aAAa,KAAK,OAAtB,EAA+B;AAC7B,WAAKC,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAE,OAAjB;AAA0BC,QAAAA,aAAa,EAAE;AAAzC,OAAd;AACD,KAFD,MAEO,IAAIM,aAAa,KAAK,KAAtB,EAA6B;AAClC,WAAKC,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAE,KAAjB;AAAwBC,QAAAA,aAAa,EAAE;AAAvC,OAAd;AACD,KAFM,MAEA,IAAIM,aAAa,KAAK,MAAtB,EAA8B;AACnC,WAAKC,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAE,MAAjB;AAAyBC,QAAAA,aAAa,EAAE;AAAxC,OAAd;AACD,KAFM,MAEA,IAAIM,aAAa,KAAK,YAAtB,EAAoC;AACzC,WAAKF,OAAL,CAAaI,OAAb,CAAqBC,SAArB;AACA,WAAKF,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAE,EAAjB;AAAqBC,QAAAA,aAAa,EAAE;AAApC,OAAd;AACD,KAHM,MAGA,IAAIM,aAAa,KAAK,IAAtB,EAA4B;AACjC,WAAKF,OAAL,CAAaI,OAAb,CAAqBE,kBAArB;AACA,WAAKH,QAAL,CAAc;AAAEP,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD;AACF,GAlC4B,CAoC7B;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAW,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAS,MAAA,iBAAiB,EAAE,KAAKT,iBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAE,KAAKL,KAAL,CAAWE,aAD5B;AAEE,MAAA,SAAS,EAAE,KAAKF,KAAL,CAAWI,eAFxB;AAGE,MAAA,GAAG,EAAE,KAAKG,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAUD;;AArE4B;;AAwE/B,eAAeV,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./header.css\";\nimport Buttons from \"./buttons/buttons\";\nimport Grid from \"./grid/grid\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      selectionMode: \"\",\n      buttonPressed: \"\",\n      resetGridCalled: false,\n    };\n\n    // this.handleStartClick = this.handleStartClick.bind(this);\n    // this.handleEndClick = this.handleEndClick.bind(this);\n    // this.handleWallClick = this.handleWallClick.bind(this);\n    // this.handleResetClick = this.handleResetClick.bind(this);\n    // this.handleGoClick = this.handleGoClick.bind(this);\n\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.gridRef = React.createRef(); // used to handle reseting the grid. Need to access the method from here\n  }\n\n  handleButtonClick(buttonClicked) {\n    if (buttonClicked === \"start\") {\n      this.setState({ selectionMode: \"start\", buttonPressed: \"start\" });\n    } else if (buttonClicked === \"end\") {\n      this.setState({ selectionMode: \"end\", buttonPressed: \"end\" });\n    } else if (buttonClicked === \"wall\") {\n      this.setState({ selectionMode: \"wall\", buttonPressed: \"wall\" });\n    } else if (buttonClicked === \"clear-grid\") {\n      this.gridRef.current.resetGrid();\n      this.setState({ selectionMode: \"\", buttonPressed: \"reset\" });\n    } else if (buttonClicked === \"go\") {\n      this.gridRef.current.visualiseDijkstras();\n      this.setState({ buttonPressed: \"go\" });\n    }\n  }\n\n  // handleStartClick() {\n  //   this.setState({ selectionMode: \"start\", buttonPressed: \"start\" });\n  // }\n\n  // handleEndClick() {\n  //   this.setState({ selectionMode: \"end\", buttonPressed: \"end\" });\n  // }\n\n  // handleWallClick() {\n  //   this.setState({ selectionMode: \"wall\", buttonPressed: \"wall\" });\n  // }\n\n  // handleResetClick() {\n  //   this.gridRef.current.resetGrid();\n  //   this.setState({ selectionMode: \"\", buttonPressed: \"reset\" });\n  // }\n\n  // handleGoClick() {\n  //   this.gridRef.current.visualiseDijkstras();\n  //   this.setState({ buttonPressed: \"go\" });\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Buttons handleButtonClick={this.handleButtonClick} />\n        <Grid\n          selectionMode={this.state.selectionMode}\n          resetGrid={this.state.resetGridCalled}\n          ref={this.gridRef}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}