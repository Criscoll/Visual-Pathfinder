{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/components/Node.jsx\";\nimport React, { Component } from 'react';\nimport '../styles/main.css';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport FlagIcon from '@material-ui/icons/Flag';\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n    this.state = {\n      mounted: false\n    };\n  }\n\n  handleMouseEnter() {\n    if (this.props.isDragging) {\n      this.props.handleNodeClick(this.props.row, this.props.col);\n    }\n  }\n\n  handlePress() {\n    this.props.handleNodePressed(this.props.row, this.props.col);\n  } // shouldComponentUpdate() is used to tell react whether or not this child component should re-render. By default it returns true such that\n  // whenever the parent re-renders so does the child. The check here ensures that shouldComponentUpdate() returns false (don't re-render)\n  // unless the nodeType of this Node component changes\n\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.resetClicked !== nextProps.resetClicked;\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true\n    });\n  }\n\n  render() {\n    console.log(document.getElementById(`node-${this.props.row}-${this.props.col}`) === 'start-node');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: 'node-' + this.props.row + '-' + this.props.col,\n      className: this.props.node.nodeType,\n      onMouseDown: this.handlePress,\n      onMouseUp: this.props.handleNodeReleased,\n      onMouseEnter: this.handleMouseEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, this.state.mounted ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, \"document.getElementById( `node-$\", this.props.row, \"-$\", this.props.col, \"` ) === 'start-node' ? (\", /*#__PURE__*/React.createElement(DirectionsWalkIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }), \") : null document.getElementById( `node-$\", this.props.row, \"-$\", this.props.col, \"` ) === 'end-node' ? (\", /*#__PURE__*/React.createElement(FlagIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }), \") : null\") : null));\n  }\n\n}\n\nexport default Node;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/components/Node.jsx"],"names":["React","Component","DirectionsWalkIcon","FlagIcon","Node","constructor","props","handleMouseEnter","bind","handlePress","state","mounted","isDragging","handleNodeClick","row","col","handleNodePressed","shouldComponentUpdate","nextProps","resetClicked","componentDidMount","setState","render","console","log","document","getElementById","node","nodeType","handleNodeReleased","position"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAC3BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AAEA,SAAKE,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD;;AAEDJ,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKD,KAAL,CAAWM,UAAf,EAA2B;AACzB,WAAKN,KAAL,CAAWO,eAAX,CAA2B,KAAKP,KAAL,CAAWQ,GAAtC,EAA2C,KAAKR,KAAL,CAAWS,GAAtD;AACD;AACF;;AAEDN,EAAAA,WAAW,GAAG;AACZ,SAAKH,KAAL,CAAWU,iBAAX,CAA6B,KAAKV,KAAL,CAAWQ,GAAxC,EAA6C,KAAKR,KAAL,CAAWS,GAAxD;AACD,GAnB0B,CAqB3B;AACA;AACA;;;AACAE,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,WAAO,KAAKZ,KAAL,CAAWa,YAAX,KAA4BD,SAAS,CAACC,YAA7C;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEV,MAAAA,OAAO,EAAE;AAAX,KAAd;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CACEC,QAAQ,CAACC,cAAT,CAAyB,QAAO,KAAKpB,KAAL,CAAWQ,GAAI,IAAG,KAAKR,KAAL,CAAWS,GAAI,EAAjE,MACE,YAFJ;AAIA,wBACE;AACE,MAAA,EAAE,EAAE,UAAU,KAAKT,KAAL,CAAWQ,GAArB,GAA2B,GAA3B,GAAiC,KAAKR,KAAL,CAAWS,GADlD;AAEE,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWqB,IAAX,CAAgBC,QAF7B;AAGE,MAAA,WAAW,EAAE,KAAKnB,WAHpB;AAIE,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAWuB,kBAJxB;AAKE,MAAA,YAAY,EAAE,KAAKtB,gBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE;AAAK,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKpB,KAAL,CAAWC,OAAX,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACmC,KAAKL,KAAL,CAAWQ,GAD9C,QACqD,KAAKR,KAAL,CAAWS,GADhE,2CAGE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,+CAIG,KAAKT,KAAL,CAAWQ,GAJd,QAIqB,KAAKR,KAAL,CAAWS,GAJhC,yCAKE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,aADD,GAQG,IATN,CAPF,CADF;AAqBD;;AA1D0B;;AA6D7B,eAAeX,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/main.css';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport FlagIcon from '@material-ui/icons/Flag';\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n\n    this.state = {\n      mounted: false,\n    };\n  }\n\n  handleMouseEnter() {\n    if (this.props.isDragging) {\n      this.props.handleNodeClick(this.props.row, this.props.col);\n    }\n  }\n\n  handlePress() {\n    this.props.handleNodePressed(this.props.row, this.props.col);\n  }\n\n  // shouldComponentUpdate() is used to tell react whether or not this child component should re-render. By default it returns true such that\n  // whenever the parent re-renders so does the child. The check here ensures that shouldComponentUpdate() returns false (don't re-render)\n  // unless the nodeType of this Node component changes\n  shouldComponentUpdate(nextProps) {\n    return this.props.resetClicked !== nextProps.resetClicked;\n  }\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  render() {\n    console.log(\n      document.getElementById(`node-${this.props.row}-${this.props.col}`) ===\n        'start-node'\n    );\n    return (\n      <div\n        id={'node-' + this.props.row + '-' + this.props.col}\n        className={this.props.node.nodeType}\n        onMouseDown={this.handlePress}\n        onMouseUp={this.props.handleNodeReleased}\n        onMouseEnter={this.handleMouseEnter}\n      >\n        <div style={{ position: 'absolute' }}>\n          {this.state.mounted ? (\n            <div>\n              document.getElementById( `node-${this.props.row}-${this.props.col}\n              ` ) === 'start-node' ? (\n              <DirectionsWalkIcon />) : null document.getElementById( `node-$\n              {this.props.row}-${this.props.col}` ) === 'end-node' ? (\n              <FlagIcon />) : null\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Node;\n"]},"metadata":{},"sourceType":"module"}