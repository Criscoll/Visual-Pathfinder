{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/containers/Grid.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport DFS from '../Algorithms/DFS';\nimport astar from '../Algorithms/astar';\nimport Node from '../components/Node';\nimport '../styles/main.css';\nimport * as enumerations from '../constants/algorithmEnum';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      isDragging: false,\n      selectWeightNodes: false,\n      dragNode: 'wall'\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.maxRow = 21;\n    this.maxCol = 54;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(row, col) {\n    this.props.setGridModified();\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className = 'normal-node';\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col]\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col]\n          });\n        }\n      }\n    } else {\n      if (this.state.startNode.row === row && this.state.startNode.col === col) {\n        return;\n      } else if (this.state.endNode.row === row && this.state.endNode.col === col) {\n        return;\n      } else if (document.getElementById(`node-${row}-${col}`).className === 'wall-node') {\n        document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n      } else {\n        document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n      }\n    }\n\n    let audio = document.getElementById('click_sound').cloneNode(true);\n    audio.volume = 0.1;\n    audio.play();\n  }\n\n  handleNodePressed(row, column) {\n    if (this.props.algorithmRunning) {\n      return;\n    }\n\n    let dragNode = 'wall';\n\n    if (this.state.startNode.row === row && this.state.startNode.col === column) {\n      dragNode = 'start';\n    } else if (this.state.endNode.row === row && this.state.endNode.col === column) {\n      dragNode = 'end';\n    }\n\n    this.setState({\n      isDragging: true,\n      dragNode: dragNode\n    }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({\n        isDragging: false\n      });\n    }\n\n    this.setState({\n      dragNode: 'wall'\n    });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  } // Displays the nodes on the grid with their state values\n\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      onMouseLeave: this.handleNodeReleased,\n      onDragStart: this.handleDragBug,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodePressed: this.handleNodePressed,\n          handleNodeReleased: this.handleNodeReleased,\n          row: rowIndex,\n          col: colIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n  resetGrid() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['wall-node', 'visited-node', 'path-node'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        }\n      }\n    }\n\n    document.getElementById(`node-${this.state.startNode.row}-${this.state.startNode.col}`).className = 'start-node';\n    document.getElementById(`node-${this.state.endNode.row}-${this.state.endNode.col}`).className = 'end-node';\n  }\n\n  setAdjacentNodes(node) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({\n        row: row - 1,\n        col: col\n      });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({\n        row: row + 1,\n        col: col\n      });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col - 1\n      });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col + 1\n      });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        startNode: nodeObject\n      });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        endNode: nodeObject\n      });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n    }\n  } // performs a deep copy of the grid so that the state is not altered directly by accident.\n\n\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach(x => {\n      let currentRow = [];\n      x.forEach(nodes => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n\n        currentRow.push(node);\n      });\n      clone.push(currentRow);\n    });\n    return clone;\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  runVisualiser(algorithm) {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result;\n\n    if (algorithm === enumerations.algorithms.dijkstras) {\n      result = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else if (algorithm === enumerations.algorithms.DFS) {\n      result = DFS(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else if (algorithm === enumerations.algorithms.AStar) {\n      result = astar(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else {\n      console.log('No algorithm selected');\n    }\n\n    this.visualisePath(result, startNode, endNode);\n  }\n\n  visualisePath(result, startNode, endNode) {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['visited-node', 'path-node'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        }\n\n        if (document.getElementById(`node-${row}-${col}`).className === 'end-node-found') {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n\n    let visitedNodes = result.visitedNodes; // visualise visited nodes\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        let visited = visitedNodes[i];\n\n        if (visited === startNode) {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'start-node-visited';\n        } else if (visited === endNode) {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'end-node-visited';\n        } else {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'visited-node';\n        }\n\n        let audio = document.getElementById('loading_sound');\n        audio.volume = 0.5;\n        audio.play();\n      }, 25 * i);\n    } // visualise shortest path\n\n\n    setTimeout(() => {\n      if (result.pathFound === false) {\n        document.getElementById('loading_sound').pause();\n        document.getElementById('loading_sound').currentTime = 0;\n        this.props.setAlgorithmRunning(false);\n        return;\n      }\n\n      let prev = endNode.prev;\n      console.log(prev);\n      let pathNodes = [];\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        pathNodes.push({\n          row: prev.row,\n          col: prev.col\n        });\n        prev = prev.prev;\n      }\n\n      pathNodes.push({\n        row: startNode.row,\n        col: startNode.col\n      });\n      let i = 1;\n      pathNodes.reverse().forEach(node => {\n        setTimeout((row, col, startNode) => {\n          if (row === startNode.row && col === startNode.col) {\n            document.getElementById(`node-${row}-${col}`).className = 'start-node-path';\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = 'path-node';\n          }\n\n          let audio = document.getElementById('path_sound').cloneNode(true);\n          audio.volume = 0.3;\n          audio.play();\n        }, 40 * i, node.row, node.col, startNode);\n        i++;\n      });\n      setTimeout(() => {\n        document.getElementById(`node-${this.state.endNode.row}-${this.state.endNode.col}`).className = 'end-node-found';\n      }, 40 * i + 1);\n      document.getElementById('loading_sound').pause();\n      document.getElementById('loading_sound').currentTime = 0;\n      this.props.setAlgorithmRunning(false);\n      this.props.setStats(pathNodes.length, visitedNodes.length);\n    }, 25 * visitedNodes.length);\n  }\n\n}\n\nfunction useKeyPressed(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n  return keyPressed;\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/containers/Grid.jsx"],"names":["React","Component","useState","useEffect","dijkstras","DFS","astar","Node","enumerations","Grid","constructor","props","state","nodes","startNode","endNode","isDragging","selectWeightNodes","dragNode","handleNodeClick","bind","handleNodePressed","handleNodeReleased","handleKeyDown","handleKeyUp","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","setGridModified","copyNodes","nodeType","rowColIndices","oldRow","oldCol","document","getElementById","className","audio","cloneNode","volume","play","column","algorithmRunning","handleDragBug","e","preventDefault","console","log","render","map","rowIndex","node","colIndex","resetGrid","includes","adjacentNodes","nodeObject","visited","dist","Infinity","prev","clone","forEach","x","JSON","parse","stringify","runVisualiser","algorithm","pathFound","result","algorithms","AStar","visualisePath","visitedNodes","i","length","setTimeout","pause","currentTime","setAlgorithmRunning","pathNodes","reverse","setStats","useKeyPressed","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport DFS from '../Algorithms/DFS';\nimport astar from '../Algorithms/astar';\nimport Node from '../components/Node';\nimport '../styles/main.css';\nimport * as enumerations from '../constants/algorithmEnum';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.maxRow = 21;\n    this.maxCol = 54;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    isDragging: false,\n    selectWeightNodes: false,\n    dragNode: 'wall',\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(row, col) {\n    this.props.setGridModified();\n\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className =\n          'normal-node';\n\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col],\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col],\n          });\n        }\n      }\n    } else {\n      if (\n        this.state.startNode.row === row &&\n        this.state.startNode.col === col\n      ) {\n        return;\n      } else if (\n        this.state.endNode.row === row &&\n        this.state.endNode.col === col\n      ) {\n        return;\n      } else if (\n        document.getElementById(`node-${row}-${col}`).className === 'wall-node'\n      ) {\n        document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n      } else {\n        document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n      }\n    }\n    let audio = document.getElementById('click_sound').cloneNode(true);\n    audio.volume = 0.1;\n    audio.play();\n  }\n\n  handleNodePressed(row, column) {\n    if (this.props.algorithmRunning) {\n      return;\n    }\n\n    let dragNode = 'wall';\n    if (\n      this.state.startNode.row === row &&\n      this.state.startNode.col === column\n    ) {\n      dragNode = 'start';\n    } else if (\n      this.state.endNode.row === row &&\n      this.state.endNode.col === column\n    ) {\n      dragNode = 'end';\n    }\n\n    this.setState({ isDragging: true, dragNode: dragNode }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({ isDragging: false });\n    }\n    this.setState({ dragNode: 'wall' });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  }\n\n  // Displays the nodes on the grid with their state values\n  render() {\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      node={node}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                      row={rowIndex}\n                      col={colIndex}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  resetGrid() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['wall-node', 'visited-node', 'path-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        }\n      }\n    }\n\n    document.getElementById(\n      `node-${this.state.startNode.row}-${this.state.startNode.col}`\n    ).className = 'start-node';\n\n    document.getElementById(\n      `node-${this.state.endNode.row}-${this.state.endNode.col}`\n    ).className = 'end-node';\n  }\n\n  setAdjacentNodes(node) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({ row: row, col: col + 1 });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n\n      this.setState({ startNode: nodeObject });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n      this.setState({ endNode: nodeObject });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n    }\n  }\n\n  // performs a deep copy of the grid so that the state is not altered directly by accident.\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach((x) => {\n      let currentRow = [];\n      x.forEach((nodes) => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n        currentRow.push(node);\n      });\n\n      clone.push(currentRow);\n    });\n\n    return clone;\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n\n  runVisualiser(algorithm) {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result;\n\n    if (algorithm === enumerations.algorithms.dijkstras) {\n      result = dijkstras(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.DFS) {\n      result = DFS(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.AStar) {\n      result = astar(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else {\n      console.log('No algorithm selected');\n    }\n\n    this.visualisePath(result, startNode, endNode);\n  }\n\n  visualisePath(result, startNode, endNode) {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['visited-node', 'path-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        }\n\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'end-node-found'\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n\n    let visitedNodes = result.visitedNodes;\n\n    // visualise visited nodes\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        let visited = visitedNodes[i];\n\n        if (visited === startNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'start-node-visited';\n        } else if (visited === endNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'end-node-visited';\n        } else {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'visited-node';\n        }\n\n        let audio = document.getElementById('loading_sound');\n        audio.volume = 0.5;\n        audio.play();\n      }, 25 * i);\n    }\n\n    // visualise shortest path\n    setTimeout(() => {\n      if (result.pathFound === false) {\n        document.getElementById('loading_sound').pause();\n        document.getElementById('loading_sound').currentTime = 0;\n        this.props.setAlgorithmRunning(false);\n        return;\n      }\n\n      let prev = endNode.prev;\n      console.log(prev);\n\n      let pathNodes = [];\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        pathNodes.push({ row: prev.row, col: prev.col });\n        prev = prev.prev;\n      }\n\n      pathNodes.push({ row: startNode.row, col: startNode.col });\n\n      let i = 1;\n      pathNodes.reverse().forEach((node) => {\n        setTimeout(\n          (row, col, startNode) => {\n            if (row === startNode.row && col === startNode.col) {\n              document.getElementById(`node-${row}-${col}`).className =\n                'start-node-path';\n            } else {\n              document.getElementById(`node-${row}-${col}`).className =\n                'path-node';\n            }\n\n            let audio = document.getElementById('path_sound').cloneNode(true);\n            audio.volume = 0.3;\n            audio.play();\n          },\n          40 * i,\n          node.row,\n          node.col,\n          startNode\n        );\n        i++;\n      });\n\n      setTimeout(() => {\n        document.getElementById(\n          `node-${this.state.endNode.row}-${this.state.endNode.col}`\n        ).className = 'end-node-found';\n      }, 40 * i + 1);\n\n      document.getElementById('loading_sound').pause();\n      document.getElementById('loading_sound').currentTime = 0;\n      this.props.setAlgorithmRunning(false);\n      this.props.setStats(pathNodes.length, visitedNodes.length);\n    }, 25 * visitedNodes.length);\n  }\n}\n\nfunction useKeyPressed(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n\n  return keyPressed;\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}