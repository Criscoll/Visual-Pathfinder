{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {\n        row: 0,\n        col: 0\n      },\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.maxRow = 15;\n    this.maxCol = 30;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\",\n          adjacent: []\n        };\n        this.setAdjacentNodes(currentNode.row, currentNode.col, currentNode.adjacent);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(newRow, newColumn, this.state.nodes[newRow][newColumn].adjacent);\n    console.log(\"START AND END\", this.state.startNode, this.state.endNode);\n\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: {\n              row: newRow,\n              col: newColumn\n            }\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: {\n              row: newRow,\n              col: newColumn\n            }\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({\n        nodes\n      });\n    }\n  }\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          handleNodeClick: this.handleNodeClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j].nodeType = \"normal-node\";\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    });\n  }\n\n  setAdjacentNodes(row, col, arr) {\n    if (row !== 0) {\n      arr.push({\n        row: row - 1,\n        col: col\n      });\n    }\n\n    if (row !== this.maxRow - 1) {\n      arr.push({\n        row: row + 1,\n        col: col\n      });\n    }\n\n    if (col !== 0) {\n      arr.push({\n        row: row,\n        col: col - 1\n      });\n    }\n\n    if (col !== this.maxCol - 1) {\n      arr.push({\n        row: row,\n        col: col + 1\n      });\n    }\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  dikstrasAlgorithm() {\n    let nodes = this.state.nodes;\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx"],"names":["React","Component","Node","Grid","constructor","props","state","nodes","startNode","row","col","endNode","startNodePreviouslySet","endNodePreviouslySet","handleNodeClick","bind","maxRow","maxCol","componentDidMount","currentRow","currentNode","nodeType","adjacent","setAdjacentNodes","push","setState","newRow","newColumn","console","log","selectionMode","nodeSetMode","nodePreviouslySet","rowColIndices","oldRow","oldCol","findPrevNode","render","map","rowIndex","node","colIndex","type","i","length","findIndex","currentColumn","resetGrid","j","arr","dikstrasAlgorithm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.maxRow = 15;\n    this.maxCol = 30;\n  }\n\n  state = {\n    nodes: [],\n    startNode: { row: 0, col: 0 },\n    endNode: {},\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\",\n          adjacent: [],\n        };\n        this.setAdjacentNodes(\n          currentNode.row,\n          currentNode.col,\n          currentNode.adjacent\n        );\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(\n      newRow,\n      newColumn,\n      this.state.nodes[newRow][newColumn].adjacent\n    );\n\n    console.log(\"START AND END\", this.state.startNode, this.state.endNode);\n\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === \"start-node\") {\n          this.setState({ nodes: nodes, startNodePreviouslySet: true });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({ nodes: nodes, endNodePreviouslySet: true });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: { row: newRow, col: newColumn },\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: { row: newRow, col: newColumn },\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({ nodes });\n    }\n  }\n\n  render() {\n    let { nodes } = this.state;\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, colIndex) => {\n                return (\n                  <Node\n                    key={colIndex}\n                    node={node}\n                    handleNodeClick={this.handleNodeClick}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j].nodeType = \"normal-node\";\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n    });\n  }\n\n  setAdjacentNodes(row, col, arr) {\n    if (row !== 0) {\n      arr.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      arr.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      arr.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      arr.push({ row: row, col: col + 1 });\n    }\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n  dikstrasAlgorithm() {\n    let nodes = this.state.nodes;\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}