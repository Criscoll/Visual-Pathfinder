{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\nimport dijkstras from \"../../Algorithms/dijkstras\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodeDrag = this.handleNodeDrag.bind(this);\n    this.maxRow = 15;\n    this.maxCol = 30;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(newRow, newColumn, this.state.nodes[newRow][newColumn].adjacentNodes);\n\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn]\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn]\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({\n        nodes\n      });\n    }\n  }\n\n  handleNodePressed() {\n    this.setState({\n      isDragging: !this.state.isDragging\n    });\n    console.log(\"hi\");\n  } // Displays the nods on the grid with their state values\n\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodeDown: this.handleNodePressed,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: \"normal-node\",\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {}\n        };\n      }\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push(nodes[row - 1][col]);\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push(nodes[row + 1][col]);\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push(nodes[row][col - 1]);\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push(nodes[row][col + 1]);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: \"normal-node\",\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {}\n    };\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  visualiseDijkstras() {\n    let nodes = [...this.state.nodes];\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let visitedNodes = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol);\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          nodes[visited.row][visited.col].nodeType = \"visited-node\";\n          this.setState({\n            nodes: nodes\n          });\n        }, 10 * i);\n      }\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = \"path-node\";\n        prev = prev.prev;\n      }\n\n      this.setState({\n        nodes: nodes\n      });\n    }, 10 * visitedNodes.length);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx"],"names":["React","Component","Node","dijkstras","Grid","constructor","props","state","nodes","startNode","endNode","startNodePreviouslySet","endNodePreviouslySet","isDragging","handleNodeClick","bind","handleNodeDrag","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","newRow","newColumn","console","log","adjacentNodes","selectionMode","nodeSetMode","nodePreviouslySet","rowColIndices","oldRow","oldCol","nodeType","findPrevNode","handleNodePressed","render","map","rowIndex","node","colIndex","type","i","length","findIndex","currentColumn","resetGrid","j","isVisited","dist","Infinity","prev","visualiseDijkstras","visitedNodes","setTimeout","visited"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\nimport dijkstras from \"../../Algorithms/dijkstras\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodeDrag = this.handleNodeDrag.bind(this);\n    this.maxRow = 15;\n    this.maxCol = 30;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n    isDragging: false,\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(\n      newRow,\n      newColumn,\n      this.state.nodes[newRow][newColumn].adjacentNodes\n    );\n\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true,\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true,\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({ nodes });\n    }\n  }\n\n  handleNodePressed() {\n    this.setState({ isDragging: !this.state.isDragging });\n    console.log(\"hi\");\n  }\n\n  // Displays the nods on the grid with their state values\n  render() {\n    let { nodes } = this.state;\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, colIndex) => {\n                return (\n                  <Node\n                    key={colIndex}\n                    node={node}\n                    isDragging={this.state.isDragging}\n                    handleNodeClick={this.handleNodeClick}\n                    handleNodeDown={this.handleNodePressed}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: \"normal-node\",\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {},\n        };\n      }\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push(nodes[row - 1][col]);\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push(nodes[row + 1][col]);\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push(nodes[row][col - 1]);\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push(nodes[row][col + 1]);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: \"normal-node\",\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {},\n    };\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n  visualiseDijkstras() {\n    let nodes = [...this.state.nodes];\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n\n    let visitedNodes = dijkstras(\n      nodes,\n      startNode,\n      endNode,\n      this.maxRow,\n      this.maxCol\n    );\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          nodes[visited.row][visited.col].nodeType = \"visited-node\";\n          this.setState({ nodes: nodes });\n        }, 10 * i);\n      }\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = \"path-node\";\n        prev = prev.prev;\n      }\n      this.setState({ nodes: nodes });\n    }, 10 * visitedNodes.length);\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}