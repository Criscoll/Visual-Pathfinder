{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/main/grid/grid.jsx\";\nimport React, { Component } from 'react';\nimport Node from './node/node';\nimport './grid.css';\nimport dijkstras from '../../../Algorithms/dijkstras';\nimport Results from './results/results';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: ''\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 50;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(newRow, newColumn, this.state.nodes[newRow][newColumn]);\n\n    if (this.props.selectionMode === '') {\n      return;\n    }\n\n    let nodes = this.copyNodes();\n    let nodeSetMode = 'wall-node';\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === 'start') {\n      nodeSetMode = 'start-node';\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === 'end') {\n      nodeSetMode = 'end-node';\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === 'start-node') {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === 'end-node') {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = 'normal-node';\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        document.getElementById(`node-${oldRow}-${oldCol}`).className = 'normal-node';\n        document.getElementById(`node-${newRow}-${newColumn}`).className = nodeSetMode;\n\n        if (nodeSetMode === 'start-node') {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn]\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn]\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = 'wall-node';\n      this.setState({\n        nodes: nodes\n      });\n      document.getElementById(`node-${newRow}-${newColumn}`).className = nodeSetMode;\n    }\n  }\n\n  handleNodePressed(row, column) {\n    this.setState({\n      isDragging: true\n    });\n    this.handleNodeClick(row, column);\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({\n        isDragging: false\n      });\n    }\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  } // Displays the nods on the grid with their state values\n\n\n  render() {\n    console.log('RENDERED');\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      onMouseLeave: this.handleNodeReleased,\n      onDragStart: this.handleDragBug,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodePressed: this.handleNodePressed,\n          handleNodeReleased: this.handleNodeReleased,\n          row: rowIndex,\n          col: colIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(Results, {\n      pathStatus: this.state.pathStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: 'normal-node',\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {}\n        };\n        document.getElementById(`node-${i}-${j}`).className = 'normal-node';\n      }\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: ''\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({\n        row: row - 1,\n        col: col\n      });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({\n        row: row + 1,\n        col: col\n      });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col - 1\n      });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col + 1\n      });\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: 'normal-node',\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {}\n    };\n  } // performs a deep copy of the grid so that the state is not altered directly by accident.\n\n\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach(x => {\n      let currentRow = [];\n      x.forEach(nodes => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n\n        currentRow.push(node);\n      });\n      clone.push(currentRow);\n    });\n    return clone;\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  visualiseDijkstras() {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    this.setState({\n      pathStatus: 'searching'\n    });\n    let visitedNodes = result.visitedNodes; // Below is the chunk of code that deals with incrementally updating the node colour to show which nodes the algorithm\n    // took in search of the goal node. To get this to work I utilise how the setTimeout function works with respect to react.\n    // In react, setState is normally run asynchronously with multiple setState calls typically batched together into one single\n    // setState call update for performance reasons. However, if setState is called within setTimeout, these calls now run synchronously.\n    // The reason for this is due to how setTimeout() works, it doesn't guarantee that the callback function will run after whatever delay\n    // you give it, it is only guaranteed to QUEUE UP the callback in a 'message queue' after that delay period. This message queue is a queue\n    // of callback functions which are run AFTER ALL OTHER CODE IS RUN and which are run one after the other in the order in which they\n    // were queued. I set a delay of 0 here because all I need to do is get this chunk of code into that queue and it will be run\n    // synchronously, the delay just controls when the code is sent to that queue, all other code below must run first regardless so it\n    // doesn't really matter.\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'visited-node';\n          console.log('ELEMENT ID FUCK'); // nodes[visited.row][visited.col].nodeType = \"visited-node\";\n          // this.setState({ nodes: nodes });\n        }, 25 * i);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({\n          pathStatus: 'none'\n        });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = 'path-node';\n        prev = prev.prev;\n      }\n\n      this.setState({\n        nodes: nodes,\n        pathStatus: 'found'\n      });\n    }, 25 * visitedNodes.length);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/main/grid/grid.jsx"],"names":["React","Component","Node","dijkstras","Results","Grid","constructor","props","state","nodes","startNode","endNode","startNodePreviouslySet","endNodePreviouslySet","isDragging","pathStatus","handleNodeClick","bind","handleNodePressed","handleNodeReleased","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","newRow","newColumn","console","log","selectionMode","copyNodes","nodeSetMode","nodePreviouslySet","rowColIndices","oldRow","oldCol","nodeType","findPrevNode","document","getElementById","className","column","handleDragBug","e","preventDefault","render","map","rowIndex","node","colIndex","type","i","length","findIndex","currentColumn","resetGrid","j","adjacentNodes","isVisited","dist","Infinity","prev","clone","forEach","x","JSON","parse","stringify","visualiseDijkstras","pathFound","result","visitedNodes","setTimeout","visited"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,YAAP;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SASnBC,KATmB,GASX;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,EAFL;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,sBAAsB,EAAE,KAJlB;AAKNC,MAAAA,oBAAoB,EAAE,KALhB;AAMNC,MAAAA,UAAU,EAAE,KANN;AAONC,MAAAA,UAAU,EAAE;AAPN,KATW;AAEjB,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAYDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIb,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIc,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,UAAIC,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,YAAIC,WAAW,GAAG,KAAKC,UAAL,CAAgBJ,GAAhB,EAAqBE,GAArB,CAAlB;AACAD,QAAAA,UAAU,CAACI,IAAX,CAAgBF,WAAhB;AACD;;AACDjB,MAAAA,KAAK,CAACmB,IAAN,CAAWJ,UAAX;AACD,KATiB,CAWlB;;;AACA,SAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,aAAKI,gBAAL,CAAsBpB,KAAK,CAACc,GAAD,CAAL,CAAWE,GAAX,CAAtB,EAAuChB,KAAvC;AACD;AACF;;AACD,SAAKqB,QAAL,CAAc;AAAErB,MAAAA;AAAF,KAAd;AACD;;AAEDO,EAAAA,eAAe,CAACe,MAAD,EAASC,SAAT,EAAoB;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,SAApB,EAA+B,KAAKxB,KAAL,CAAWC,KAAX,CAAiBsB,MAAjB,EAAyBC,SAAzB,CAA/B;;AAEA,QAAI,KAAKzB,KAAL,CAAW4B,aAAX,KAA6B,EAAjC,EAAqC;AACnC;AACD;;AAED,QAAI1B,KAAK,GAAG,KAAK2B,SAAL,EAAZ;AACA,QAAIC,WAAW,GAAG,WAAlB;AACA,QAAIC,iBAAiB,GAAG,KAAxB;;AAEA,QAAI,KAAK/B,KAAL,CAAW4B,aAAX,KAA6B,OAAjC,EAA0C;AACxCE,MAAAA,WAAW,GAAG,YAAd;AACAC,MAAAA,iBAAiB,GAAG,KAAK9B,KAAL,CAAWI,sBAA/B;AACD,KAHD,MAGO,IAAI,KAAKL,KAAL,CAAW4B,aAAX,KAA6B,KAAjC,EAAwC;AAC7CE,MAAAA,WAAW,GAAG,UAAd;AACAC,MAAAA,iBAAiB,GAAG,KAAK9B,KAAL,CAAWK,oBAA/B;AACD;;AAED,QAAIwB,WAAW,KAAK,WAApB,EAAiC;AAC/B,UAAIE,aAAa,GAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAApB;AACA,UAAIC,MAAM,GAAG,CAAC,CAAd;AACA,UAAIC,MAAM,GAAG,CAAC,CAAd;;AACA,UAAIH,iBAAiB,KAAK,KAA1B,EAAiC;AAC/B7B,QAAAA,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd,EAAyBU,QAAzB,GAAoCL,WAApC;;AACA,YAAIA,WAAW,KAAK,YAApB,EAAkC;AAChC,eAAKP,QAAL,CAAc;AACZrB,YAAAA,KAAK,EAAEA,KADK;AAEZC,YAAAA,SAAS,EAAED,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd,CAFC;AAGZpB,YAAAA,sBAAsB,EAAE;AAHZ,WAAd;AAKD,SAND,MAMO,IAAIyB,WAAW,KAAK,UAApB,EAAgC;AACrC,eAAKP,QAAL,CAAc;AACZrB,YAAAA,KAAK,EAAEA,KADK;AAEZE,YAAAA,OAAO,EAAEF,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd,CAFG;AAGZnB,YAAAA,oBAAoB,EAAE;AAHV,WAAd;AAKD;AACF,OAfD,MAeO;AACL0B,QAAAA,aAAa,GAAG,KAAKI,YAAL,CAAkBN,WAAlB,CAAhB;AACAG,QAAAA,MAAM,GAAGD,aAAa,CAAC,CAAD,CAAtB;AACAE,QAAAA,MAAM,GAAGF,aAAa,CAAC,CAAD,CAAtB;AACD;;AAED,UAAIC,MAAM,KAAK,CAAC,CAAZ,IAAiBC,MAAM,KAAK,CAAC,CAAjC,EAAoC;AAClChC,QAAAA,KAAK,CAAC+B,MAAD,CAAL,CAAcC,MAAd,EAAsBC,QAAtB,GAAiC,aAAjC;AACAjC,QAAAA,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd,EAAyBU,QAAzB,GAAoCL,WAApC;AACAO,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOL,MAAO,IAAGC,MAAO,EAAjD,EAAoDK,SAApD,GACE,aADF;AAEAF,QAAAA,QAAQ,CAACC,cAAT,CACG,QAAOd,MAAO,IAAGC,SAAU,EAD9B,EAEEc,SAFF,GAEcT,WAFd;;AAIA,YAAIA,WAAW,KAAK,YAApB,EAAkC;AAChC,eAAKP,QAAL,CAAc;AACZrB,YAAAA,KAAK,EAAEA,KADK;AAEZC,YAAAA,SAAS,EAAED,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd;AAFC,WAAd;AAID,SALD,MAKO;AACL,eAAKF,QAAL,CAAc;AACZrB,YAAAA,KAAK,EAAEA,KADK;AAEZE,YAAAA,OAAO,EAAEF,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd;AAFG,WAAd;AAID;AACF;AACF,KA9CD,MA8CO;AACLvB,MAAAA,KAAK,CAACsB,MAAD,CAAL,CAAcC,SAAd,EAAyBU,QAAzB,GAAoC,WAApC;AACA,WAAKZ,QAAL,CAAc;AAAErB,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACAmC,MAAAA,QAAQ,CAACC,cAAT,CACG,QAAOd,MAAO,IAAGC,SAAU,EAD9B,EAEEc,SAFF,GAEcT,WAFd;AAGD;AACF;;AAEDnB,EAAAA,iBAAiB,CAACK,GAAD,EAAMwB,MAAN,EAAc;AAC7B,SAAKjB,QAAL,CAAc;AAAEhB,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,SAAKE,eAAL,CAAqBO,GAArB,EAA0BwB,MAA1B;AACD;;AAED5B,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKX,KAAL,CAAWM,UAAf,EAA2B;AACzB,WAAKgB,QAAL,CAAc;AAAEhB,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD;AACF;;AAEDkC,EAAAA,aAAa,CAACC,CAAD,EAAI;AACfA,IAAAA,CAAC,CAACC,cAAF;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAhI0B,CAkI3B;;;AACAiB,EAAAA,MAAM,GAAG;AACPlB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAI;AAAEzB,MAAAA;AAAF,QAAY,KAAKD,KAArB;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,YAAY,EAAE,KAAKW,kBAFrB;AAGE,MAAA,WAAW,EAAE,KAAK6B,aAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGvC,KAAK,CAAC2C,GAAN,CAAU,CAAC7B,GAAD,EAAM8B,QAAN,KAAmB;AAC5B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG9B,GAAG,CAAC6B,GAAJ,CAAQ,CAACE,IAAD,EAAOC,QAAP,KAAoB;AAC3B,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,QADP;AAEE,UAAA,UAAU,EAAE,KAAK/C,KAAL,CAAWM,UAFzB;AAGE,UAAA,eAAe,EAAE,KAAKE,eAHxB;AAIE,UAAA,iBAAiB,EAAE,KAAKE,iBAJ1B;AAKE,UAAA,kBAAkB,EAAE,KAAKC,kBAL3B;AAME,UAAA,GAAG,EAAEkC,QANP;AAOE,UAAA,GAAG,EAAEE,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZA,CADH,CADF;AAiBD,KAlBA,CALH,CADF,eA0BE,oBAAC,OAAD;AAAS,MAAA,UAAU,EAAE,KAAK/C,KAAL,CAAWO,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,CADF;AA8BD;;AAED4B,EAAAA,YAAY,CAACa,IAAD,EAAO;AACjB,QAAIH,QAAQ,GAAG,CAAC,CAAhB;AACA,QAAIE,QAAQ,GAAG,CAAC,CAAhB;AACA,QAAI9C,KAAK,GAAG,KAAK2B,SAAL,EAAZ;;AAEA,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhD,KAAK,CAACiD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCF,MAAAA,QAAQ,GAAG9C,KAAK,CAACgD,CAAD,CAAL,CAASE,SAAT,CAAoBC,aAAD,IAAmB;AAC/C,eAAOA,aAAa,CAAClB,QAAd,KAA2Bc,IAAlC;AACD,OAFU,CAAX;;AAIA,UAAID,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBF,QAAAA,QAAQ,GAAGI,CAAX;AACA,eAAO,CAACJ,QAAD,EAAWE,QAAX,CAAP;AACD;AACF;;AAED,WAAO,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAP;AACD;;AAEDM,EAAAA,SAAS,GAAG;AACV,QAAIpD,KAAK,GAAG,KAAK2B,SAAL,EAAZ;;AAEA,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhD,KAAK,CAACiD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,KAAK,CAACgD,CAAD,CAAL,CAASC,MAA7B,EAAqCI,CAAC,EAAtC,EAA0C;AACxCrD,QAAAA,KAAK,CAACgD,CAAD,CAAL,CAASK,CAAT,IAAc;AACZvC,UAAAA,GAAG,EAAEkC,CADO;AAEZhC,UAAAA,GAAG,EAAEqC,CAFO;AAGZpB,UAAAA,QAAQ,EAAE,aAHE;AAIZqB,UAAAA,aAAa,EAAE,EAJH;AAKZC,UAAAA,SAAS,EAAE,KALC;AAMZC,UAAAA,IAAI,EAAEC,QANM;AAOZC,UAAAA,IAAI,EAAE;AAPM,SAAd;AASAvB,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOY,CAAE,IAAGK,CAAE,EAAvC,EAA0ChB,SAA1C,GAAsD,aAAtD;AACD;AACF,KAhBS,CAkBV;;;AACA,SAAK,IAAIvB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,aAAKI,gBAAL,CAAsBpB,KAAK,CAACc,GAAD,CAAL,CAAWE,GAAX,CAAtB,EAAuChB,KAAvC;AACD;AACF;;AAED,SAAKqB,QAAL,CAAc;AACZrB,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAE,EAFC;AAGZC,MAAAA,OAAO,EAAE,EAHG;AAIZC,MAAAA,sBAAsB,EAAE,KAJZ;AAKZC,MAAAA,oBAAoB,EAAE,KALV;AAMZC,MAAAA,UAAU,EAAE,KANA;AAOZC,MAAAA,UAAU,EAAE;AAPA,KAAd;AASD;;AAEDc,EAAAA,gBAAgB,CAACyB,IAAD,EAAO7C,KAAP,EAAc;AAC5B,QAAIc,GAAG,GAAG+B,IAAI,CAAC/B,GAAf;AACA,QAAIE,GAAG,GAAG6B,IAAI,CAAC7B,GAAf;;AAEA,QAAIF,GAAG,KAAK,CAAZ,EAAe;AACb+B,MAAAA,IAAI,CAACS,aAAL,CAAmBnC,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBE,QAAAA,GAAG,EAAEA;AAArB,OAAxB;AACD;;AAED,QAAIF,GAAG,KAAK,KAAKH,MAAL,GAAc,CAA1B,EAA6B;AAC3BkC,MAAAA,IAAI,CAACS,aAAL,CAAmBnC,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBE,QAAAA,GAAG,EAAEA;AAArB,OAAxB;AACD;;AAED,QAAIA,GAAG,KAAK,CAAZ,EAAe;AACb6B,MAAAA,IAAI,CAACS,aAAL,CAAmBnC,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAP;AAAYE,QAAAA,GAAG,EAAEA,GAAG,GAAG;AAAvB,OAAxB;AACD;;AAED,QAAIA,GAAG,KAAK,KAAKJ,MAAL,GAAc,CAA1B,EAA6B;AAC3BiC,MAAAA,IAAI,CAACS,aAAL,CAAmBnC,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAP;AAAYE,QAAAA,GAAG,EAAEA,GAAG,GAAG;AAAvB,OAAxB;AACD;AACF;;AAEDE,EAAAA,UAAU,CAACJ,GAAD,EAAME,GAAN,EAAW;AACnB,WAAO;AACLF,MAAAA,GAAG,EAAEA,GADA;AAELE,MAAAA,GAAG,EAAEA,GAFA;AAGLiB,MAAAA,QAAQ,EAAE,aAHL;AAILqB,MAAAA,aAAa,EAAE,EAJV;AAKLC,MAAAA,SAAS,EAAE,KALN;AAMLC,MAAAA,IAAI,EAAEC,QAND;AAOLC,MAAAA,IAAI,EAAE;AAPD,KAAP;AASD,GA5P0B,CA8P3B;;;AACA/B,EAAAA,SAAS,GAAG;AACV,QAAIgC,KAAK,GAAG,EAAZ;AACA,SAAK5D,KAAL,CAAWC,KAAX,CAAiB4D,OAAjB,CAA0BC,CAAD,IAAO;AAC9B,UAAI9C,UAAU,GAAG,EAAjB;AACA8C,MAAAA,CAAC,CAACD,OAAF,CAAW5D,KAAD,IAAW;AACnB,YAAI6C,IAAI,GAAGiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAehE,KAAf,CAAX,CAAX;AACA6C,QAAAA,IAAI,CAACW,IAAL,GAAYC,QAAZ,CAFmB,CAEG;;AACtB1C,QAAAA,UAAU,CAACI,IAAX,CAAgB0B,IAAhB;AACD,OAJD;AAMAc,MAAAA,KAAK,CAACxC,IAAN,CAAWJ,UAAX;AACD,KATD;AAWA,WAAO4C,KAAP;AACD,GA7Q0B,CA+Q3B;;;AACAM,EAAAA,kBAAkB,GAAG;AACnB,QAAIjE,KAAK,GAAG,KAAK2B,SAAL,EAAZ;AACA,QAAI1B,SAAS,GAAGD,KAAK,CAAC,KAAKD,KAAL,CAAWE,SAAX,CAAqBa,GAAtB,CAAL,CAAgC,KAAKf,KAAL,CAAWE,SAAX,CAAqBe,GAArD,CAAhB;AACA,QAAId,OAAO,GAAGF,KAAK,CAAC,KAAKD,KAAL,CAAWG,OAAX,CAAmBY,GAApB,CAAL,CAA8B,KAAKf,KAAL,CAAWG,OAAX,CAAmBc,GAAjD,CAAd;AACA,QAAIkD,SAAS,GAAG,IAAhB;AAEA,QAAIC,MAAM,GAAGzE,SAAS,CACpBM,KADoB,EAEpBC,SAFoB,EAGpBC,OAHoB,EAIpB,KAAKS,MAJe,EAKpB,KAAKC,MALe,EAMpBsD,SANoB,CAAtB;AASA,SAAK7C,QAAL,CAAc;AAAEf,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,QAAI8D,YAAY,GAAGD,MAAM,CAACC,YAA1B,CAhBmB,CAkBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,YAAY,CAACnB,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,UAAIoB,YAAY,CAACpB,CAAD,CAAZ,KAAoB/C,SAApB,IAAiCmE,YAAY,CAACpB,CAAD,CAAZ,KAAoB9C,OAAzD,EAAkE;AAChEmE,QAAAA,UAAU,CAAC,MAAM;AACf,cAAIC,OAAO,GAAGF,YAAY,CAACpB,CAAD,CAA1B;AACAb,UAAAA,QAAQ,CAACC,cAAT,CACG,QAAOkC,OAAO,CAACxD,GAAI,IAAGwD,OAAO,CAACtD,GAAI,EADrC,EAEEqB,SAFF,GAEc,cAFd;AAGAb,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EALe,CAMf;AACA;AACD,SARS,EAQP,KAAKuB,CARE,CAAV;AASD;AACF;;AAED,QAAImB,MAAM,CAACD,SAAP,KAAqB,KAAzB,EAAgC;AAC9BG,MAAAA,UAAU,CAAC,MAAM;AACf,aAAKhD,QAAL,CAAc;AAAEf,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD,OAFS,EAEP,IAFO,CAAV;AAGA;AACD;;AAED+D,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIX,IAAI,GAAGxD,OAAO,CAACwD,IAAnB;;AACA,aAAOA,IAAI,CAAC5C,GAAL,KAAab,SAAS,CAACa,GAAvB,IAA8B4C,IAAI,CAAC1C,GAAL,KAAaf,SAAS,CAACe,GAA5D,EAAiE;AAC/DhB,QAAAA,KAAK,CAAC0D,IAAI,CAAC5C,GAAN,CAAL,CAAgB4C,IAAI,CAAC1C,GAArB,EAA0BiB,QAA1B,GAAqC,WAArC;AACAyB,QAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACD;;AACD,WAAKrC,QAAL,CAAc;AAAErB,QAAAA,KAAK,EAAEA,KAAT;AAAgBM,QAAAA,UAAU,EAAE;AAA5B,OAAd;AACD,KAPS,EAOP,KAAK8D,YAAY,CAACnB,MAPX,CAAV;AAQD;;AAzU0B;;AA4U7B,eAAerD,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Node from './node/node';\nimport './grid.css';\nimport dijkstras from '../../../Algorithms/dijkstras';\nimport Results from './results/results';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 50;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n    isDragging: false,\n    pathStatus: '',\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    console.log(newRow, newColumn, this.state.nodes[newRow][newColumn]);\n\n    if (this.props.selectionMode === '') {\n      return;\n    }\n\n    let nodes = this.copyNodes();\n    let nodeSetMode = 'wall-node';\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === 'start') {\n      nodeSetMode = 'start-node';\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === 'end') {\n      nodeSetMode = 'end-node';\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === 'start-node') {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true,\n          });\n        } else if (nodeSetMode === 'end-node') {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true,\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = 'normal-node';\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        document.getElementById(`node-${oldRow}-${oldCol}`).className =\n          'normal-node';\n        document.getElementById(\n          `node-${newRow}-${newColumn}`\n        ).className = nodeSetMode;\n\n        if (nodeSetMode === 'start-node') {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = 'wall-node';\n      this.setState({ nodes: nodes });\n      document.getElementById(\n        `node-${newRow}-${newColumn}`\n      ).className = nodeSetMode;\n    }\n  }\n\n  handleNodePressed(row, column) {\n    this.setState({ isDragging: true });\n    this.handleNodeClick(row, column);\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({ isDragging: false });\n    }\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  }\n\n  // Displays the nods on the grid with their state values\n  render() {\n    console.log('RENDERED');\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                      row={rowIndex}\n                      col={colIndex}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <Results pathStatus={this.state.pathStatus} />\n      </React.Fragment>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: 'normal-node',\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {},\n        };\n        document.getElementById(`node-${i}-${j}`).className = 'normal-node';\n      }\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: '',\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({ row: row, col: col + 1 });\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: 'normal-node',\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {},\n    };\n  }\n\n  // performs a deep copy of the grid so that the state is not altered directly by accident.\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach((x) => {\n      let currentRow = [];\n      x.forEach((nodes) => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n        currentRow.push(node);\n      });\n\n      clone.push(currentRow);\n    });\n\n    return clone;\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n  visualiseDijkstras() {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n\n    let result = dijkstras(\n      nodes,\n      startNode,\n      endNode,\n      this.maxRow,\n      this.maxCol,\n      pathFound\n    );\n\n    this.setState({ pathStatus: 'searching' });\n    let visitedNodes = result.visitedNodes;\n\n    // Below is the chunk of code that deals with incrementally updating the node colour to show which nodes the algorithm\n    // took in search of the goal node. To get this to work I utilise how the setTimeout function works with respect to react.\n    // In react, setState is normally run asynchronously with multiple setState calls typically batched together into one single\n    // setState call update for performance reasons. However, if setState is called within setTimeout, these calls now run synchronously.\n    // The reason for this is due to how setTimeout() works, it doesn't guarantee that the callback function will run after whatever delay\n    // you give it, it is only guaranteed to QUEUE UP the callback in a 'message queue' after that delay period. This message queue is a queue\n    // of callback functions which are run AFTER ALL OTHER CODE IS RUN and which are run one after the other in the order in which they\n    // were queued. I set a delay of 0 here because all I need to do is get this chunk of code into that queue and it will be run\n    // synchronously, the delay just controls when the code is sent to that queue, all other code below must run first regardless so it\n    // doesn't really matter.\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'visited-node';\n          console.log('ELEMENT ID FUCK');\n          // nodes[visited.row][visited.col].nodeType = \"visited-node\";\n          // this.setState({ nodes: nodes });\n        }, 25 * i);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({ pathStatus: 'none' });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = 'path-node';\n        prev = prev.prev;\n      }\n      this.setState({ nodes: nodes, pathStatus: 'found' });\n    }, 25 * visitedNodes.length);\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}