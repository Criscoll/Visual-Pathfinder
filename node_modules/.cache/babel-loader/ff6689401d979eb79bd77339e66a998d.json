{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/components/Node.jsx\";\nimport React, { Component } from 'react';\nimport '../styles/main.css';\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n  }\n\n  handleMouseEnter() {\n    if (this.props.isDragging) {\n      this.props.handleNodeClick(this.props.row, this.props.col);\n    }\n  }\n\n  handlePress() {\n    this.props.handleNodePressed(this.props.row, this.props.col);\n  } // shouldComponentUpdate() is used to tell react whether or not this child component should re-render. By default it returns true such that\n  // whenever the parent re-renders so does the child. The check here ensures that shouldComponentUpdate() returns false (don't re-render)\n  // unless the nodeType of this Node component changes\n\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.resetClicked !== nextProps.resetClicked;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: 'node-' + this.props.row + '-' + this.props.col,\n      className: this.props.node.nodeType,\n      onMouseDown: this.handlePress,\n      onMouseUp: this.props.handleNodeReleased,\n      onMouseEnter: this.handleMouseEnter,\n      onKeyPress: () => {\n        console.log('hereerer');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"material-icons walk\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"directions_walk\"), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"material-icons flag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"flag\"));\n  }\n\n}\n\nexport default Node;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/components/Node.jsx"],"names":["React","Component","Node","constructor","props","handleMouseEnter","bind","handlePress","isDragging","handleNodeClick","row","col","handleNodePressed","shouldComponentUpdate","nextProps","resetClicked","render","node","nodeType","handleNodeReleased","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAC3BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKD,KAAL,CAAWI,UAAf,EAA2B;AACzB,WAAKJ,KAAL,CAAWK,eAAX,CAA2B,KAAKL,KAAL,CAAWM,GAAtC,EAA2C,KAAKN,KAAL,CAAWO,GAAtD;AACD;AACF;;AAEDJ,EAAAA,WAAW,GAAG;AACZ,SAAKH,KAAL,CAAWQ,iBAAX,CAA6B,KAAKR,KAAL,CAAWM,GAAxC,EAA6C,KAAKN,KAAL,CAAWO,GAAxD;AACD,GAf0B,CAiB3B;AACA;AACA;;;AACAE,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,WAAO,KAAKV,KAAL,CAAWW,YAAX,KAA4BD,SAAS,CAACC,YAA7C;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,EAAE,EAAE,UAAU,KAAKZ,KAAL,CAAWM,GAArB,GAA2B,GAA3B,GAAiC,KAAKN,KAAL,CAAWO,GADlD;AAEE,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWa,IAAX,CAAgBC,QAF7B;AAGE,MAAA,WAAW,EAAE,KAAKX,WAHpB;AAIE,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAWe,kBAJxB;AAKE,MAAA,YAAY,EAAE,KAAKd,gBALrB;AAME,MAAA,UAAU,EAAE,MAAM;AAChBe,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVF,eAYE;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,CADF;AAgBD;;AAzC0B;;AA4C7B,eAAenB,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/main.css';\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n  }\n\n  handleMouseEnter() {\n    if (this.props.isDragging) {\n      this.props.handleNodeClick(this.props.row, this.props.col);\n    }\n  }\n\n  handlePress() {\n    this.props.handleNodePressed(this.props.row, this.props.col);\n  }\n\n  // shouldComponentUpdate() is used to tell react whether or not this child component should re-render. By default it returns true such that\n  // whenever the parent re-renders so does the child. The check here ensures that shouldComponentUpdate() returns false (don't re-render)\n  // unless the nodeType of this Node component changes\n  shouldComponentUpdate(nextProps) {\n    return this.props.resetClicked !== nextProps.resetClicked;\n  }\n\n  render() {\n    return (\n      <div\n        id={'node-' + this.props.row + '-' + this.props.col}\n        className={this.props.node.nodeType}\n        onMouseDown={this.handlePress}\n        onMouseUp={this.props.handleNodeReleased}\n        onMouseEnter={this.handleMouseEnter}\n        onKeyPress={() => {\n          console.log('hereerer');\n        }}\n      >\n        <i className=\"material-icons walk\">directions_walk</i>\n\n        <i className=\"material-icons flag\">flag</i>\n      </div>\n    );\n  }\n}\n\nexport default Node;\n"]},"metadata":{},"sourceType":"module"}