{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < 15; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < 30; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\"\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    let nodeSelectMode = this.props.selectionMode;\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (nodeSelectMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (nodeSelectMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let rowIndex = -1;\n      let colIndex = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        rowIndex = rowColIndices[0];\n        colIndex = rowColIndices[1];\n      }\n\n      if (rowIndex !== -1 && colIndex !== -1) {\n        nodes[rowIndex][colIndex].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        this.setState({\n          nodes\n        });\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({\n        nodes\n      });\n    }\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(\"GRID RENDERED\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          selectionMode: this.props.selectionMode,\n          handleNodeClick: this.handleNodeClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx"],"names":["React","Component","Node","Grid","constructor","props","state","nodes","startNodePreviouslySet","endNodePreviouslySet","handleNodeClick","bind","componentDidMount","row","currentRow","col","currentNode","nodeType","push","setState","newRow","newColumn","nodeSelectMode","selectionMode","nodeSetMode","nodePreviouslySet","rowColIndices","rowIndex","colIndex","findPrevNode","render","console","log","map","node","type","i","length","findIndex","currentColumn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n  }\n\n  state = {\n    nodes: [],\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < 15; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 30; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\",\n        };\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    let nodeSelectMode = this.props.selectionMode;\n    let nodes = this.state.nodes;\n\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (nodeSelectMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (nodeSelectMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let rowIndex = -1;\n      let colIndex = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === \"start-node\") {\n          this.setState({ nodes: nodes, startNodePreviouslySet: true });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({ nodes: nodes, endNodePreviouslySet: true });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        rowIndex = rowColIndices[0];\n        colIndex = rowColIndices[1];\n      }\n\n      if (rowIndex !== -1 && colIndex !== -1) {\n        nodes[rowIndex][colIndex].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        this.setState({ nodes });\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({ nodes });\n    }\n  }\n\n  render() {\n    const { nodes } = this.state;\n\n    console.log(\"GRID RENDERED\");\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, colIndex) => {\n                return (\n                  <Node\n                    key={colIndex}\n                    node={node}\n                    selectionMode={this.props.selectionMode}\n                    handleNodeClick={this.handleNodeClick}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}