{"ast":null,"code":"import * as constants from '../constants/constants';\nexport default function recursiveDivision(origin, width, height, wallInfo, timer) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    console.log(origin);\n    console.log(`horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`);\n    return;\n  }\n\n  let isHorizontal = Boolean(width < height);\n\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  } // let isHorizontal = 0;\n\n\n  let wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    recursiveDivision(origin, width, Math.abs(wallIdx - origin.row), wallInfo, timer);\n    recursiveDivision({\n      row: wallIdx + 1,\n      col: origin.col\n    }, width, height - wallIdx - 1, wallInfo, timer);\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    recursiveDivision(origin, Math.abs(wallIdx - origin.col), height, wallInfo, timer);\n    recursiveDivision({\n      row: origin.row,\n      col: wallIdx + 1\n    }, width - wallIdx - 1, height, wallInfo, timer);\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${wallIdx}-${col}`).className) && col !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  } //   console.log(origin);\n  //   console.log(\n  //     `horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`\n  //   );\n\n\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${row}-${wallIdx}`).className) && row !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  } //   console.log(origin);\n  //   console.log(\n  //     `vertical, wallIdx: ${wallIdx}, height: ${height} holeIdx: ${wallInfo.holeIdx}`\n  //   );\n\n\n  return timer;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/recursiveDivision.js"],"names":["constants","recursiveDivision","origin","width","height","wallInfo","timer","console","log","wallIdx","holeIdx","isHorizontal","Boolean","randomIntFromInterval","row","col","Math","floor","random","maxRow","buildHorizontalWall","abs","maxCol","buildVerticalWall","min","max","includes","document","getElementById","className","setTimeout"],"mappings":"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","sourcesContent":["import * as constants from '../constants/constants';\n\nexport default function recursiveDivision(\n  origin,\n  width,\n  height,\n  wallInfo,\n  timer\n) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    console.log(origin);\n    console.log(\n      `horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`\n    );\n    return;\n  }\n\n  let isHorizontal = Boolean(width < height);\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  }\n  // let isHorizontal = 0;\n\n  let wallIdx = isHorizontal\n    ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n    : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal\n      ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n      : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal\n    ? Math.floor(Math.random() * (width - 1)) + origin.col\n    : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal\n      ? Math.floor(Math.random() * (width - 1)) + origin.col\n      : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    recursiveDivision(\n      origin,\n      width,\n      Math.abs(wallIdx - origin.row),\n      wallInfo,\n      timer\n    );\n    recursiveDivision(\n      { row: wallIdx + 1, col: origin.col },\n      width,\n      height - wallIdx - 1,\n      wallInfo,\n      timer\n    );\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    recursiveDivision(\n      origin,\n      Math.abs(wallIdx - origin.col),\n      height,\n      wallInfo,\n      timer\n    );\n    recursiveDivision(\n      { row: origin.row, col: wallIdx + 1 },\n      width - wallIdx - 1,\n      height,\n      wallInfo,\n      timer\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${wallIdx}-${col}`).className\n      ) &&\n      col !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n  //   console.log(origin);\n  //   console.log(\n  //     `horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`\n  //   );\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${row}-${wallIdx}`).className\n      ) &&\n      row !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n  //   console.log(origin);\n  //   console.log(\n  //     `vertical, wallIdx: ${wallIdx}, height: ${height} holeIdx: ${wallInfo.holeIdx}`\n  //   );\n  return timer;\n}\n"]},"metadata":{},"sourceType":"module"}