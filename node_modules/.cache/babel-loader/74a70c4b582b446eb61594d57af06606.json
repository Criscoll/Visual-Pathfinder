{"ast":null,"code":"export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n  initialise(grid, numRows, numCols);\n  console.log(startNode);\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = openList.findLowestFCost(openList);\n\n    if (Object.keys(node).length === 0) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: true\n      };\n    }\n\n    if (node.visited === false) {\n      node.visited = true;\n\n      for (let i = 0; i < node.adjacentNodes.length; i++) {\n        let adjacentRow = node.adjacentNodes[i].row;\n        let adjacentCol = node.adjacentNodes[i].col;\n\n        if (grid[adjacentRow][adjacentCol].visited === false && document.getElementById(`node-${adjacentRow}-${adjacentCol}`).className !== 'wall-node') {\n          stack.push(grid[adjacentRow][adjacentCol]);\n          grid[adjacentRow][adjacentCol].prev = node;\n        }\n      }\n    }\n  }\n\n  return {\n    visitedNodes: visitedNodes,\n    pathFound: false\n  };\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n  return d1 + d2;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/astar.js"],"names":["astar","grid","startNode","endNode","numRows","numCols","visitedNodes","openList","closedList","initialise","console","log","push","length","currentNode","findLowestFCost","Object","keys","node","pathFound","row","col","visited","i","adjacentNodes","adjacentRow","adjacentCol","document","getElementById","className","stack","prev","j","heuristicValue","pos0","pos1","d1","Math","abs","d2"],"mappings":"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","sourcesContent":["export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n\n  initialise(grid, numRows, numCols);\n  console.log(startNode);\n\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = openList.findLowestFCost(openList);\n\n    if (Object.keys(node).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    if (node.visited === false) {\n      node.visited = true;\n\n      for (let i = 0; i < node.adjacentNodes.length; i++) {\n        let adjacentRow = node.adjacentNodes[i].row;\n        let adjacentCol = node.adjacentNodes[i].col;\n\n        if (\n          grid[adjacentRow][adjacentCol].visited === false &&\n          document.getElementById(`node-${adjacentRow}-${adjacentCol}`)\n            .className !== 'wall-node'\n        ) {\n          stack.push(grid[adjacentRow][adjacentCol]);\n          grid[adjacentRow][adjacentCol].prev = node;\n        }\n      }\n    }\n  }\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n\n  return d1 + d2;\n}\n"]},"metadata":{},"sourceType":"module"}