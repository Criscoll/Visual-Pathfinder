{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/App.js\";\nimport React, { Component } from 'react';\nimport Grid from './containers/Grid';\nimport Toolbar from './containers/Toolbar';\nimport Stats from './containers/Stats';\nimport * as enumerations from './constants/algorithmEnum';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleGoClick = this.handleGoClick.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.setAlgorithmRunning = this.setAlgorithmRunning.bind(this);\n    this.setStats = this.setStats.bind(this);\n    this.gridRef = React.createRef(); // used to handle reseting the grid.\n\n    this.state = {\n      algorithm: enumerations.algorithms.none,\n      algorithmRunning: false,\n      algorithmName: null,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      firstRun: true\n    };\n  }\n\n  handleResetClick() {\n    this.gridRef.current.resetGrid();\n    this.setState({\n      algorithmRunning: false,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null\n    });\n  }\n\n  handleGoClick() {\n    this.gridRef.current.runVisualiser(this.state.algorithm);\n    this.setState({\n      algorithmRunning: true,\n      algorithmUsed: this.state.algorithmName,\n      pathLength: null,\n      nodesChecked: null\n    });\n  }\n\n  setAlgorithmRunning(state) {\n    this.setState({\n      algorithmRunning: state\n    });\n  }\n\n  setAlgorithm(algorithm, algorithmName) {\n    this.setState({\n      algorithm: algorithm,\n      algorithmName: algorithmName,\n      firstRun: true\n    });\n  }\n\n  setStats(pathLength, nodesChecked) {\n    this.setState({\n      pathLength: pathLength,\n      nodesChecked: nodesChecked\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      handleResetClick: this.handleResetClick,\n      handleGoClick: this.handleGoClick,\n      algorithm: this.state.algorithm,\n      setAlgorithm: this.setAlgorithm,\n      algorithmRunning: this.state.algorithmRunning,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Stats, {\n      algorithmUsed: this.state.algorithmUsed,\n      pathLength: this.state.pathLength,\n      nodesChecked: this.state.nodesChecked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      ref: this.gridRef,\n      setAlgorithmRunning: this.setAlgorithmRunning,\n      setStats: this.setStats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/App.js"],"names":["React","Component","Grid","Toolbar","Stats","enumerations","Main","constructor","props","handleResetClick","bind","handleGoClick","setAlgorithm","setAlgorithmRunning","setStats","gridRef","createRef","state","algorithm","algorithms","none","algorithmRunning","algorithmName","algorithmUsed","pathLength","nodesChecked","firstRun","current","resetGrid","setState","runVisualiser","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Grid from './containers/Grid';\nimport Toolbar from './containers/Toolbar';\nimport Stats from './containers/Stats';\nimport * as enumerations from './constants/algorithmEnum';\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleGoClick = this.handleGoClick.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.setAlgorithmRunning = this.setAlgorithmRunning.bind(this);\n    this.setStats = this.setStats.bind(this);\n\n    this.gridRef = React.createRef(); // used to handle reseting the grid.\n\n    this.state = {\n      algorithm: enumerations.algorithms.none,\n      algorithmRunning: false,\n      algorithmName: null,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      firstRun: true,\n    };\n  }\n\n  handleResetClick() {\n    this.gridRef.current.resetGrid();\n    this.setState({\n      algorithmRunning: false,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n    });\n  }\n\n  handleGoClick() {\n    this.gridRef.current.runVisualiser(this.state.algorithm);\n    this.setState({\n      algorithmRunning: true,\n      algorithmUsed: this.state.algorithmName,\n      pathLength: null,\n      nodesChecked: null,\n    });\n  }\n\n  setAlgorithmRunning(state) {\n    this.setState({ algorithmRunning: state });\n  }\n\n  setAlgorithm(algorithm, algorithmName) {\n    this.setState({\n      algorithm: algorithm,\n      algorithmName: algorithmName,\n      firstRun: true,\n    });\n  }\n\n  setStats(pathLength, nodesChecked) {\n    this.setState({ pathLength: pathLength, nodesChecked: nodesChecked });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Toolbar\n          handleResetClick={this.handleResetClick}\n          handleGoClick={this.handleGoClick}\n          algorithm={this.state.algorithm}\n          setAlgorithm={this.setAlgorithm}\n          algorithmRunning={this.state.algorithmRunning}\n        />\n        <Stats\n          algorithmUsed={this.state.algorithmUsed}\n          pathLength={this.state.pathLength}\n          nodesChecked={this.state.nodesChecked}\n        />\n\n        <Grid\n          ref={this.gridRef}\n          setAlgorithmRunning={this.setAlgorithmRunning}\n          setStats={this.setStats}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}