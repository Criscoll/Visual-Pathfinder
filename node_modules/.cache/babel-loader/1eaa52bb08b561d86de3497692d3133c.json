{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < 15; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < 30; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\"\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let rowIndex = -1;\n      let colIndex = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        rowIndex = rowColIndices[0];\n        colIndex = rowColIndices[1];\n      }\n\n      if (rowIndex !== -1 && colIndex !== -1) {\n        nodes[rowIndex][colIndex].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        this.setState({\n          nodes\n        });\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({\n        nodes\n      });\n    }\n  }\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          handleNodeClick: this.handleNodeClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j].nodeType = \"normal-node\";\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false\n    });\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/grid/grid.jsx"],"names":["React","Component","Node","Grid","constructor","props","state","nodes","startNodePreviouslySet","endNodePreviouslySet","handleNodeClick","bind","componentDidMount","row","currentRow","col","currentNode","nodeType","push","setState","newRow","newColumn","selectionMode","nodeSetMode","nodePreviouslySet","rowColIndices","rowIndex","colIndex","findPrevNode","render","map","node","type","i","length","findIndex","currentColumn","resetGrid","j"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n  }\n\n  state = {\n    nodes: [],\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < 15; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 30; col++) {\n        let currentNode = {\n          row: row,\n          col: col,\n          nodeType: \"normal-node\",\n        };\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let rowIndex = -1;\n      let colIndex = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === \"start-node\") {\n          this.setState({ nodes: nodes, startNodePreviouslySet: true });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({ nodes: nodes, endNodePreviouslySet: true });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        rowIndex = rowColIndices[0];\n        colIndex = rowColIndices[1];\n      }\n\n      if (rowIndex !== -1 && colIndex !== -1) {\n        nodes[rowIndex][colIndex].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        this.setState({ nodes });\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({ nodes });\n    }\n  }\n\n  render() {\n    let { nodes } = this.state;\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, colIndex) => {\n                return (\n                  <Node\n                    key={colIndex}\n                    node={node}\n                    handleNodeClick={this.handleNodeClick}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j].nodeType = \"normal-node\";\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n    });\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}