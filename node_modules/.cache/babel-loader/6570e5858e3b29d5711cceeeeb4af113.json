{"ast":null,"code":"import*as constants from'../constants/constants';export default function dikstrasAlgorithm(grid,startNode,endNode,numRows,numCols){var visitedNodes=[];var queue=[];startNode.dist=0;for(var i=0;i<numRows;i++){for(var j=0;j<numCols;j++){if(document.getElementById(\"node-\".concat(i,\"-\").concat(j)).className!=='wall-node'){queue.push(grid[i][j]);}}}while(queue.length!==0){var s=findMinimum(queue);if(Object.keys(s).length===0){return{visitedNodes:visitedNodes,pathFound:false};}visitedNodes.push(s);if(s.row===endNode.row&&s.col===endNode.col){return{visitedNodes:visitedNodes,pathFound:true};}for(var _i=0;_i<s.adjacentNodes.length;_i++){if(document.getElementById(\"node-\".concat(s.adjacentNodes[_i].row,\"-\").concat(s.adjacentNodes[_i].col)).className!=='wall-node'){var adjacentRow=s.adjacentNodes[_i].row;var adjacentCol=s.adjacentNodes[_i].col;var alt=s.dist+distance(s,s.adjacentNodes[_i]);if(alt<grid[adjacentRow][adjacentCol].dist){grid[adjacentRow][adjacentCol].dist=alt;grid[adjacentRow][adjacentCol].prev=s;}}}}return{visitedNodes:visitedNodes,pathFound:false};}// change this when weights are implemented\nfunction distance(u,v){if(document.getElementById(\"node-\".concat(v.row,\"-\").concat(v.col)).className==='weight-node'){return constants.weightValue;}else{return 1;}}function findMinimum(queue){var min=Infinity;var minIdx=0;var minItem={};for(var i=0;i<queue.length;i++){if(queue[i].dist<min){min=queue[i].dist;minIdx=i;minItem=queue[i];}}queue.splice(minIdx,1);return minItem;}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/dijkstras.js"],"names":["constants","dikstrasAlgorithm","grid","startNode","endNode","numRows","numCols","visitedNodes","queue","dist","i","j","document","getElementById","className","push","length","s","findMinimum","Object","keys","pathFound","row","col","adjacentNodes","adjacentRow","adjacentCol","alt","distance","prev","u","v","weightValue","min","Infinity","minIdx","minItem","splice"],"mappings":"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","sourcesContent":["import * as constants from '../constants/constants';\n\nexport default function dikstrasAlgorithm(\n  grid,\n  startNode,\n  endNode,\n  numRows,\n  numCols\n) {\n  let visitedNodes = [];\n  let queue = [];\n\n  startNode.dist = 0;\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (document.getElementById(`node-${i}-${j}`).className !== 'wall-node') {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (\n        document.getElementById(\n          `node-${s.adjacentNodes[i].row}-${s.adjacentNodes[i].col}`\n        ).className !== 'wall-node'\n      ) {\n        let adjacentRow = s.adjacentNodes[i].row;\n        let adjacentCol = s.adjacentNodes[i].col;\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n\n        if (alt < grid[adjacentRow][adjacentCol].dist) {\n          grid[adjacentRow][adjacentCol].dist = alt;\n          grid[adjacentRow][adjacentCol].prev = s;\n        }\n      }\n    }\n  }\n\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\n// change this when weights are implemented\nfunction distance(u, v) {\n  if (\n    document.getElementById(`node-${v.row}-${v.col}`).className ===\n    'weight-node'\n  ) {\n    return constants.weightValue;\n  } else {\n    return 1;\n  }\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}\n"]},"metadata":{},"sourceType":"module"}