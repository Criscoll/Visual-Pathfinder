{"ast":null,"code":"export default function dikstrasAlgorithm(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let queue = [];\n  startNode.dist = 0;\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (grid[i][j].nodeType !== \"wall-node\") {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: true\n      };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (s.adjacentNodes[i].nodeType !== \"wall-node\") {\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n\n        if (alt < s.adjacentNodes[i].dist) {\n          s.adjacentNodes[i].dist = alt;\n          s.adjacentNodes[i].prev = s;\n        }\n      }\n    }\n  }\n\n  return {\n    visitedNodes: visitedNodes,\n    pathFound: false\n  };\n} // change this when weights are implemented\n\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/Algorithms/dijkstras.js"],"names":["dikstrasAlgorithm","grid","startNode","endNode","numRows","numCols","visitedNodes","queue","dist","i","j","nodeType","push","length","s","findMinimum","Object","keys","pathFound","row","col","adjacentNodes","alt","distance","prev","u","v","min","Infinity","minIdx","minItem","splice"],"mappings":"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","sourcesContent":["export default function dikstrasAlgorithm(\n  grid,\n  startNode,\n  endNode,\n  numRows,\n  numCols\n) {\n  let visitedNodes = [];\n\n  let queue = [];\n  startNode.dist = 0;\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (grid[i][j].nodeType !== \"wall-node\") {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (s.adjacentNodes[i].nodeType !== \"wall-node\") {\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n        if (alt < s.adjacentNodes[i].dist) {\n          s.adjacentNodes[i].dist = alt;\n          s.adjacentNodes[i].prev = s;\n        }\n      }\n    }\n  }\n\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\n// change this when weights are implemented\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}\n"]},"metadata":{},"sourceType":"module"}