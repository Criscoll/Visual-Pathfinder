{"ast":null,"code":"export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n  initialise(grid, numRows, numCols);\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = findLowestFCost(openList); // End case -- result has been found, return the traced path\n\n    if (currentNode.row === endNode.row && currentNode.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    } // Normal case -- move currentNode from open to closed, process each of its neighbors\n\n\n    closedList.push(currentNode);\n\n    for (let i = 0; i < currentNode.adjacentNodes.length; i++) {\n      let neighbor = currentNode.adjacentNodes[i];\n\n      if (isInList(closedList, neighbour) || document.getElementById(`node-${neighbour.row}-${neighbour.col}`).className === 'wall-node') {\n        // not a valid node to process, skip to next neighbor\n        continue;\n      } // g score is the shortest distance from start to current node, we need to check if\n      //   the path we have arrived at this neighbor is the shortest one we have seen yet\n\n\n      let gScore = currentNode.g + 1; // 1 is the distance from a node to it's neighbor\n\n      let gScoreIsBest = false;\n\n      if (!isInList(openList, neighbour)) {\n        // This the the first time we have arrived at this node, it must be the best\n        // Also, we need to take the h (heuristic) score since we haven't done so yet\n        gScoreIsBest = true;\n        neighbor.h = heuristicValue(neighbor, endNode);\n        openList.push(neighbor);\n      } else if (gScore < neighbor.g) {\n        // We have already seen the node, but last time it had a worse g (distance from start)\n        gScoreIsBest = true;\n      }\n\n      if (gScoreIsBest) {\n        // Found an optimal (so far) path to this node.   Store info on how we got here and\n        //  just how good it really is...\n        neighbor.prev = currentNode;\n        neighbor.g = gScore;\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.debug = 'F: ' + neighbor.f + '<br />G: ' + neighbor.g + '<br />H: ' + neighbor.h;\n      }\n    }\n  } // No result was found -- empty array signifies failure to find path\n\n\n  return [];\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {\n  let lowInd = 0;\n\n  for (let i = 0; i < openList.length; i++) {\n    if (openList[i].f < openList[lowInd].f) {\n      lowInd = i;\n    }\n  }\n\n  let minFNode = openList[i];\n  openList.splice(lowInd, 1);\n  return minFNode;\n}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n  return d1 + d2;\n}\n\nfunction isInList(list, node) {\n  list.forEach(item => {\n    if (item.row === node.row && item.col === node.col) {\n      return true;\n    }\n  });\n  return false;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/astar.js"],"names":["astar","grid","startNode","endNode","numRows","numCols","visitedNodes","openList","closedList","initialise","push","length","currentNode","findLowestFCost","row","col","pathFound","i","adjacentNodes","neighbor","isInList","neighbour","document","getElementById","className","gScore","g","gScoreIsBest","h","heuristicValue","prev","f","debug","j","node","lowInd","minFNode","splice","pos0","pos1","d1","Math","abs","d2","list","forEach","item"],"mappings":"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","sourcesContent":["export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n\n  initialise(grid, numRows, numCols);\n\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = findLowestFCost(openList);\n\n    // End case -- result has been found, return the traced path\n    if (currentNode.row === endNode.row && currentNode.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    // Normal case -- move currentNode from open to closed, process each of its neighbors\n    closedList.push(currentNode);\n\n    for (let i = 0; i < currentNode.adjacentNodes.length; i++) {\n      let neighbor = currentNode.adjacentNodes[i];\n      if (\n        isInList(closedList, neighbour) ||\n        document.getElementById(`node-${neighbour.row}-${neighbour.col}`)\n          .className === 'wall-node'\n      ) {\n        // not a valid node to process, skip to next neighbor\n        continue;\n      }\n\n      // g score is the shortest distance from start to current node, we need to check if\n      //   the path we have arrived at this neighbor is the shortest one we have seen yet\n      let gScore = currentNode.g + 1; // 1 is the distance from a node to it's neighbor\n      let gScoreIsBest = false;\n\n      if (!isInList(openList, neighbour)) {\n        // This the the first time we have arrived at this node, it must be the best\n        // Also, we need to take the h (heuristic) score since we haven't done so yet\n\n        gScoreIsBest = true;\n        neighbor.h = heuristicValue(neighbor, endNode);\n        openList.push(neighbor);\n      } else if (gScore < neighbor.g) {\n        // We have already seen the node, but last time it had a worse g (distance from start)\n        gScoreIsBest = true;\n      }\n\n      if (gScoreIsBest) {\n        // Found an optimal (so far) path to this node.   Store info on how we got here and\n        //  just how good it really is...\n        neighbor.prev = currentNode;\n        neighbor.g = gScore;\n        neighbor.f = neighbor.g + neighbor.h;\n        neighbor.debug =\n          'F: ' +\n          neighbor.f +\n          '<br />G: ' +\n          neighbor.g +\n          '<br />H: ' +\n          neighbor.h;\n      }\n    }\n  }\n\n  // No result was found -- empty array signifies failure to find path\n  return [];\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {\n  let lowInd = 0;\n  for (let i = 0; i < openList.length; i++) {\n    if (openList[i].f < openList[lowInd].f) {\n      lowInd = i;\n    }\n  }\n  let minFNode = openList[i];\n  openList.splice(lowInd, 1);\n  return minFNode;\n}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n\n  return d1 + d2;\n}\n\nfunction isInList(list, node) {\n  list.forEach((item) => {\n    if (item.row === node.row && item.col === node.col) {\n      return true;\n    }\n  });\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}