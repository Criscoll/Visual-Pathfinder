{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/main/grid/grid.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\nimport dijkstras from \"../../../Algorithms/dijkstras\";\nimport Results from \"./results/results\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: \"\"\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 60;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    // console.log(\n    //   newRow,\n    //   newColumn,\n    //   this.state.nodes[newRow][newColumn].adjacentNodes\n    // );\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn]\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn]\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({\n        nodes\n      });\n    }\n  }\n\n  handleNodePressed(row, column) {\n    this.setState({\n      isDragging: true\n    });\n    this.handleNodeClick(row, column);\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({\n        isDragging: false\n      });\n    }\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log(\"prevented a drag\");\n  } // Displays the nods on the grid with their state values\n\n\n  render() {\n    console.log(\"grid rendered\");\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      onMouseLeave: this.handleNodeReleased,\n      onDragStart: this.handleDragBug,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodePressed: this.handleNodePressed,\n          handleNodeReleased: this.handleNodeReleased,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(Results, {\n      pathStatus: this.state.pathStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex(currentColumn => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: \"normal-node\",\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {}\n        };\n      }\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      pathStatus: \"\"\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push(nodes[row - 1][col]);\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push(nodes[row + 1][col]);\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push(nodes[row][col - 1]);\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push(nodes[row][col + 1]);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: \"normal-node\",\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {}\n    };\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  visualiseDijkstras() {\n    let nodes = [...this.state.nodes];\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    this.setState({\n      pathStatus: \"searching\"\n    });\n    let visitedNodes = result.visitedNodes; // update the nodes incrementally to see how the algorithm works\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        let visited = visitedNodes[i];\n        nodes[visited.row][visited.col].nodeType = \"visited-node\";\n        console.log(nodes === this.state.nodes);\n        setTimeout(() => {\n          console.log(\"done\");\n          this.setState({\n            nodes: nodes\n          });\n        }, 2000);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({\n          pathStatus: \"none\"\n        });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = \"path-node\";\n        prev = prev.prev;\n      }\n\n      this.setState({\n        nodes: nodes,\n        pathStatus: \"found\"\n      });\n    }, 10 * visitedNodes.length);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/components/main/grid/grid.jsx"],"names":["React","Component","Node","dijkstras","Results","Grid","constructor","props","state","nodes","startNode","endNode","startNodePreviouslySet","endNodePreviouslySet","isDragging","pathStatus","handleNodeClick","bind","handleNodePressed","handleNodeReleased","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","newRow","newColumn","selectionMode","nodeSetMode","nodePreviouslySet","rowColIndices","oldRow","oldCol","nodeType","findPrevNode","column","handleDragBug","e","preventDefault","console","log","render","map","rowIndex","node","colIndex","type","i","length","findIndex","currentColumn","resetGrid","j","adjacentNodes","isVisited","dist","Infinity","prev","visualiseDijkstras","pathFound","result","visitedNodes","visited","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./node/node\";\nimport \"./grid.css\";\nimport dijkstras from \"../../../Algorithms/dijkstras\";\nimport Results from \"./results/results\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 60;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    startNodePreviouslySet: false,\n    endNodePreviouslySet: false,\n    isDragging: false,\n    pathStatus: \"\",\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(newRow, newColumn) {\n    // console.log(\n    //   newRow,\n    //   newColumn,\n    //   this.state.nodes[newRow][newColumn].adjacentNodes\n    // );\n\n    if (this.props.selectionMode === \"\") {\n      return;\n    }\n\n    let nodes = this.state.nodes;\n    let nodeSetMode = \"wall-node\";\n    let nodePreviouslySet = false;\n\n    if (this.props.selectionMode === \"start\") {\n      nodeSetMode = \"start-node\";\n      nodePreviouslySet = this.state.startNodePreviouslySet;\n    } else if (this.props.selectionMode === \"end\") {\n      nodeSetMode = \"end-node\";\n      nodePreviouslySet = this.state.endNodePreviouslySet;\n    }\n\n    if (nodeSetMode !== \"wall-node\") {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n      if (nodePreviouslySet === false) {\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n            startNodePreviouslySet: true,\n          });\n        } else if (nodeSetMode === \"end-node\") {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n            endNodePreviouslySet: true,\n          });\n        }\n      } else {\n        rowColIndices = this.findPrevNode(nodeSetMode);\n        oldRow = rowColIndices[0];\n        oldCol = rowColIndices[1];\n      }\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        nodes[oldRow][oldCol].nodeType = \"normal-node\";\n        nodes[newRow][newColumn].nodeType = nodeSetMode;\n\n        if (nodeSetMode === \"start-node\") {\n          this.setState({\n            nodes: nodes,\n            startNode: nodes[newRow][newColumn],\n          });\n        } else {\n          this.setState({\n            nodes: nodes,\n            endNode: nodes[newRow][newColumn],\n          });\n        }\n      }\n    } else {\n      nodes[newRow][newColumn].nodeType = \"wall-node\";\n      this.setState({ nodes });\n    }\n  }\n\n  handleNodePressed(row, column) {\n    this.setState({ isDragging: true });\n    this.handleNodeClick(row, column);\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({ isDragging: false });\n    }\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log(\"prevented a drag\");\n  }\n\n  // Displays the nods on the grid with their state values\n  render() {\n    console.log(\"grid rendered\");\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      node={node}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <Results pathStatus={this.state.pathStatus} />\n      </React.Fragment>\n    );\n  }\n\n  findPrevNode(type) {\n    let rowIndex = -1;\n    let colIndex = -1;\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      colIndex = nodes[i].findIndex((currentColumn) => {\n        return currentColumn.nodeType === type;\n      });\n\n      if (colIndex !== -1) {\n        rowIndex = i;\n        return [rowIndex, colIndex];\n      }\n    }\n\n    return [-1, -1];\n  }\n\n  resetGrid() {\n    let nodes = this.state.nodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          nodeType: \"normal-node\",\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {},\n        };\n      }\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      pathStatus: \"\",\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push(nodes[row - 1][col]);\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push(nodes[row + 1][col]);\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push(nodes[row][col - 1]);\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push(nodes[row][col + 1]);\n    }\n  }\n\n  createNode(row, col) {\n    return {\n      row: row,\n      col: col,\n      nodeType: \"normal-node\",\n      adjacentNodes: [],\n      isVisited: false,\n      dist: Infinity,\n      prev: {},\n    };\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n  visualiseDijkstras() {\n    let nodes = [...this.state.nodes];\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n\n    let result = dijkstras(\n      nodes,\n      startNode,\n      endNode,\n      this.maxRow,\n      this.maxCol,\n      pathFound\n    );\n\n    this.setState({ pathStatus: \"searching\" });\n    let visitedNodes = result.visitedNodes;\n\n    // update the nodes incrementally to see how the algorithm works\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        let visited = visitedNodes[i];\n        nodes[visited.row][visited.col].nodeType = \"visited-node\";\n        console.log(nodes === this.state.nodes);\n        setTimeout(() => {\n          console.log(\"done\");\n          this.setState({ nodes: nodes });\n        }, 2000);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({ pathStatus: \"none\" });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        nodes[prev.row][prev.col].nodeType = \"path-node\";\n        prev = prev.prev;\n      }\n      this.setState({ nodes: nodes, pathStatus: \"found\" });\n    }, 10 * visitedNodes.length);\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}