{"ast":null,"code":"export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n  initialise(grid, numRows, numCols);\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = findLowestFCost(openList);\n\n    if (currentNode === null) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    } // End case -- result has been found, return the traced path\n\n\n    if (currentNode.row === endNode.row && currentNode.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: true\n      };\n    } // Normal case -- move currentNode from open to closed, process each of its neighbours\n\n\n    closedList.push(currentNode);\n    console.log(currentNode);\n\n    for (let i = 0; i < currentNode.adjacentNodes.length; i++) {\n      let adjacentRow = currentNode.adjacentNodes[i].row;\n      let adjacentCol = currentNode.adjacentNodes[i].col;\n      let neighbour = grid[adjacentRow][adjacentCol];\n\n      if (isInList(closedList, neighbour) || document.getElementById(`node-${neighbour.row}-${neighbour.col}`).className === 'wall-node') {\n        // not a valid node to process, skip to next neighbour\n        continue;\n      } // g score is the shortest distance from start to current node, we need to check if\n      //   the path we have arrived at this neighbour is the shortest one we have seen yet\n\n\n      let gScore = currentNode.g + 1; // 1 is the distance from a node to it's neighbour\n\n      let gScoreIsBest = false;\n\n      if (!isInList(openList, neighbour)) {\n        // This the the first time we have arrived at this node, it must be the best\n        // Also, we need to take the h (heuristic) score since we haven't done so yet\n        gScoreIsBest = true;\n        neighbour.h = heuristicValue(neighbour, endNode);\n        openList.push(neighbour);\n      } else if (gScore < neighbour.g) {\n        // We have already seen the node, but last time it had a worse g (distance from start)\n        gScoreIsBest = true;\n      }\n\n      if (gScoreIsBest) {\n        // Found an optimal (so far) path to this node.   Store info on how we got here and\n        //  just how good it really is...\n        neighbour.prev = currentNode;\n        neighbour.g = gScore;\n        neighbour.f = neighbour.g + neighbour.h;\n      }\n    }\n  } // No result was found -- empty array signifies failure to find path\n\n\n  return {\n    visitedNodes: visitedNodes,\n    pathFound: false\n  };\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {\n  let lowInd = 0;\n\n  for (let i = 0; i < openList.length; i++) {\n    if (openList[i].f < openList[lowInd].f) {\n      lowInd = i;\n    }\n  }\n\n  let minFNode = openList[lowInd];\n  openList.splice(lowInd, 1);\n  return minFNode;\n}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n  return d1 + d2;\n}\n\nfunction isInList(list, node) {\n  list.forEach(item => {\n    if (item.row === node.row && item.col === node.col) {\n      return true;\n    }\n  });\n  return false;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/astar.js"],"names":["astar","grid","startNode","endNode","numRows","numCols","visitedNodes","openList","closedList","initialise","push","length","currentNode","findLowestFCost","pathFound","row","col","console","log","i","adjacentNodes","adjacentRow","adjacentCol","neighbour","isInList","document","getElementById","className","gScore","g","gScoreIsBest","h","heuristicValue","prev","f","j","node","lowInd","minFNode","splice","pos0","pos1","d1","Math","abs","d2","list","forEach","item"],"mappings":"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","sourcesContent":["export default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n\n  initialise(grid, numRows, numCols);\n\n  openList.push(startNode);\n\n  while (openList.length !== 0) {\n    let currentNode = findLowestFCost(openList);\n\n    if (currentNode === null) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    // End case -- result has been found, return the traced path\n    if (currentNode.row === endNode.row && currentNode.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    // Normal case -- move currentNode from open to closed, process each of its neighbours\n    closedList.push(currentNode);\n\n    console.log(currentNode);\n\n    for (let i = 0; i < currentNode.adjacentNodes.length; i++) {\n      let adjacentRow = currentNode.adjacentNodes[i].row;\n      let adjacentCol = currentNode.adjacentNodes[i].col;\n\n      let neighbour = grid[adjacentRow][adjacentCol];\n\n      if (\n        isInList(closedList, neighbour) ||\n        document.getElementById(`node-${neighbour.row}-${neighbour.col}`)\n          .className === 'wall-node'\n      ) {\n        // not a valid node to process, skip to next neighbour\n        continue;\n      }\n\n      // g score is the shortest distance from start to current node, we need to check if\n      //   the path we have arrived at this neighbour is the shortest one we have seen yet\n      let gScore = currentNode.g + 1; // 1 is the distance from a node to it's neighbour\n      let gScoreIsBest = false;\n\n      if (!isInList(openList, neighbour)) {\n        // This the the first time we have arrived at this node, it must be the best\n        // Also, we need to take the h (heuristic) score since we haven't done so yet\n\n        gScoreIsBest = true;\n        neighbour.h = heuristicValue(neighbour, endNode);\n        openList.push(neighbour);\n      } else if (gScore < neighbour.g) {\n        // We have already seen the node, but last time it had a worse g (distance from start)\n        gScoreIsBest = true;\n      }\n\n      if (gScoreIsBest) {\n        // Found an optimal (so far) path to this node.   Store info on how we got here and\n        //  just how good it really is...\n        neighbour.prev = currentNode;\n        neighbour.g = gScore;\n        neighbour.f = neighbour.g + neighbour.h;\n      }\n    }\n  }\n\n  // No result was found -- empty array signifies failure to find path\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {\n  let lowInd = 0;\n  for (let i = 0; i < openList.length; i++) {\n    if (openList[i].f < openList[lowInd].f) {\n      lowInd = i;\n    }\n  }\n  let minFNode = openList[lowInd];\n  openList.splice(lowInd, 1);\n  return minFNode;\n}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n\n  return d1 + d2;\n}\n\nfunction isInList(list, node) {\n  list.forEach((item) => {\n    if (item.row === node.row && item.col === node.col) {\n      return true;\n    }\n  });\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}