{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/containers/Grid.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport DFS from '../Algorithms/DFS';\nimport astar from '../Algorithms/astar';\nimport Node from '../components/Node';\nimport '../styles/main.css';\nimport * as enumerations from '../constants/algorithmEnum';\n\nfunction useKeyPressed(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n  return keyPressed;\n}\n\nfunction withMyHook(Component) {\n  return function WrappedComponent(props) {\n    const hookValue = useKeyPressed('w');\n    const {\n      forwardedRef,\n      ...rest\n    } = props;\n    return /*#__PURE__*/React.createElement(Component, Object.assign({\n      ref: forwardedRef\n    }, rest, {\n      weightKeyPressed: hookValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }));\n  };\n}\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      isDragging: false,\n      dragNode: 'wall'\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 21;\n    this.maxCol = 54;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(row, col) {\n    console.log(`row: ${row}, col: ${col}`);\n    this.props.setGridModified();\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className = 'normal-node';\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col]\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col]\n          });\n        }\n      }\n    } else {\n      if (this.state.startNode.row === row && this.state.startNode.col === col) {\n        return;\n      } else if (this.state.endNode.row === row && this.state.endNode.col === col) {\n        return;\n      } else if (document.getElementById(`node-${row}-${col}`).className === 'wall-node' || document.getElementById(`node-${row}-${col}`).className === 'weight-node') {\n        document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n      } else {\n        if (this.props.weightKeyPressed && !this.props.weightsDisabled) {\n          document.getElementById(`node-${row}-${col}`).className = 'weight-node';\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n        }\n      }\n    }\n\n    let audio = document.getElementById('click_sound').cloneNode(true);\n    audio.volume = 0.1;\n    audio.play();\n  }\n\n  handleNodePressed(row, column) {\n    if (this.props.algorithmRunning) {\n      return;\n    }\n\n    let dragNode = 'wall';\n\n    if (this.state.startNode.row === row && this.state.startNode.col === column) {\n      dragNode = 'start';\n    } else if (this.state.endNode.row === row && this.state.endNode.col === column) {\n      dragNode = 'end';\n    }\n\n    this.setState({\n      isDragging: true,\n      dragNode: dragNode\n    }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({\n        isDragging: false\n      });\n    }\n\n    this.setState({\n      dragNode: 'wall'\n    });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  } // Displays the nodes on the grid with their state values\n\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      onMouseLeave: this.handleNodeReleased,\n      onDragStart: this.handleDragBug,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodePressed: this.handleNodePressed,\n          handleNodeReleased: this.handleNodeReleased,\n          row: rowIndex,\n          col: colIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n  resetGrid() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['wall-node', 'visited-node', 'path-node', 'weight-node', 'weight-node-visited', 'weight-node-path'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        }\n      }\n    }\n\n    document.getElementById(`node-${this.state.startNode.row}-${this.state.startNode.col}`).className = 'start-node';\n    document.getElementById(`node-${this.state.endNode.row}-${this.state.endNode.col}`).className = 'end-node';\n  }\n\n  setAdjacentNodes(node) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({\n        row: row - 1,\n        col: col\n      });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({\n        row: row + 1,\n        col: col\n      });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col - 1\n      });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col + 1\n      });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        startNode: nodeObject\n      });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        endNode: nodeObject\n      });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {}\n      };\n    }\n  } // performs a deep copy of the grid so that the state is not altered directly by accident.\n\n\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach(x => {\n      let currentRow = [];\n      x.forEach(nodes => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n\n        currentRow.push(node);\n      });\n      clone.push(currentRow);\n    });\n    return clone;\n  }\n\n  removeWeights() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['weight-node', 'weight-node-visited', 'weight-node-path'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        }\n      }\n    }\n  }\n\n  clearPaths() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['path-node', 'visited-node'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        } else if (['weight-node-visited', 'weight-node-path'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'weight-node';\n        } else if (['start-node-path'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'start-node';\n        } else if (['end-node-found'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n  }\n\n  generateMaze(mazeType) {\n    this.resetGrid();\n\n    if (mazeType === enumerations.mazes.random) {\n      for (let row = 0; row < this.maxRow; row++) {\n        for (let col = 0; col < this.maxCol; col++) {\n          if (Math.random() * 100 > 65 && !['start-node', 'end-node'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n            setTimeout(() => {\n              document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n            }, 25 * col);\n          }\n        }\n      }\n    } else if (mazeType === enumerations.mazes.maze) {\n      // for (let col = 0; col < this.maxCol; col++) {\n      //   setTimeout(() => {\n      //     document.getElementById(`node-${0}-${col}`).className = 'wall-node';\n      //     document.getElementById(`node-${this.maxRow - 1}-${col}`).className =\n      //       'wall-node';\n      //   }, 25 * col);\n      // }\n      // for (let row = 0; row < this.maxRow; row++) {\n      //   setTimeout(() => {\n      //     document.getElementById(`node-${row}-${0}`).className = 'wall-node';\n      //     document.getElementById(`node-${row}-${this.maxCol - 1}`).className =\n      //       'wall-node';\n      //   }, 25 * row);\n      // }\n      this.recursiveDivision({\n        row: 0,\n        col: 0\n      }, this.maxCol, this.maxRow, 0);\n    }\n  }\n\n  recursiveDivision(origin, width, height, globalCounter) {\n    // Recursion termination\n    if (width < 2 || height < 2) {\n      return;\n    }\n\n    let isHorizontal = Math.floor(Math.random() * 100 % 2); // let isHorizontal = 0;\n\n    let wallIdx = isHorizontal ? Math.floor(Math.random() * (height + origin.row - 2 - (origin.row + 1) + 1)) + (origin.row + 1) : Math.floor(Math.random() * (width + origin.col - 2 - (origin.col + 1) + 1)) + (origin.col + 1); // console.log(origin);\n    // console.log(`wallIdx: ${wallIdx}, height: ${height}`);\n\n    if (isHorizontal) {\n      if (wallIdx >= this.maxRow) {\n        return;\n      }\n\n      globalCounter = this.mazeBuildWall(origin, wallIdx, width, height, isHorizontal, globalCounter);\n      this.recursiveDivision(origin, width, Math.abs(wallIdx - origin.row), globalCounter);\n      this.recursiveDivision({\n        row: wallIdx + 1,\n        col: origin.col\n      }, width, height - wallIdx - 1, globalCounter);\n    } else {\n      if (wallIdx >= this.maxCol) {\n        return;\n      }\n\n      globalCounter = this.mazeBuildWall(origin, wallIdx, width, height, isHorizontal, globalCounter);\n      this.recursiveDivision(origin, Math.abs(wallIdx - origin.col), height, globalCounter);\n      this.recursiveDivision({\n        row: origin.row,\n        col: wallIdx + 1\n      }, width - wallIdx - 1, height, globalCounter);\n    }\n  }\n\n  mazeBuildWall(origin, wallIdx, width, height, isHorizontal, globalCounter) {\n    if (isHorizontal) {\n      console.log(origin);\n      console.log(`wallIdx: ${wallIdx}, width: ${width}`);\n      const wallHole = Math.floor(Math.random() * (width - 1)) + origin.col;\n\n      for (let col = origin.col; col < width + origin.col; col++) {\n        if (!['start-node', 'end-node'].includes(document.getElementById(`node-${wallIdx}-${col}`).className) && col !== wallHole) {\n          setTimeout(() => {\n            document.getElementById(`node-${wallIdx}-${col}`).className = 'wall-node';\n          }, 50 * globalCounter);\n          globalCounter++;\n        }\n      }\n    } else {\n      const wallHole = Math.floor(Math.random() * (height - 1)) + origin.row;\n\n      for (let row = origin.row; row < height + origin.row; row++) {\n        if (!['start-node', 'end-node'].includes(document.getElementById(`node-${row}-${wallIdx}`).className) && row !== wallHole) {\n          setTimeout(() => {\n            document.getElementById(`node-${row}-${wallIdx}`).className = 'wall-node';\n          }, 50 * globalCounter);\n          globalCounter++;\n        }\n      }\n    }\n\n    return globalCounter;\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  runVisualiser(algorithm) {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result;\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (['weight-node-visited', 'weight-node-path'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'weight-node';\n        } else if (['visited-node', 'path-node'].includes(document.getElementById(`node-${row}-${col}`).className)) {\n          document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n        } else if (document.getElementById(`node-${row}-${col}`).className === 'end-node-found') {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n\n    if (algorithm === enumerations.algorithms.dijkstras) {\n      result = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else if (algorithm === enumerations.algorithms.DFS) {\n      result = DFS(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else if (algorithm === enumerations.algorithms.AStar) {\n      result = astar(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    } else {\n      console.log('No algorithm selected');\n    }\n\n    this.visualisePath(result, startNode, endNode);\n  }\n\n  visualisePath(result, startNode, endNode) {\n    let visitedNodes = result.visitedNodes; // visualise visited nodes\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        let visited = visitedNodes[i];\n\n        if (visited === startNode) {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'start-node-visited';\n        } else if (visited === endNode) {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'end-node-visited';\n        } else if (document.getElementById(`node-${visited.row}-${visited.col}`).className === 'weight-node') {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'weight-node-visited';\n        } else {\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'visited-node';\n        }\n\n        let audio = document.getElementById('loading_sound');\n        audio.volume = 0.5;\n        audio.play();\n      }, 25 * i);\n    } // visualise shortest path\n\n\n    setTimeout(() => {\n      if (result.pathFound === false) {\n        document.getElementById('loading_sound').pause();\n        document.getElementById('loading_sound').currentTime = 0;\n        this.props.setAlgorithmRunning(false);\n        return;\n      }\n\n      let prev = endNode.prev;\n      let pathNodes = [];\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        pathNodes.push({\n          row: prev.row,\n          col: prev.col\n        });\n        prev = prev.prev;\n      }\n\n      pathNodes.push({\n        row: startNode.row,\n        col: startNode.col\n      });\n      let i = 1;\n      pathNodes.reverse().forEach(node => {\n        setTimeout((row, col, startNode) => {\n          if (row === startNode.row && col === startNode.col) {\n            document.getElementById(`node-${row}-${col}`).className = 'start-node-path';\n          } else if (document.getElementById(`node-${row}-${col}`).className === 'weight-node-visited') {\n            document.getElementById(`node-${row}-${col}`).className = 'weight-node-path';\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = 'path-node';\n          }\n\n          let audio = document.getElementById('path_sound').cloneNode(true);\n          audio.volume = 0.3;\n          audio.play();\n        }, 40 * i, node.row, node.col, startNode);\n        i++;\n      });\n      setTimeout(() => {\n        document.getElementById(`node-${this.state.endNode.row}-${this.state.endNode.col}`).className = 'end-node-found';\n      }, 40 * i + 1);\n      document.getElementById('loading_sound').pause();\n      document.getElementById('loading_sound').currentTime = 0;\n      this.props.setAlgorithmRunning(false);\n      this.props.setStats(pathNodes.length, visitedNodes.length);\n    }, 25 * visitedNodes.length);\n  }\n\n}\n\nexport default withMyHook(Grid);","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/containers/Grid.jsx"],"names":["React","Component","useState","useEffect","dijkstras","DFS","astar","Node","enumerations","useKeyPressed","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","withMyHook","WrappedComponent","props","hookValue","forwardedRef","rest","Grid","constructor","state","nodes","startNode","endNode","isDragging","dragNode","handleNodeClick","bind","handleNodePressed","handleNodeReleased","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","console","log","setGridModified","copyNodes","nodeType","rowColIndices","oldRow","oldCol","document","getElementById","className","weightKeyPressed","weightsDisabled","audio","cloneNode","volume","play","column","algorithmRunning","handleDragBug","e","preventDefault","render","map","rowIndex","node","colIndex","resetGrid","includes","adjacentNodes","nodeObject","visited","dist","Infinity","prev","clone","forEach","x","JSON","parse","stringify","removeWeights","clearPaths","generateMaze","mazeType","mazes","random","Math","setTimeout","maze","recursiveDivision","origin","width","height","globalCounter","isHorizontal","floor","wallIdx","mazeBuildWall","abs","wallHole","runVisualiser","algorithm","pathFound","result","algorithms","AStar","visualisePath","visitedNodes","i","length","pause","currentTime","setAlgorithmRunning","pathNodes","reverse","setStats"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport DFS from '../Algorithms/DFS';\nimport astar from '../Algorithms/astar';\nimport Node from '../components/Node';\nimport '../styles/main.css';\nimport * as enumerations from '../constants/algorithmEnum';\n\nfunction useKeyPressed(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n\n  return keyPressed;\n}\n\nfunction withMyHook(Component) {\n  return function WrappedComponent(props) {\n    const hookValue = useKeyPressed('w');\n    const { forwardedRef, ...rest } = props;\n    return (\n      <Component ref={forwardedRef} {...rest} weightKeyPressed={hookValue} />\n    );\n  };\n}\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 21;\n    this.maxCol = 54;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    isDragging: false,\n    dragNode: 'wall',\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(row, col) {\n    console.log(`row: ${row}, col: ${col}`);\n    this.props.setGridModified();\n\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className =\n          'normal-node';\n\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col],\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col],\n          });\n        }\n      }\n    } else {\n      if (\n        this.state.startNode.row === row &&\n        this.state.startNode.col === col\n      ) {\n        return;\n      } else if (\n        this.state.endNode.row === row &&\n        this.state.endNode.col === col\n      ) {\n        return;\n      } else if (\n        document.getElementById(`node-${row}-${col}`).className ===\n          'wall-node' ||\n        document.getElementById(`node-${row}-${col}`).className ===\n          'weight-node'\n      ) {\n        document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n      } else {\n        if (this.props.weightKeyPressed && !this.props.weightsDisabled) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n        }\n      }\n    }\n    let audio = document.getElementById('click_sound').cloneNode(true);\n    audio.volume = 0.1;\n    audio.play();\n  }\n\n  handleNodePressed(row, column) {\n    if (this.props.algorithmRunning) {\n      return;\n    }\n\n    let dragNode = 'wall';\n    if (\n      this.state.startNode.row === row &&\n      this.state.startNode.col === column\n    ) {\n      dragNode = 'start';\n    } else if (\n      this.state.endNode.row === row &&\n      this.state.endNode.col === column\n    ) {\n      dragNode = 'end';\n    }\n\n    this.setState({ isDragging: true, dragNode: dragNode }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({ isDragging: false });\n    }\n    this.setState({ dragNode: 'wall' });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  }\n\n  // Displays the nodes on the grid with their state values\n  render() {\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      node={node}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                      row={rowIndex}\n                      col={colIndex}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  resetGrid() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          [\n            'wall-node',\n            'visited-node',\n            'path-node',\n            'weight-node',\n            'weight-node-visited',\n            'weight-node-path',\n          ].includes(document.getElementById(`node-${row}-${col}`).className)\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        }\n      }\n    }\n\n    document.getElementById(\n      `node-${this.state.startNode.row}-${this.state.startNode.col}`\n    ).className = 'start-node';\n\n    document.getElementById(\n      `node-${this.state.endNode.row}-${this.state.endNode.col}`\n    ).className = 'end-node';\n  }\n\n  setAdjacentNodes(node) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({ row: row, col: col + 1 });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n\n      this.setState({ startNode: nodeObject });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n      this.setState({ endNode: nodeObject });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n    }\n  }\n\n  // performs a deep copy of the grid so that the state is not altered directly by accident.\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach((x) => {\n      let currentRow = [];\n      x.forEach((nodes) => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n        currentRow.push(node);\n      });\n\n      clone.push(currentRow);\n    });\n\n    return clone;\n  }\n\n  removeWeights() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['weight-node', 'weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        }\n      }\n    }\n  }\n\n  clearPaths() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['path-node', 'visited-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        } else if (\n          ['weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else if (\n          ['start-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'start-node';\n        } else if (\n          ['end-node-found'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n  }\n\n  generateMaze(mazeType) {\n    this.resetGrid();\n\n    if (mazeType === enumerations.mazes.random) {\n      for (let row = 0; row < this.maxRow; row++) {\n        for (let col = 0; col < this.maxCol; col++) {\n          if (\n            Math.random() * 100 > 65 &&\n            !['start-node', 'end-node'].includes(\n              document.getElementById(`node-${row}-${col}`).className\n            )\n          ) {\n            setTimeout(() => {\n              document.getElementById(`node-${row}-${col}`).className =\n                'wall-node';\n            }, 25 * col);\n          }\n        }\n      }\n    } else if (mazeType === enumerations.mazes.maze) {\n      // for (let col = 0; col < this.maxCol; col++) {\n      //   setTimeout(() => {\n      //     document.getElementById(`node-${0}-${col}`).className = 'wall-node';\n      //     document.getElementById(`node-${this.maxRow - 1}-${col}`).className =\n      //       'wall-node';\n      //   }, 25 * col);\n      // }\n      // for (let row = 0; row < this.maxRow; row++) {\n      //   setTimeout(() => {\n      //     document.getElementById(`node-${row}-${0}`).className = 'wall-node';\n      //     document.getElementById(`node-${row}-${this.maxCol - 1}`).className =\n      //       'wall-node';\n      //   }, 25 * row);\n      // }\n      this.recursiveDivision({ row: 0, col: 0 }, this.maxCol, this.maxRow, 0);\n    }\n  }\n\n  recursiveDivision(origin, width, height, globalCounter) {\n    // Recursion termination\n    if (width < 2 || height < 2) {\n      return;\n    }\n\n    let isHorizontal = Math.floor((Math.random() * 100) % 2);\n    // let isHorizontal = 0;\n\n    let wallIdx = isHorizontal\n      ? Math.floor(\n          Math.random() * (height + origin.row - 2 - (origin.row + 1) + 1)\n        ) +\n        (origin.row + 1)\n      : Math.floor(\n          Math.random() * (width + origin.col - 2 - (origin.col + 1) + 1)\n        ) +\n        (origin.col + 1);\n    // console.log(origin);\n    // console.log(`wallIdx: ${wallIdx}, height: ${height}`);\n\n    if (isHorizontal) {\n      if (wallIdx >= this.maxRow) {\n        return;\n      }\n      globalCounter = this.mazeBuildWall(\n        origin,\n        wallIdx,\n        width,\n        height,\n        isHorizontal,\n        globalCounter\n      );\n      this.recursiveDivision(\n        origin,\n        width,\n        Math.abs(wallIdx - origin.row),\n        globalCounter\n      );\n      this.recursiveDivision(\n        { row: wallIdx + 1, col: origin.col },\n        width,\n        height - wallIdx - 1,\n        globalCounter\n      );\n    } else {\n      if (wallIdx >= this.maxCol) {\n        return;\n      }\n      globalCounter = this.mazeBuildWall(\n        origin,\n        wallIdx,\n        width,\n        height,\n        isHorizontal,\n        globalCounter\n      );\n      this.recursiveDivision(\n        origin,\n        Math.abs(wallIdx - origin.col),\n        height,\n        globalCounter\n      );\n      this.recursiveDivision(\n        { row: origin.row, col: wallIdx + 1 },\n        width - wallIdx - 1,\n        height,\n        globalCounter\n      );\n    }\n  }\n\n  mazeBuildWall(origin, wallIdx, width, height, isHorizontal, globalCounter) {\n    if (isHorizontal) {\n      console.log(origin);\n      console.log(`wallIdx: ${wallIdx}, width: ${width}`);\n      const wallHole = Math.floor(Math.random() * (width - 1)) + origin.col;\n      for (let col = origin.col; col < width + origin.col; col++) {\n        if (\n          !['start-node', 'end-node'].includes(\n            document.getElementById(`node-${wallIdx}-${col}`).className\n          ) &&\n          col !== wallHole\n        ) {\n          setTimeout(() => {\n            document.getElementById(`node-${wallIdx}-${col}`).className =\n              'wall-node';\n          }, 50 * globalCounter);\n          globalCounter++;\n        }\n      }\n    } else {\n      const wallHole = Math.floor(Math.random() * (height - 1)) + origin.row;\n      for (let row = origin.row; row < height + origin.row; row++) {\n        if (\n          !['start-node', 'end-node'].includes(\n            document.getElementById(`node-${row}-${wallIdx}`).className\n          ) &&\n          row !== wallHole\n        ) {\n          setTimeout(() => {\n            document.getElementById(`node-${row}-${wallIdx}`).className =\n              'wall-node';\n          }, 50 * globalCounter);\n          globalCounter++;\n        }\n      }\n    }\n    return globalCounter;\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n\n  runVisualiser(algorithm) {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result;\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else if (\n          ['visited-node', 'path-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'end-node-found'\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n\n    if (algorithm === enumerations.algorithms.dijkstras) {\n      result = dijkstras(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.DFS) {\n      result = DFS(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.AStar) {\n      result = astar(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else {\n      console.log('No algorithm selected');\n    }\n\n    this.visualisePath(result, startNode, endNode);\n  }\n\n  visualisePath(result, startNode, endNode) {\n    let visitedNodes = result.visitedNodes;\n\n    // visualise visited nodes\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        let visited = visitedNodes[i];\n\n        if (visited === startNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'start-node-visited';\n        } else if (visited === endNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'end-node-visited';\n        } else if (\n          document.getElementById(`node-${visited.row}-${visited.col}`)\n            .className === 'weight-node'\n        ) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'weight-node-visited';\n        } else {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'visited-node';\n        }\n\n        let audio = document.getElementById('loading_sound');\n        audio.volume = 0.5;\n        audio.play();\n      }, 25 * i);\n    }\n\n    // visualise shortest path\n    setTimeout(() => {\n      if (result.pathFound === false) {\n        document.getElementById('loading_sound').pause();\n        document.getElementById('loading_sound').currentTime = 0;\n        this.props.setAlgorithmRunning(false);\n        return;\n      }\n\n      let prev = endNode.prev;\n\n      let pathNodes = [];\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        pathNodes.push({ row: prev.row, col: prev.col });\n        prev = prev.prev;\n      }\n\n      pathNodes.push({ row: startNode.row, col: startNode.col });\n\n      let i = 1;\n      pathNodes.reverse().forEach((node) => {\n        setTimeout(\n          (row, col, startNode) => {\n            if (row === startNode.row && col === startNode.col) {\n              document.getElementById(`node-${row}-${col}`).className =\n                'start-node-path';\n            } else if (\n              document.getElementById(`node-${row}-${col}`).className ===\n              'weight-node-visited'\n            ) {\n              document.getElementById(`node-${row}-${col}`).className =\n                'weight-node-path';\n            } else {\n              document.getElementById(`node-${row}-${col}`).className =\n                'path-node';\n            }\n\n            let audio = document.getElementById('path_sound').cloneNode(true);\n            audio.volume = 0.3;\n            audio.play();\n          },\n          40 * i,\n          node.row,\n          node.col,\n          startNode\n        );\n        i++;\n      });\n\n      setTimeout(() => {\n        document.getElementById(\n          `node-${this.state.endNode.row}-${this.state.endNode.col}`\n        ).className = 'end-node-found';\n      }, 40 * i + 1);\n\n      document.getElementById('loading_sound').pause();\n      document.getElementById('loading_sound').currentTime = 0;\n      this.props.setAlgorithmRunning(false);\n      this.props.setStats(pathNodes.length, visitedNodes.length);\n    }, 25 * visitedNodes.length);\n  }\n}\n\nexport default withMyHook(Grid);\n"]},"metadata":{},"sourceType":"module"}