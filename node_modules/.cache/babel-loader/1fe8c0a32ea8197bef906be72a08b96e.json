{"ast":null,"code":"export default function DFS(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let stack = [];\n  stack.push(startNode);\n\n  while (stack.length !== 0) {\n    let node = stack.pop();\n\n    if (Object.keys(s).length === 0) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: true\n      };\n    }\n\n    if (node.visited === false) {\n      node.visited = true;\n\n      for (let i = 0; i < node.adjacentNodes.length; i++) {\n        if (node.adjacentNodes[i].visited === false) {\n          let adjacentRow = node.adjacentNodes[i].row;\n          let adjacentCol = node.adjacentNodes[i].col;\n          stack.push(grid[adjacentRow][adjacentCol]);\n        }\n      }\n    }\n  }\n\n  return {\n    visitedNodes: visitedNodes,\n    pathFound: false\n  };\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/DFS.js"],"names":["DFS","grid","startNode","endNode","numRows","numCols","visitedNodes","stack","push","length","node","pop","Object","keys","s","pathFound","row","col","visited","i","adjacentNodes","adjacentRow","adjacentCol"],"mappings":"AAAA,eAAe,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;AACtE,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAA,EAAAA,KAAK,CAACC,IAAN,CAAWN,SAAX;;AAEA,SAAOK,KAAK,CAACE,MAAN,KAAiB,CAAxB,EAA2B;AACzB,QAAIC,IAAI,GAAGH,KAAK,CAACI,GAAN,EAAX;;AAEA,QAAIC,MAAM,CAACC,IAAP,CAAYC,CAAZ,EAAeL,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO;AAAEH,QAAAA,YAAY,EAAEA,YAAhB;AAA8BS,QAAAA,SAAS,EAAE;AAAzC,OAAP;AACD;;AAEDT,IAAAA,YAAY,CAACE,IAAb,CAAkBE,IAAlB;;AAEA,QAAIA,IAAI,CAACM,GAAL,KAAab,OAAO,CAACa,GAArB,IAA4BN,IAAI,CAACO,GAAL,KAAad,OAAO,CAACc,GAArD,EAA0D;AACxD,aAAO;AAAEX,QAAAA,YAAY,EAAEA,YAAhB;AAA8BS,QAAAA,SAAS,EAAE;AAAzC,OAAP;AACD;;AAED,QAAIL,IAAI,CAACQ,OAAL,KAAiB,KAArB,EAA4B;AAC1BR,MAAAA,IAAI,CAACQ,OAAL,GAAe,IAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACU,aAAL,CAAmBX,MAAvC,EAA+CU,CAAC,EAAhD,EAAoD;AAClD,YAAIT,IAAI,CAACU,aAAL,CAAmBD,CAAnB,EAAsBD,OAAtB,KAAkC,KAAtC,EAA6C;AAC3C,cAAIG,WAAW,GAAGX,IAAI,CAACU,aAAL,CAAmBD,CAAnB,EAAsBH,GAAxC;AACA,cAAIM,WAAW,GAAGZ,IAAI,CAACU,aAAL,CAAmBD,CAAnB,EAAsBF,GAAxC;AAEAV,UAAAA,KAAK,CAACC,IAAN,CAAWP,IAAI,CAACoB,WAAD,CAAJ,CAAkBC,WAAlB,CAAX;AACD;AACF;AACF;AACF;;AACD,SAAO;AAAEhB,IAAAA,YAAY,EAAEA,YAAhB;AAA8BS,IAAAA,SAAS,EAAE;AAAzC,GAAP;AACD","sourcesContent":["export default function DFS(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let stack = [];\n\n  stack.push(startNode);\n\n  while (stack.length !== 0) {\n    let node = stack.pop();\n\n    if (Object.keys(s).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    if (node.visited === false) {\n      node.visited = true;\n\n      for (let i = 0; i < node.adjacentNodes.length; i++) {\n        if (node.adjacentNodes[i].visited === false) {\n          let adjacentRow = node.adjacentNodes[i].row;\n          let adjacentCol = node.adjacentNodes[i].col;\n\n          stack.push(grid[adjacentRow][adjacentCol]);\n        }\n      }\n    }\n  }\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n"]},"metadata":{},"sourceType":"module"}