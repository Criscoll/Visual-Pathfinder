{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/containers/Stats.jsx\";\nimport React, { useState, useEffect } from 'react';\nexport default function Stats(props) {\n  const [currStats, setCurrStats] = useState(null);\n  const [prevStats, setPrevStats] = useState(null);\n  const [tempStats, setTempStats] = useState(0);\n  const currStatsStable = currStats;\n  useEffect(() => {\n    if (props.pathLength && props.nodesChecked) {\n      setCurrStats({\n        algorithmUsed: props.algorithmUsed,\n        pathLength: props.pathLength,\n        nodesChecked: props.nodesChecked\n      });\n    } else {\n      if (currStatsStable && !props.clearStats) {\n        let algorithmUsed = currStats.algorithmUsed;\n        let pathLength = currStats.pathLength;\n        let nodesChecked = currStats.nodesChecked;\n        setTempStats({\n          algorithmUsed: algorithmUsed,\n          pathLength: pathLength,\n          nodesChecked: nodesChecked\n        });\n        setCurrStats(null);\n      }\n    }\n\n    if (props.clearStats) {\n      setCurrStats(null);\n      setPrevStats(null);\n    }\n  }, [props]);\n  useEffect(() => {\n    setPrevStats(tempStats);\n  }, [tempStats]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, currStats ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Current Run: \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Algorithm used: \", currStats.algorithmUsed), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Path Length: \", currStats.pathLength), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Nodes Visited: \", currStats.nodesChecked - 1)) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"prev-stats-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, prevStats ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Previous Run: \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Algorithm used: \", prevStats.algorithmUsed), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Path Length: \", prevStats.pathLength), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Nodes Visited: \", prevStats.nodesChecked - 1)) : null));\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/containers/Stats.jsx"],"names":["React","useState","useEffect","Stats","props","currStats","setCurrStats","prevStats","setPrevStats","tempStats","setTempStats","currStatsStable","pathLength","nodesChecked","algorithmUsed","clearStats"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function Stats(props) {\n  const [currStats, setCurrStats] = useState(null);\n  const [prevStats, setPrevStats] = useState(null);\n  const [tempStats, setTempStats] = useState(0);\n\n  const currStatsStable = currStats;\n\n  useEffect(() => {\n    if (props.pathLength && props.nodesChecked) {\n      setCurrStats({\n        algorithmUsed: props.algorithmUsed,\n        pathLength: props.pathLength,\n        nodesChecked: props.nodesChecked,\n      });\n    } else {\n      if (currStatsStable && !props.clearStats) {\n        let algorithmUsed = currStats.algorithmUsed;\n        let pathLength = currStats.pathLength;\n        let nodesChecked = currStats.nodesChecked;\n\n        setTempStats({\n          algorithmUsed: algorithmUsed,\n          pathLength: pathLength,\n          nodesChecked: nodesChecked,\n        });\n\n        setCurrStats(null);\n      }\n    }\n    if (props.clearStats) {\n      setCurrStats(null);\n      setPrevStats(null);\n    }\n  }, [props]);\n\n  useEffect(() => {\n    setPrevStats(tempStats);\n  }, [tempStats]);\n\n  return (\n    <React.Fragment>\n      <div className=\"stats-container\">\n        {currStats ? (\n          <React.Fragment>\n            <p className=\"label\">Current Run: </p>\n            <p>Algorithm used: {currStats.algorithmUsed}</p>\n            <p>Path Length: {currStats.pathLength}</p>\n            <p>Nodes Visited: {currStats.nodesChecked - 1}</p>\n          </React.Fragment>\n        ) : null}\n      </div>\n\n      <div className=\"prev-stats-container\">\n        {prevStats ? (\n          <React.Fragment>\n            <p className=\"label\">Previous Run: </p>\n            <p>Algorithm used: {prevStats.algorithmUsed}</p>\n            <p>Path Length: {prevStats.pathLength}</p>\n            <p>Nodes Visited: {prevStats.nodesChecked - 1}</p>\n          </React.Fragment>\n        ) : null}\n      </div>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}