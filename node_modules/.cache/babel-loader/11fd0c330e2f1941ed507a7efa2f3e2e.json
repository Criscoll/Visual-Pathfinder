{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/src/App.js\";\nimport React, { Component } from 'react';\nimport Grid from './containers/Grid';\nimport Toolbar from './containers/Toolbar';\nimport Stats from './containers/Stats';\nimport Info from './containers/Info';\nimport TutorialModal from './containers/TutorialModal';\nimport * as enumerations from './constants/enumerations';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleGoClick = this.handleGoClick.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.setAlgorithmRunning = this.setAlgorithmRunning.bind(this);\n    this.setStats = this.setStats.bind(this);\n    this.setGridModified = this.setGridModified.bind(this);\n    this.generateMaze = this.generateMaze.bind(this);\n    this.gridRef = React.createRef(); // used to handle reseting the grid.\n\n    this.state = {\n      algorithm: enumerations.algorithms.none,\n      algorithmRunning: false,\n      algorithmName: null,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: false,\n      weightsDisabled: false,\n      tutorialModalOpen: false\n    };\n  }\n\n  handleResetClick() {\n    this.gridRef.current.resetGrid();\n    this.setState({\n      algorithmRunning: false,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: true\n    });\n  }\n\n  handleGoClick() {\n    this.gridRef.current.runVisualiser(this.state.algorithm);\n    this.setState({\n      algorithmRunning: true,\n      algorithmUsed: this.state.algorithmName,\n      pathLength: null,\n      nodesChecked: null\n    });\n  }\n\n  setAlgorithmRunning(state) {\n    this.setState({\n      algorithmRunning: state\n    });\n  }\n\n  setAlgorithm(algorithm, algorithmName) {\n    this.setState({\n      algorithm: algorithm,\n      algorithmName: algorithmName\n    });\n\n    if (this.state.algorithm !== enumerations.algorithms.none) {\n      this.gridRef.current.clearPaths();\n    }\n\n    if ([enumerations.algorithms.DFS, enumerations.algorithms.BFS].includes(algorithm)) {\n      this.setState({\n        weightsDisabled: true\n      });\n      const weightsRemoved = this.gridRef.current.removeWeights();\n\n      if (weightsRemoved) {\n        this.setGridModified();\n      }\n    } else {\n      this.setState({\n        weightsDisabled: false\n      });\n    }\n  }\n\n  setStats(pathLength, nodesChecked) {\n    this.setState({\n      pathLength: pathLength,\n      nodesChecked: nodesChecked,\n      clearStats: false\n    });\n  }\n\n  setGridModified() {\n    if (!this.state.clearStats) {\n      this.setState({\n        clearStats: true\n      });\n    }\n  }\n\n  generateMaze(mazeType) {\n    this.setGridModified();\n    this.gridRef.current.generateMaze(mazeType);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      handleResetClick: this.handleResetClick,\n      handleGoClick: this.handleGoClick,\n      algorithm: this.state.algorithm,\n      setAlgorithm: this.setAlgorithm,\n      algorithmRunning: this.state.algorithmRunning,\n      generateMaze: this.generateMaze,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Stats, {\n      algorithmUsed: this.state.algorithmUsed,\n      pathLength: this.state.pathLength,\n      nodesChecked: this.state.nodesChecked,\n      clearStats: this.state.clearStats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Info, {\n      selectedAlgorithm: this.state.algorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      forwardedRef: this.gridRef,\n      setAlgorithmRunning: this.setAlgorithmRunning,\n      setStats: this.setStats,\n      setGridModified: this.setGridModified,\n      algorithmRunning: this.state.algorithmRunning,\n      weightsDisabled: this.state.weightsDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TutorialModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/App.js"],"names":["React","Component","Grid","Toolbar","Stats","Info","TutorialModal","enumerations","Main","constructor","props","handleResetClick","bind","handleGoClick","setAlgorithm","setAlgorithmRunning","setStats","setGridModified","generateMaze","gridRef","createRef","state","algorithm","algorithms","none","algorithmRunning","algorithmName","algorithmUsed","pathLength","nodesChecked","clearStats","weightsDisabled","tutorialModalOpen","current","resetGrid","setState","runVisualiser","clearPaths","DFS","BFS","includes","weightsRemoved","removeWeights","mazeType","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Grid from './containers/Grid';\nimport Toolbar from './containers/Toolbar';\nimport Stats from './containers/Stats';\nimport Info from './containers/Info';\nimport TutorialModal from './containers/TutorialModal';\nimport * as enumerations from './constants/enumerations';\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleGoClick = this.handleGoClick.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.setAlgorithmRunning = this.setAlgorithmRunning.bind(this);\n    this.setStats = this.setStats.bind(this);\n    this.setGridModified = this.setGridModified.bind(this);\n    this.generateMaze = this.generateMaze.bind(this);\n\n    this.gridRef = React.createRef(); // used to handle reseting the grid.\n\n    this.state = {\n      algorithm: enumerations.algorithms.none,\n      algorithmRunning: false,\n      algorithmName: null,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: false,\n      weightsDisabled: false,\n      tutorialModalOpen: false,\n    };\n  }\n\n  handleResetClick() {\n    this.gridRef.current.resetGrid();\n    this.setState({\n      algorithmRunning: false,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: true,\n    });\n  }\n\n  handleGoClick() {\n    this.gridRef.current.runVisualiser(this.state.algorithm);\n    this.setState({\n      algorithmRunning: true,\n      algorithmUsed: this.state.algorithmName,\n      pathLength: null,\n      nodesChecked: null,\n    });\n  }\n\n  setAlgorithmRunning(state) {\n    this.setState({ algorithmRunning: state });\n  }\n\n  setAlgorithm(algorithm, algorithmName) {\n    this.setState({ algorithm: algorithm, algorithmName: algorithmName });\n\n    if (this.state.algorithm !== enumerations.algorithms.none) {\n      this.gridRef.current.clearPaths();\n    }\n    if (\n      [enumerations.algorithms.DFS, enumerations.algorithms.BFS].includes(\n        algorithm\n      )\n    ) {\n      this.setState({ weightsDisabled: true });\n      const weightsRemoved = this.gridRef.current.removeWeights();\n      if (weightsRemoved) {\n        this.setGridModified();\n      }\n    } else {\n      this.setState({ weightsDisabled: false });\n    }\n  }\n\n  setStats(pathLength, nodesChecked) {\n    this.setState({\n      pathLength: pathLength,\n      nodesChecked: nodesChecked,\n      clearStats: false,\n    });\n  }\n\n  setGridModified() {\n    if (!this.state.clearStats) {\n      this.setState({ clearStats: true });\n    }\n  }\n\n  generateMaze(mazeType) {\n    this.setGridModified();\n    this.gridRef.current.generateMaze(mazeType);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Toolbar\n          handleResetClick={this.handleResetClick}\n          handleGoClick={this.handleGoClick}\n          algorithm={this.state.algorithm}\n          setAlgorithm={this.setAlgorithm}\n          algorithmRunning={this.state.algorithmRunning}\n          generateMaze={this.generateMaze}\n        />\n        <Stats\n          algorithmUsed={this.state.algorithmUsed}\n          pathLength={this.state.pathLength}\n          nodesChecked={this.state.nodesChecked}\n          clearStats={this.state.clearStats}\n        />\n        <Info selectedAlgorithm={this.state.algorithm} />\n        <Grid\n          forwardedRef={this.gridRef}\n          setAlgorithmRunning={this.setAlgorithmRunning}\n          setStats={this.setStats}\n          setGridModified={this.setGridModified}\n          algorithmRunning={this.state.algorithmRunning}\n          weightsDisabled={this.state.weightsDisabled}\n        />\n        <TutorialModal />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}