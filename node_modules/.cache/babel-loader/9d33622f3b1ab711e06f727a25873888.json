{"ast":null,"code":"export default function dikstrasAlgorithm(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let queue = [];\n  startNode.dist = 0;\n  queue.push(startNode);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (document.getElementById(`node-${i}-${j}`).className !== 'wall-node') {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: false\n      };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return {\n        visitedNodes: visitedNodes,\n        pathFound: true\n      };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (document.getElementById(`node-${s.adjacentNodes[i].row}-${s.adjacentNodes[i].col}`).className !== 'wall-node') {\n        let adjacentRow = s.adjacentNodes[i].row;\n        let adjacentCol = s.adjacentNodes[i].col;\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n\n        if (alt < grid[adjacentRow][adjacentCol].dist) {\n          grid[adjacentRow][adjacentCol].dist = alt;\n          grid[adjacentRow][adjacentCol].prev = s;\n        }\n      }\n    }\n  }\n\n  return {\n    visitedNodes: visitedNodes,\n    pathFound: false\n  };\n} // change this when weights are implemented\n\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/Algorithms/dijkstras.js"],"names":["dikstrasAlgorithm","grid","startNode","endNode","numRows","numCols","visitedNodes","queue","dist","push","i","j","document","getElementById","className","length","s","findMinimum","Object","keys","pathFound","row","col","adjacentNodes","adjacentRow","adjacentCol","alt","distance","prev","u","v","min","Infinity","minIdx","minItem","splice"],"mappings":"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","sourcesContent":["export default function dikstrasAlgorithm(\n  grid,\n  startNode,\n  endNode,\n  numRows,\n  numCols\n) {\n  let visitedNodes = [];\n  let queue = [];\n\n  startNode.dist = 0;\n  queue.push(startNode);\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (document.getElementById(`node-${i}-${j}`).className !== 'wall-node') {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (\n        document.getElementById(\n          `node-${s.adjacentNodes[i].row}-${s.adjacentNodes[i].col}`\n        ).className !== 'wall-node'\n      ) {\n        let adjacentRow = s.adjacentNodes[i].row;\n        let adjacentCol = s.adjacentNodes[i].col;\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n\n        if (alt < grid[adjacentRow][adjacentCol].dist) {\n          grid[adjacentRow][adjacentCol].dist = alt;\n          grid[adjacentRow][adjacentCol].prev = s;\n        }\n      }\n    }\n  }\n\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\n// change this when weights are implemented\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}\n"]},"metadata":{},"sourceType":"module"}