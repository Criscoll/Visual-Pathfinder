{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documents/projects/visual_pathfinder/my-app/src/containers/Grid.jsx\";\nimport React, { Component } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport Node from '../components/Node';\nimport Results from '../components/Results';\nimport '../styles/main.css';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      startNode: {},\n      endNode: {},\n      isDragging: false,\n      dragNode: 'wall',\n      pathStatus: ''\n    };\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 50;\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  handleNodeClick(row, col) {\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className = 'normal-node';\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col]\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col]\n          });\n        }\n      }\n    } else {\n      if (this.state.startNode.row === row && this.state.startNode.col === col) {\n        return;\n      } else if (this.state.endNode.row === row && this.state.endNode.col === col) {\n        return;\n      }\n\n      document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n    }\n  }\n\n  handleNodePressed(row, column) {\n    let dragNode = 'wall';\n\n    if (this.state.startNode.row === row && this.state.startNode.col === column) {\n      dragNode = 'start';\n    } else if (this.state.endNode.row === row && this.state.endNode.col === column) {\n      dragNode = 'end';\n    }\n\n    this.setState({\n      isDragging: true,\n      dragNode: dragNode\n    }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({\n        isDragging: false\n      });\n    }\n\n    this.setState({\n      dragNode: 'wall'\n    });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  } // Displays the nodes on the grid with their state values\n\n\n  render() {\n    let {\n      nodes\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      onMouseLeave: this.handleNodeReleased,\n      onDragStart: this.handleDragBug,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, nodes.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }\n      }, row.map((node, colIndex) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          node: node,\n          isDragging: this.state.isDragging,\n          handleNodeClick: this.handleNodeClick,\n          handleNodePressed: this.handleNodePressed,\n          handleNodeReleased: this.handleNodeReleased,\n          row: rowIndex,\n          col: colIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(Results, {\n      pathStatus: this.state.pathStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  resetGrid() {\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {}\n        };\n      }\n    } // !!! Maybe set this just before the algorithm runs in case you set walls etc\n\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: ''\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({\n        row: row - 1,\n        col: col\n      });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({\n        row: row + 1,\n        col: col\n      });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col - 1\n      });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({\n        row: row,\n        col: col + 1\n      });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        startNode: nodeObject\n      });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {}\n      };\n      this.setState({\n        endNode: nodeObject\n      });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {}\n      };\n    }\n  } // performs a deep copy of the grid so that the state is not altered directly by accident.\n\n\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach(x => {\n      let currentRow = [];\n      x.forEach(nodes => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n\n        currentRow.push(node);\n      });\n      clone.push(currentRow);\n    });\n    return clone;\n  } // ================= PATHFINDING ALGORITHMS =====================\n\n\n  visualiseDijkstras() {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result = dijkstras(nodes, startNode, endNode, this.maxRow, this.maxCol, pathFound);\n    this.setState({\n      pathStatus: 'searching'\n    });\n    let visitedNodes = result.visitedNodes; // Below is the chunk of code that deals with incrementally updating the node colour to show which nodes the algorithm\n    // took in search of the goal node. To get this to work I utilise how the setTimeout function works with respect to react.\n    // In react, setState is normally run asynchronously with multiple setState calls typically batched together into one single\n    // setState call update for performance reasons. However, if setState is called within setTimeout, these calls now run synchronously.\n    // The reason for this is due to how setTimeout() works, it doesn't guarantee that the callback function will run after whatever delay\n    // you give it, it is only guaranteed to QUEUE UP the callback in a 'message queue' after that delay period. This message queue is a queue\n    // of callback functions which are run AFTER ALL OTHER CODE IS RUN and which are run one after the other in the order in which they\n    // were queued. I set a delay of 0 here because all I need to do is get this chunk of code into that queue and it will be run\n    // synchronously, the delay just controls when the code is sent to that queue, all other code below must run first regardless so it\n    // doesn't really matter.\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          document.getElementById(`node-${visited.row}-${visited.col}`).className = 'visited-node';\n        }, 25 * i);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({\n          pathStatus: 'none'\n        });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        document.getElementById(`node-${prev.row}-${prev.col}`).className = 'path-node';\n        prev = prev.prev;\n      }\n\n      this.setState({\n        pathStatus: 'found'\n      });\n    }, 25 * visitedNodes.length);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/containers/Grid.jsx"],"names":["React","Component","dijkstras","Node","Results","Grid","constructor","props","state","nodes","startNode","endNode","isDragging","dragNode","pathStatus","handleNodeClick","bind","handleNodePressed","handleNodeReleased","maxRow","maxCol","componentDidMount","row","currentRow","col","currentNode","createNode","push","setAdjacentNodes","setState","copyNodes","nodeType","rowColIndices","oldRow","oldCol","document","getElementById","className","column","handleDragBug","e","preventDefault","console","log","render","map","rowIndex","node","colIndex","resetGrid","i","length","j","adjacentNodes","isVisited","dist","Infinity","prev","startNodePreviouslySet","endNodePreviouslySet","nodeObject","clone","forEach","x","JSON","parse","stringify","visualiseDijkstras","pathFound","result","visitedNodes","setTimeout","visited"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,oBAAP;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SASnBC,KATmB,GASX;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,EAFL;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,UAAU,EAAE,KAJN;AAKNC,MAAAA,QAAQ,EAAE,MALJ;AAMNC,MAAAA,UAAU,EAAE;AANN,KATW;AAEjB,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAWDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIZ,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIa,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,UAAIC,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,YAAIC,WAAW,GAAG,KAAKC,UAAL,CAAgBJ,GAAhB,EAAqBE,GAArB,CAAlB;AACAD,QAAAA,UAAU,CAACI,IAAX,CAAgBF,WAAhB;AACD;;AACDhB,MAAAA,KAAK,CAACkB,IAAN,CAAWJ,UAAX;AACD,KATiB,CAWlB;;;AACA,SAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,aAAKI,gBAAL,CAAsBnB,KAAK,CAACa,GAAD,CAAL,CAAWE,GAAX,CAAtB,EAAuCf,KAAvC;AACD;AACF;;AACD,SAAKoB,QAAL,CAAc;AAAEpB,MAAAA;AAAF,KAAd;AACD;;AAEDM,EAAAA,eAAe,CAACO,GAAD,EAAME,GAAN,EAAW;AACxB,QAAIf,KAAK,GAAG,KAAKqB,SAAL,EAAZ;AACA,QAAIC,QAAQ,GAAG,WAAf;;AAEA,QAAI,KAAKvB,KAAL,CAAWK,QAAX,KAAwB,OAA5B,EAAqC;AACnCkB,MAAAA,QAAQ,GAAG,YAAX;AACD,KAFD,MAEO,IAAI,KAAKvB,KAAL,CAAWK,QAAX,KAAwB,KAA5B,EAAmC;AACxCkB,MAAAA,QAAQ,GAAG,UAAX;AACD;;AAED,QAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,UAAIC,aAAa,GAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAApB;AACA,UAAIC,MAAM,GAAG,CAAC,CAAd;AACA,UAAIC,MAAM,GAAG,CAAC,CAAd;;AAEA,UAAIH,QAAQ,KAAK,YAAjB,EAA+B;AAC7BC,QAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,KAAKxB,KAAL,CAAWE,SAAX,CAAqBY,GAAxC;AACAU,QAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,KAAKxB,KAAL,CAAWE,SAAX,CAAqBc,GAAxC;AACD,OAHD,MAGO;AACLQ,QAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,KAAKxB,KAAL,CAAWG,OAAX,CAAmBW,GAAtC;AACAU,QAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,KAAKxB,KAAL,CAAWG,OAAX,CAAmBa,GAAtC;AACD;;AAEDS,MAAAA,MAAM,GAAGD,aAAa,CAAC,CAAD,CAAtB;AACAE,MAAAA,MAAM,GAAGF,aAAa,CAAC,CAAD,CAAtB;;AAEA,UAAIC,MAAM,KAAK,CAAC,CAAZ,IAAiBC,MAAM,KAAK,CAAC,CAAjC,EAAoC;AAClCC,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,MAAO,IAAGC,MAAO,EAAjD,EAAoDG,SAApD,GACE,aADF;AAGAF,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOd,GAAI,IAAGE,GAAI,EAA3C,EAA8Ca,SAA9C,GAA0DN,QAA1D;;AAEA,YAAIA,QAAQ,KAAK,YAAjB,EAA+B;AAC7B,eAAKF,QAAL,CAAc;AACZnB,YAAAA,SAAS,EAAED,KAAK,CAACa,GAAD,CAAL,CAAWE,GAAX;AADC,WAAd;AAGD,SAJD,MAIO;AACL,eAAKK,QAAL,CAAc;AACZlB,YAAAA,OAAO,EAAEF,KAAK,CAACa,GAAD,CAAL,CAAWE,GAAX;AADG,WAAd;AAGD;AACF;AACF,KAhCD,MAgCO;AACL,UACE,KAAKhB,KAAL,CAAWE,SAAX,CAAqBY,GAArB,KAA6BA,GAA7B,IACA,KAAKd,KAAL,CAAWE,SAAX,CAAqBc,GAArB,KAA6BA,GAF/B,EAGE;AACA;AACD,OALD,MAKO,IACL,KAAKhB,KAAL,CAAWG,OAAX,CAAmBW,GAAnB,KAA2BA,GAA3B,IACA,KAAKd,KAAL,CAAWG,OAAX,CAAmBa,GAAnB,KAA2BA,GAFtB,EAGL;AACA;AACD;;AACDW,MAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOd,GAAI,IAAGE,GAAI,EAA3C,EAA8Ca,SAA9C,GAA0D,WAA1D;AACD;AACF;;AAEDpB,EAAAA,iBAAiB,CAACK,GAAD,EAAMgB,MAAN,EAAc;AAC7B,QAAIzB,QAAQ,GAAG,MAAf;;AACA,QACE,KAAKL,KAAL,CAAWE,SAAX,CAAqBY,GAArB,KAA6BA,GAA7B,IACA,KAAKd,KAAL,CAAWE,SAAX,CAAqBc,GAArB,KAA6Bc,MAF/B,EAGE;AACAzB,MAAAA,QAAQ,GAAG,OAAX;AACD,KALD,MAKO,IACL,KAAKL,KAAL,CAAWG,OAAX,CAAmBW,GAAnB,KAA2BA,GAA3B,IACA,KAAKd,KAAL,CAAWG,OAAX,CAAmBa,GAAnB,KAA2Bc,MAFtB,EAGL;AACAzB,MAAAA,QAAQ,GAAG,KAAX;AACD;;AAED,SAAKgB,QAAL,CAAc;AAAEjB,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,QAAQ,EAAEA;AAA9B,KAAd,EAAwD,MAAM;AAC5D,WAAKE,eAAL,CAAqBO,GAArB,EAA0BgB,MAA1B;AACD,KAFD;AAGD;;AAEDpB,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKV,KAAL,CAAWI,UAAf,EAA2B;AACzB,WAAKiB,QAAL,CAAc;AAAEjB,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD;;AACD,SAAKiB,QAAL,CAAc;AAAEhB,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACD;;AAED0B,EAAAA,aAAa,CAACC,CAAD,EAAI;AACfA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GA9H0B,CAgI3B;;;AACAC,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEnC,MAAAA;AAAF,QAAY,KAAKD,KAArB;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,YAAY,EAAE,KAAKU,kBAFrB;AAGE,MAAA,WAAW,EAAE,KAAKqB,aAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG9B,KAAK,CAACoC,GAAN,CAAU,CAACvB,GAAD,EAAMwB,QAAN,KAAmB;AAC5B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGxB,GAAG,CAACuB,GAAJ,CAAQ,CAACE,IAAD,EAAOC,QAAP,KAAoB;AAC3B,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,QADP;AAEE,UAAA,IAAI,EAAED,IAFR;AAGE,UAAA,UAAU,EAAE,KAAKvC,KAAL,CAAWI,UAHzB;AAIE,UAAA,eAAe,EAAE,KAAKG,eAJxB;AAKE,UAAA,iBAAiB,EAAE,KAAKE,iBAL1B;AAME,UAAA,kBAAkB,EAAE,KAAKC,kBAN3B;AAOE,UAAA,GAAG,EAAE4B,QAPP;AAQE,UAAA,GAAG,EAAEE,QARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,OAbA,CADH,CADF;AAkBD,KAnBA,CALH,CADF,eA2BE,oBAAC,OAAD;AAAS,MAAA,UAAU,EAAE,KAAKxC,KAAL,CAAWM,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,CADF;AA+BD;;AAEDmC,EAAAA,SAAS,GAAG;AACV,QAAIxC,KAAK,GAAG,KAAKqB,SAAL,EAAZ;;AAEA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,KAAK,CAAC0C,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,KAAK,CAACyC,CAAD,CAAL,CAASC,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC3C,QAAAA,KAAK,CAACyC,CAAD,CAAL,CAASE,CAAT,IAAc;AACZ9B,UAAAA,GAAG,EAAE4B,CADO;AAEZ1B,UAAAA,GAAG,EAAE4B,CAFO;AAGZC,UAAAA,aAAa,EAAE,EAHH;AAIZC,UAAAA,SAAS,EAAE,KAJC;AAKZC,UAAAA,IAAI,EAAEC,QALM;AAMZC,UAAAA,IAAI,EAAE;AANM,SAAd;AAQD;AACF,KAdS,CAgBV;;;AACA,SAAK,IAAInC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,MAA7B,EAAqCG,GAAG,EAAxC,EAA4C;AAC1C,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,MAA7B,EAAqCI,GAAG,EAAxC,EAA4C;AAC1C,aAAKI,gBAAL,CAAsBnB,KAAK,CAACa,GAAD,CAAL,CAAWE,GAAX,CAAtB,EAAuCf,KAAvC;AACD;AACF;;AAED,SAAKoB,QAAL,CAAc;AACZpB,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAE,EAFC;AAGZC,MAAAA,OAAO,EAAE,EAHG;AAIZ+C,MAAAA,sBAAsB,EAAE,KAJZ;AAKZC,MAAAA,oBAAoB,EAAE,KALV;AAMZ/C,MAAAA,UAAU,EAAE,KANA;AAOZE,MAAAA,UAAU,EAAE;AAPA,KAAd;AASD;;AAEDc,EAAAA,gBAAgB,CAACmB,IAAD,EAAOtC,KAAP,EAAc;AAC5B,QAAIa,GAAG,GAAGyB,IAAI,CAACzB,GAAf;AACA,QAAIE,GAAG,GAAGuB,IAAI,CAACvB,GAAf;;AAEA,QAAIF,GAAG,KAAK,CAAZ,EAAe;AACbyB,MAAAA,IAAI,CAACM,aAAL,CAAmB1B,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBE,QAAAA,GAAG,EAAEA;AAArB,OAAxB;AACD;;AAED,QAAIF,GAAG,KAAK,KAAKH,MAAL,GAAc,CAA1B,EAA6B;AAC3B4B,MAAAA,IAAI,CAACM,aAAL,CAAmB1B,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBE,QAAAA,GAAG,EAAEA;AAArB,OAAxB;AACD;;AAED,QAAIA,GAAG,KAAK,CAAZ,EAAe;AACbuB,MAAAA,IAAI,CAACM,aAAL,CAAmB1B,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAP;AAAYE,QAAAA,GAAG,EAAEA,GAAG,GAAG;AAAvB,OAAxB;AACD;;AAED,QAAIA,GAAG,KAAK,KAAKJ,MAAL,GAAc,CAA1B,EAA6B;AAC3B2B,MAAAA,IAAI,CAACM,aAAL,CAAmB1B,IAAnB,CAAwB;AAAEL,QAAAA,GAAG,EAAEA,GAAP;AAAYE,QAAAA,GAAG,EAAEA,GAAG,GAAG;AAAvB,OAAxB;AACD;AACF;;AAEDE,EAAAA,UAAU,CAACJ,GAAD,EAAME,GAAN,EAAW;AACnB,QAAIF,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,EAAzB,EAA6B;AAC3B,YAAMoC,UAAU,GAAG;AACjBtC,QAAAA,GAAG,EAAEA,GADY;AAEjBE,QAAAA,GAAG,EAAEA,GAFY;AAGjBO,QAAAA,QAAQ,EAAE,YAHO;AAIjBsB,QAAAA,aAAa,EAAE,EAJE;AAKjBC,QAAAA,SAAS,EAAE,KALM;AAMjBC,QAAAA,IAAI,EAAEC,QANW;AAOjBC,QAAAA,IAAI,EAAE;AAPW,OAAnB;AAUA,WAAK5B,QAAL,CAAc;AAAEnB,QAAAA,SAAS,EAAEkD;AAAb,OAAd;AACA,aAAOA,UAAP;AACD,KAbD,MAaO,IAAItC,GAAG,KAAK,CAAR,IAAaE,GAAG,KAAK,EAAzB,EAA6B;AAClC,YAAMoC,UAAU,GAAG;AACjBtC,QAAAA,GAAG,EAAEA,GADY;AAEjBE,QAAAA,GAAG,EAAEA,GAFY;AAGjBO,QAAAA,QAAQ,EAAE,UAHO;AAIjBsB,QAAAA,aAAa,EAAE,EAJE;AAKjBC,QAAAA,SAAS,EAAE,KALM;AAMjBC,QAAAA,IAAI,EAAEC,QANW;AAOjBC,QAAAA,IAAI,EAAE;AAPW,OAAnB;AASA,WAAK5B,QAAL,CAAc;AAAElB,QAAAA,OAAO,EAAEiD;AAAX,OAAd;AACA,aAAOA,UAAP;AACD,KAZM,MAYA;AACL,aAAO;AACLtC,QAAAA,GAAG,EAAEA,GADA;AAELE,QAAAA,GAAG,EAAEA,GAFA;AAGLO,QAAAA,QAAQ,EAAE,aAHL;AAILsB,QAAAA,aAAa,EAAE,EAJV;AAKLC,QAAAA,SAAS,EAAE,KALN;AAMLC,QAAAA,IAAI,EAAEC,QAND;AAOLC,QAAAA,IAAI,EAAE;AAPD,OAAP;AASD;AACF,GAhQ0B,CAkQ3B;;;AACA3B,EAAAA,SAAS,GAAG;AACV,QAAI+B,KAAK,GAAG,EAAZ;AACA,SAAKrD,KAAL,CAAWC,KAAX,CAAiBqD,OAAjB,CAA0BC,CAAD,IAAO;AAC9B,UAAIxC,UAAU,GAAG,EAAjB;AACAwC,MAAAA,CAAC,CAACD,OAAF,CAAWrD,KAAD,IAAW;AACnB,YAAIsC,IAAI,GAAGiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezD,KAAf,CAAX,CAAX;AACAsC,QAAAA,IAAI,CAACQ,IAAL,GAAYC,QAAZ,CAFmB,CAEG;;AACtBjC,QAAAA,UAAU,CAACI,IAAX,CAAgBoB,IAAhB;AACD,OAJD;AAMAc,MAAAA,KAAK,CAAClC,IAAN,CAAWJ,UAAX;AACD,KATD;AAWA,WAAOsC,KAAP;AACD,GAjR0B,CAmR3B;;;AACAM,EAAAA,kBAAkB,GAAG;AACnB,QAAI1D,KAAK,GAAG,KAAKqB,SAAL,EAAZ;AACA,QAAIpB,SAAS,GAAGD,KAAK,CAAC,KAAKD,KAAL,CAAWE,SAAX,CAAqBY,GAAtB,CAAL,CAAgC,KAAKd,KAAL,CAAWE,SAAX,CAAqBc,GAArD,CAAhB;AACA,QAAIb,OAAO,GAAGF,KAAK,CAAC,KAAKD,KAAL,CAAWG,OAAX,CAAmBW,GAApB,CAAL,CAA8B,KAAKd,KAAL,CAAWG,OAAX,CAAmBa,GAAjD,CAAd;AACA,QAAI4C,SAAS,GAAG,IAAhB;AAEA,QAAIC,MAAM,GAAGnE,SAAS,CACpBO,KADoB,EAEpBC,SAFoB,EAGpBC,OAHoB,EAIpB,KAAKQ,MAJe,EAKpB,KAAKC,MALe,EAMpBgD,SANoB,CAAtB;AASA,SAAKvC,QAAL,CAAc;AAAEf,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,QAAIwD,YAAY,GAAGD,MAAM,CAACC,YAA1B,CAhBmB,CAkBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,YAAY,CAACnB,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,UAAIoB,YAAY,CAACpB,CAAD,CAAZ,KAAoBxC,SAApB,IAAiC4D,YAAY,CAACpB,CAAD,CAAZ,KAAoBvC,OAAzD,EAAkE;AAChE4D,QAAAA,UAAU,CAAC,MAAM;AACf,cAAIC,OAAO,GAAGF,YAAY,CAACpB,CAAD,CAA1B;AACAf,UAAAA,QAAQ,CAACC,cAAT,CACG,QAAOoC,OAAO,CAAClD,GAAI,IAAGkD,OAAO,CAAChD,GAAI,EADrC,EAEEa,SAFF,GAEc,cAFd;AAGD,SALS,EAKP,KAAKa,CALE,CAAV;AAMD;AACF;;AAED,QAAImB,MAAM,CAACD,SAAP,KAAqB,KAAzB,EAAgC;AAC9BG,MAAAA,UAAU,CAAC,MAAM;AACf,aAAK1C,QAAL,CAAc;AAAEf,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD,OAFS,EAEP,IAFO,CAAV;AAGA;AACD;;AAEDyD,IAAAA,UAAU,CAAC,MAAM;AACf,UAAId,IAAI,GAAG9C,OAAO,CAAC8C,IAAnB;;AACA,aAAOA,IAAI,CAACnC,GAAL,KAAaZ,SAAS,CAACY,GAAvB,IAA8BmC,IAAI,CAACjC,GAAL,KAAad,SAAS,CAACc,GAA5D,EAAiE;AAC/DW,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOqB,IAAI,CAACnC,GAAI,IAAGmC,IAAI,CAACjC,GAAI,EAArD,EAAwDa,SAAxD,GACE,WADF;AAEAoB,QAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACD;;AACD,WAAK5B,QAAL,CAAc;AAAEf,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD,KARS,EAQP,KAAKwD,YAAY,CAACnB,MARX,CAAV;AASD;;AA3U0B;;AA8U7B,eAAe9C,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport Node from '../components/Node';\nimport Results from '../components/Results';\n\nimport '../styles/main.css';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = 20;\n    this.maxCol = 50;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    isDragging: false,\n    dragNode: 'wall',\n    pathStatus: '',\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(row, col) {\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className =\n          'normal-node';\n\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          this.setState({\n            startNode: nodes[row][col],\n          });\n        } else {\n          this.setState({\n            endNode: nodes[row][col],\n          });\n        }\n      }\n    } else {\n      if (\n        this.state.startNode.row === row &&\n        this.state.startNode.col === col\n      ) {\n        return;\n      } else if (\n        this.state.endNode.row === row &&\n        this.state.endNode.col === col\n      ) {\n        return;\n      }\n      document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n    }\n  }\n\n  handleNodePressed(row, column) {\n    let dragNode = 'wall';\n    if (\n      this.state.startNode.row === row &&\n      this.state.startNode.col === column\n    ) {\n      dragNode = 'start';\n    } else if (\n      this.state.endNode.row === row &&\n      this.state.endNode.col === column\n    ) {\n      dragNode = 'end';\n    }\n\n    this.setState({ isDragging: true, dragNode: dragNode }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      this.setState({ isDragging: false });\n    }\n    this.setState({ dragNode: 'wall' });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n    console.log('prevented a drag');\n  }\n\n  // Displays the nodes on the grid with their state values\n  render() {\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      node={node}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                      row={rowIndex}\n                      col={colIndex}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <Results pathStatus={this.state.pathStatus} />\n      </React.Fragment>\n    );\n  }\n\n  resetGrid() {\n    let nodes = this.copyNodes();\n\n    for (let i = 0; i < nodes.length; i++) {\n      for (let j = 0; j < nodes[i].length; j++) {\n        nodes[i][j] = {\n          row: i,\n          col: j,\n          adjacentNodes: [],\n          isVisited: false,\n          dist: Infinity,\n          prev: {},\n        };\n      }\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n\n    this.setState({\n      nodes: nodes,\n      startNode: {},\n      endNode: {},\n      startNodePreviouslySet: false,\n      endNodePreviouslySet: false,\n      isDragging: false,\n      pathStatus: '',\n    });\n  }\n\n  setAdjacentNodes(node, nodes) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({ row: row, col: col + 1 });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {},\n      };\n\n      this.setState({ startNode: nodeObject });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {},\n      };\n      this.setState({ endNode: nodeObject });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        isVisited: false,\n        dist: Infinity,\n        prev: {},\n      };\n    }\n  }\n\n  // performs a deep copy of the grid so that the state is not altered directly by accident.\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach((x) => {\n      let currentRow = [];\n      x.forEach((nodes) => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n        currentRow.push(node);\n      });\n\n      clone.push(currentRow);\n    });\n\n    return clone;\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n  visualiseDijkstras() {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n\n    let result = dijkstras(\n      nodes,\n      startNode,\n      endNode,\n      this.maxRow,\n      this.maxCol,\n      pathFound\n    );\n\n    this.setState({ pathStatus: 'searching' });\n    let visitedNodes = result.visitedNodes;\n\n    // Below is the chunk of code that deals with incrementally updating the node colour to show which nodes the algorithm\n    // took in search of the goal node. To get this to work I utilise how the setTimeout function works with respect to react.\n    // In react, setState is normally run asynchronously with multiple setState calls typically batched together into one single\n    // setState call update for performance reasons. However, if setState is called within setTimeout, these calls now run synchronously.\n    // The reason for this is due to how setTimeout() works, it doesn't guarantee that the callback function will run after whatever delay\n    // you give it, it is only guaranteed to QUEUE UP the callback in a 'message queue' after that delay period. This message queue is a queue\n    // of callback functions which are run AFTER ALL OTHER CODE IS RUN and which are run one after the other in the order in which they\n    // were queued. I set a delay of 0 here because all I need to do is get this chunk of code into that queue and it will be run\n    // synchronously, the delay just controls when the code is sent to that queue, all other code below must run first regardless so it\n    // doesn't really matter.\n    for (let i = 0; i < visitedNodes.length; i++) {\n      if (visitedNodes[i] !== startNode && visitedNodes[i] !== endNode) {\n        setTimeout(() => {\n          let visited = visitedNodes[i];\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'visited-node';\n        }, 25 * i);\n      }\n    }\n\n    if (result.pathFound === false) {\n      setTimeout(() => {\n        this.setState({ pathStatus: 'none' });\n      }, 1000);\n      return;\n    }\n\n    setTimeout(() => {\n      let prev = endNode.prev;\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        document.getElementById(`node-${prev.row}-${prev.col}`).className =\n          'path-node';\n        prev = prev.prev;\n      }\n      this.setState({ pathStatus: 'found' });\n    }, 25 * visitedNodes.length);\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}