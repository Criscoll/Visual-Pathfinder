{"ast":null,"code":"export default function dikstrasAlgorithm(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let queue = [];\n  startNode.dist = 0;\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      queue.push(grid[i][j]);\n    }\n  }\n\n  while (queue.length) {\n    let s = findMinimum(queue);\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return visitedNodes;\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      let alt = s.adjacentNodes[i].dist + distance(s, s.adjacentNodes[i]);\n\n      if (alt < s.adjacentNodes[i].dist) {\n        s.adjacentNodes[i].dist = alt;\n        s.adjacentNodes[i].prev = s;\n      }\n    }\n  }\n\n  console.log(visitedNodes);\n  return visitedNodes;\n} // change this when weights are implemented\n\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  console.log(queue.length);\n  return minItem;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/my-app/src/Algorithms/dijkstras.js"],"names":["dikstrasAlgorithm","grid","startNode","endNode","numRows","numCols","visitedNodes","queue","dist","i","j","push","length","s","findMinimum","row","col","adjacentNodes","alt","distance","prev","console","log","u","v","min","Infinity","minIdx","minItem","splice"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CACbC,IADa,EAEbC,SAFa,EAGbC,OAHa,EAIbC,OAJa,EAKbC,OALa,EAMb;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA,MAAIC,KAAK,GAAG,EAAZ;AACAL,EAAAA,SAAS,CAACM,IAAV,GAAiB,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAApB,EAA6BK,CAAC,EAA9B,EAAkC;AAChC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAApB,EAA6BK,CAAC,EAA9B,EAAkC;AAChCH,MAAAA,KAAK,CAACI,IAAN,CAAWV,IAAI,CAACQ,CAAD,CAAJ,CAAQC,CAAR,CAAX;AACD;AACF;;AAED,SAAOH,KAAK,CAACK,MAAb,EAAqB;AACnB,QAAIC,CAAC,GAAGC,WAAW,CAACP,KAAD,CAAnB;AACAD,IAAAA,YAAY,CAACK,IAAb,CAAkBE,CAAlB;;AAEA,QAAIA,CAAC,CAACE,GAAF,KAAUZ,OAAO,CAACY,GAAlB,IAAyBF,CAAC,CAACG,GAAF,KAAUb,OAAO,CAACa,GAA/C,EAAoD;AAClD,aAAOV,YAAP;AACD;;AAED,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAAC,CAACI,aAAF,CAAgBL,MAApC,EAA4CH,CAAC,EAA7C,EAAiD;AAC/C,UAAIS,GAAG,GAAGL,CAAC,CAACI,aAAF,CAAgBR,CAAhB,EAAmBD,IAAnB,GAA0BW,QAAQ,CAACN,CAAD,EAAIA,CAAC,CAACI,aAAF,CAAgBR,CAAhB,CAAJ,CAA5C;;AAEA,UAAIS,GAAG,GAAGL,CAAC,CAACI,aAAF,CAAgBR,CAAhB,EAAmBD,IAA7B,EAAmC;AACjCK,QAAAA,CAAC,CAACI,aAAF,CAAgBR,CAAhB,EAAmBD,IAAnB,GAA0BU,GAA1B;AACAL,QAAAA,CAAC,CAACI,aAAF,CAAgBR,CAAhB,EAAmBW,IAAnB,GAA0BP,CAA1B;AACD;AACF;AACF;;AAEDQ,EAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ;AACA,SAAOA,YAAP;AACD,C,CAED;;AACA,SAASa,QAAT,CAAkBI,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,SAAO,CAAP;AACD;;AAED,SAASV,WAAT,CAAqBP,KAArB,EAA4B;AAC1B,MAAIkB,GAAG,GAAGC,QAAV;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACK,MAA1B,EAAkCH,CAAC,EAAnC,EAAuC;AACrC,QAAIF,KAAK,CAACE,CAAD,CAAL,CAASD,IAAT,GAAgBiB,GAApB,EAAyB;AACvBA,MAAAA,GAAG,GAAGlB,KAAK,CAACE,CAAD,CAAL,CAASD,IAAf;AACAmB,MAAAA,MAAM,GAAGlB,CAAT;AACAmB,MAAAA,OAAO,GAAGrB,KAAK,CAACE,CAAD,CAAf;AACD;AACF;;AAEDF,EAAAA,KAAK,CAACsB,MAAN,CAAaF,MAAb,EAAqB,CAArB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACK,MAAlB;AACA,SAAOgB,OAAP;AACD","sourcesContent":["export default function dikstrasAlgorithm(\n  grid,\n  startNode,\n  endNode,\n  numRows,\n  numCols\n) {\n  let visitedNodes = [];\n\n  let queue = [];\n  startNode.dist = 0;\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      queue.push(grid[i][j]);\n    }\n  }\n\n  while (queue.length) {\n    let s = findMinimum(queue);\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return visitedNodes;\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      let alt = s.adjacentNodes[i].dist + distance(s, s.adjacentNodes[i]);\n\n      if (alt < s.adjacentNodes[i].dist) {\n        s.adjacentNodes[i].dist = alt;\n        s.adjacentNodes[i].prev = s;\n      }\n    }\n  }\n\n  console.log(visitedNodes);\n  return visitedNodes;\n}\n\n// change this when weights are implemented\nfunction distance(u, v) {\n  return 1;\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  console.log(queue.length);\n  return minItem;\n}\n"]},"metadata":{},"sourceType":"module"}