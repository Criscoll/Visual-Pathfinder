{"ast":null,"code":"import * as constants from '../constants/constants';\nexport default function recursiveDivision(origin, width, height, wallInfo, timer) {\n  // Recursion termination\n  if (width < 4 || height < 4) {\n    return;\n  }\n\n  let isHorizontal = Boolean(width < height);\n\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  } // let isHorizontal = 0;\n\n\n  let wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal ? randomIntFromInterval(origin.row + 1, height + origin.row - 2) : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  if (isHorizontal !== wallInfo.isHorizontal) {\n    while (holeIdx === wallInfo.holeIdx) {\n      holeIdx = isHorizontal ? Math.floor(Math.random() * (width - 1)) + origin.col : Math.floor(Math.random() * (height - 1)) + origin.row;\n    }\n  }\n\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    recursiveDivision(origin, width, Math.abs(wallIdx - origin.row), wallInfo, timer);\n    recursiveDivision({\n      row: wallIdx + 1,\n      col: origin.col\n    }, width, height - wallIdx - 1, wallInfo, timer);\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    recursiveDivision(origin, Math.abs(wallIdx - origin.col), height, wallInfo, timer);\n    recursiveDivision({\n      row: origin.row,\n      col: wallIdx + 1\n    }, width - wallIdx - 1, height, wallInfo, timer);\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${wallIdx}-${col}`).className) && col !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  console.log(origin);\n  console.log(`horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`);\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (!['start-node', 'end-node'].includes(document.getElementById(`node-${row}-${wallIdx}`).className) && row !== wallInfo.holeIdx) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className = 'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  console.log(origin);\n  console.log(`vertical, wallIdx: ${wallIdx}, height: ${height} holeIdx: ${wallInfo.holeIdx}`);\n  return timer;\n}","map":{"version":3,"sources":["/home/cristian/Documents/projects/visual_pathfinder/src/Algorithms/recursiveDivision.js"],"names":["constants","recursiveDivision","origin","width","height","wallInfo","timer","isHorizontal","Boolean","randomIntFromInterval","wallIdx","row","col","holeIdx","Math","floor","random","maxRow","buildHorizontalWall","abs","maxCol","buildVerticalWall","min","max","includes","document","getElementById","className","setTimeout","console","log"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,wBAA3B;AAEA,eAAe,SAASC,iBAAT,CACbC,MADa,EAEbC,KAFa,EAGbC,MAHa,EAIbC,QAJa,EAKbC,KALa,EAMb;AACA;AACA,MAAIH,KAAK,GAAG,CAAR,IAAaC,MAAM,GAAG,CAA1B,EAA6B;AAC3B;AACD;;AAED,MAAIG,YAAY,GAAGC,OAAO,CAACL,KAAK,GAAGC,MAAT,CAA1B;;AACA,MAAID,KAAK,KAAKC,MAAd,EAAsB;AACpBG,IAAAA,YAAY,GAAGE,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAArB,GAAgC,EAA/C;AACD,GATD,CAUA;;;AAEA,MAAIC,OAAO,GAAGH,YAAY,GACtBE,qBAAqB,CAACP,MAAM,CAACS,GAAP,GAAa,CAAd,EAAiBP,MAAM,GAAGF,MAAM,CAACS,GAAhB,GAAsB,CAAvC,CADC,GAEtBF,qBAAqB,CAACP,MAAM,CAACU,GAAP,GAAa,CAAd,EAAiBT,KAAK,GAAGD,MAAM,CAACU,GAAf,GAAqB,CAAtC,CAFzB;;AAIA,SAAOF,OAAO,GAAG,CAAV,KAAgB,CAAvB,EAA0B;AACxBA,IAAAA,OAAO,GAAGH,YAAY,GAClBE,qBAAqB,CAACP,MAAM,CAACS,GAAP,GAAa,CAAd,EAAiBP,MAAM,GAAGF,MAAM,CAACS,GAAhB,GAAsB,CAAvC,CADH,GAElBF,qBAAqB,CAACP,MAAM,CAACU,GAAP,GAAa,CAAd,EAAiBT,KAAK,GAAGD,MAAM,CAACU,GAAf,GAAqB,CAAtC,CAFzB;AAGD;;AAED,MAAIC,OAAO,GAAGN,YAAY,GACtBO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBb,KAAK,GAAG,CAAzB,CAAX,IAA0CD,MAAM,CAACU,GAD3B,GAEtBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBZ,MAAM,GAAG,CAA1B,CAAX,IAA2CF,MAAM,CAACS,GAFtD;;AAIA,MAAIJ,YAAY,KAAKF,QAAQ,CAACE,YAA9B,EAA4C;AAC1C,WAAOM,OAAO,KAAKR,QAAQ,CAACQ,OAA5B,EAAqC;AACnCA,MAAAA,OAAO,GAAGN,YAAY,GAClBO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBb,KAAK,GAAG,CAAzB,CAAX,IAA0CD,MAAM,CAACU,GAD/B,GAElBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBZ,MAAM,GAAG,CAA1B,CAAX,IAA2CF,MAAM,CAACS,GAFtD;AAGD;AACF;;AAEDN,EAAAA,QAAQ,CAACE,YAAT,GAAwBA,YAAxB;AACAF,EAAAA,QAAQ,CAACQ,OAAT,GAAmBA,OAAnB;;AAEA,MAAIN,YAAJ,EAAkB;AAChB,QAAIG,OAAO,IAAIV,SAAS,CAACiB,MAAzB,EAAiC;AAC/B;AACD;;AACDX,IAAAA,KAAK,GAAGY,mBAAmB,CAAChB,MAAD,EAASQ,OAAT,EAAkBL,QAAlB,EAA4BF,KAA5B,EAAmCG,KAAnC,CAA3B;AACAL,IAAAA,iBAAiB,CACfC,MADe,EAEfC,KAFe,EAGfW,IAAI,CAACK,GAAL,CAAST,OAAO,GAAGR,MAAM,CAACS,GAA1B,CAHe,EAIfN,QAJe,EAKfC,KALe,CAAjB;AAOAL,IAAAA,iBAAiB,CACf;AAAEU,MAAAA,GAAG,EAAED,OAAO,GAAG,CAAjB;AAAoBE,MAAAA,GAAG,EAAEV,MAAM,CAACU;AAAhC,KADe,EAEfT,KAFe,EAGfC,MAAM,GAAGM,OAAT,GAAmB,CAHJ,EAIfL,QAJe,EAKfC,KALe,CAAjB;AAOD,GAnBD,MAmBO;AACL,QAAII,OAAO,IAAIV,SAAS,CAACoB,MAAzB,EAAiC;AAC/B;AACD;;AACDd,IAAAA,KAAK,GAAGe,iBAAiB,CAACnB,MAAD,EAASQ,OAAT,EAAkBL,QAAlB,EAA4BD,MAA5B,EAAoCE,KAApC,CAAzB;AACAL,IAAAA,iBAAiB,CACfC,MADe,EAEfY,IAAI,CAACK,GAAL,CAAST,OAAO,GAAGR,MAAM,CAACU,GAA1B,CAFe,EAGfR,MAHe,EAIfC,QAJe,EAKfC,KALe,CAAjB;AAOAL,IAAAA,iBAAiB,CACf;AAAEU,MAAAA,GAAG,EAAET,MAAM,CAACS,GAAd;AAAmBC,MAAAA,GAAG,EAAEF,OAAO,GAAG;AAAlC,KADe,EAEfP,KAAK,GAAGO,OAAR,GAAkB,CAFH,EAGfN,MAHe,EAIfC,QAJe,EAKfC,KALe,CAAjB;AAOD;AACF;;AAED,SAASG,qBAAT,CAA+Ba,GAA/B,EAAoCC,GAApC,EAAyC;AACvC;AACA,SAAOT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBO,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,SAASJ,mBAAT,CAA6BhB,MAA7B,EAAqCQ,OAArC,EAA8CL,QAA9C,EAAwDF,KAAxD,EAA+DG,KAA/D,EAAsE;AACpE,OAAK,IAAIM,GAAG,GAAGV,MAAM,CAACU,GAAtB,EAA2BA,GAAG,GAAGT,KAAK,GAAGD,MAAM,CAACU,GAAhD,EAAqDA,GAAG,EAAxD,EAA4D;AAC1D,QACE,CAAC,CAAC,YAAD,EAAe,UAAf,EAA2BY,QAA3B,CACCC,QAAQ,CAACC,cAAT,CAAyB,QAAOhB,OAAQ,IAAGE,GAAI,EAA/C,EAAkDe,SADnD,CAAD,IAGAf,GAAG,KAAKP,QAAQ,CAACQ,OAJnB,EAKE;AACAe,MAAAA,UAAU,CAAC,MAAM;AACfH,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOhB,OAAQ,IAAGE,GAAI,EAA/C,EAAkDe,SAAlD,GACE,WADF;AAED,OAHS,EAGP,KAAKrB,KAHE,CAAV;AAIAA,MAAAA,KAAK;AACN;AACF;;AACDuB,EAAAA,OAAO,CAACC,GAAR,CAAY5B,MAAZ;AACA2B,EAAAA,OAAO,CAACC,GAAR,CACG,wBAAuBpB,OAAQ,YAAWP,KAAM,cAAaE,QAAQ,CAACQ,OAAQ,EADjF;AAGA,SAAOP,KAAP;AACD;;AAED,SAASe,iBAAT,CAA2BnB,MAA3B,EAAmCQ,OAAnC,EAA4CL,QAA5C,EAAsDD,MAAtD,EAA8DE,KAA9D,EAAqE;AACnE,OAAK,IAAIK,GAAG,GAAGT,MAAM,CAACS,GAAtB,EAA2BA,GAAG,GAAGP,MAAM,GAAGF,MAAM,CAACS,GAAjD,EAAsDA,GAAG,EAAzD,EAA6D;AAC3D,QACE,CAAC,CAAC,YAAD,EAAe,UAAf,EAA2Ba,QAA3B,CACCC,QAAQ,CAACC,cAAT,CAAyB,QAAOf,GAAI,IAAGD,OAAQ,EAA/C,EAAkDiB,SADnD,CAAD,IAGAhB,GAAG,KAAKN,QAAQ,CAACQ,OAJnB,EAKE;AACAe,MAAAA,UAAU,CAAC,MAAM;AACfH,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOf,GAAI,IAAGD,OAAQ,EAA/C,EAAkDiB,SAAlD,GACE,WADF;AAED,OAHS,EAGP,KAAKrB,KAHE,CAAV;AAIAA,MAAAA,KAAK;AACN;AACF;;AACDuB,EAAAA,OAAO,CAACC,GAAR,CAAY5B,MAAZ;AACA2B,EAAAA,OAAO,CAACC,GAAR,CACG,sBAAqBpB,OAAQ,aAAYN,MAAO,aAAYC,QAAQ,CAACQ,OAAQ,EADhF;AAGA,SAAOP,KAAP;AACD","sourcesContent":["import * as constants from '../constants/constants';\n\nexport default function recursiveDivision(\n  origin,\n  width,\n  height,\n  wallInfo,\n  timer\n) {\n  // Recursion termination\n  if (width < 4 || height < 4) {\n    return;\n  }\n\n  let isHorizontal = Boolean(width < height);\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  }\n  // let isHorizontal = 0;\n\n  let wallIdx = isHorizontal\n    ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n    : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal\n      ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n      : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal\n    ? Math.floor(Math.random() * (width - 1)) + origin.col\n    : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  if (isHorizontal !== wallInfo.isHorizontal) {\n    while (holeIdx === wallInfo.holeIdx) {\n      holeIdx = isHorizontal\n        ? Math.floor(Math.random() * (width - 1)) + origin.col\n        : Math.floor(Math.random() * (height - 1)) + origin.row;\n    }\n  }\n\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n    timer = buildHorizontalWall(origin, wallIdx, wallInfo, width, timer);\n    recursiveDivision(\n      origin,\n      width,\n      Math.abs(wallIdx - origin.row),\n      wallInfo,\n      timer\n    );\n    recursiveDivision(\n      { row: wallIdx + 1, col: origin.col },\n      width,\n      height - wallIdx - 1,\n      wallInfo,\n      timer\n    );\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n    timer = buildVerticalWall(origin, wallIdx, wallInfo, height, timer);\n    recursiveDivision(\n      origin,\n      Math.abs(wallIdx - origin.col),\n      height,\n      wallInfo,\n      timer\n    );\n    recursiveDivision(\n      { row: origin.row, col: wallIdx + 1 },\n      width - wallIdx - 1,\n      height,\n      wallInfo,\n      timer\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(origin, wallIdx, wallInfo, width, timer) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${wallIdx}-${col}`).className\n      ) &&\n      col !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${wallIdx}-${col}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n  console.log(origin);\n  console.log(\n    `horizontal, wallIdx: ${wallIdx}, width: ${width}, holeIdx: ${wallInfo.holeIdx}`\n  );\n  return timer;\n}\n\nfunction buildVerticalWall(origin, wallIdx, wallInfo, height, timer) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${row}-${wallIdx}`).className\n      ) &&\n      row !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        document.getElementById(`node-${row}-${wallIdx}`).className =\n          'wall-node';\n      }, 70 * timer);\n      timer++;\n    }\n  }\n  console.log(origin);\n  console.log(\n    `vertical, wallIdx: ${wallIdx}, height: ${height} holeIdx: ${wallInfo.holeIdx}`\n  );\n  return timer;\n}\n"]},"metadata":{},"sourceType":"module"}