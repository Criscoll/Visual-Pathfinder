{"version":3,"sources":["images/pathfinder-logo.svg","images/pathfinding.gif","images/placing-obstacles.gif","images/moving-nodes.gif","serviceWorker.js","Algorithms/dijkstras.js","constants/constants.js","Algorithms/astar.js","Algorithms/recursiveDivision.js","components/Node.jsx","constants/enumerations.js","containers/Grid.jsx","Algorithms/DFS.js","Algorithms/BFS.js","components/AlgorithmsButton.jsx","components/MazeGeneratorButton.jsx","components/ClearGridButton.jsx","components/StartButton.jsx","containers/Toolbar.jsx","containers/Stats.jsx","containers/Info.jsx","containers/TutorialModal.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","distance","u","v","document","getElementById","row","col","className","findMinimum","queue","min","Infinity","minIdx","minItem","i","length","dist","splice","findLowestFCost","openList","lowInd","f","minFNode","inOpenList","heuristicValue","pos0","pos1","Math","abs","recursiveDivision","origin","width","height","wallInfo","timer","withWeight","isHorizontal","randomIntFromInterval","wallIdx","mazeDelay","holeIdx","floor","random","includes","setTimeout","buildHorizontalWall","mazeDelayOne","mazeDelayTwo","buildVerticalWall","max","Node","props","state","mounted","handleMouseEnter","bind","handlePress","this","isDragging","handleNodeClick","handleNodePressed","nextProps","resetClicked","id","node","nodeType","onMouseDown","onMouseUp","handleNodeReleased","onMouseEnter","Component","algorithms","Object","freeze","none","dijkstras","DFS","AStar","BFS","mazes","randomWalls","randomWeights","randomMixed","maze","mazeWithWeights","Grid","nodes","startNode","endNode","dragNode","maxRow","maxCol","currentRow","currentNode","createNode","push","setAdjacentNodes","setState","setGridModified","copyNodes","oldRow","oldCol","rowColIndices","weightKeyPressed","weightsDisabled","column","algorithmRunning","e","preventDefault","Fragment","onMouseLeave","onDragStart","handleDragBug","map","rowIndex","key","colIndex","adjacentNodes","nodeObject","visited","prev","clone","forEach","x","JSON","parse","stringify","weightsRemoved","mazeType","resetGrid","setAlgorithmRunning","enumerations","algorithm","result","grid","numRows","numCols","visitedNodes","j","s","keys","pathFound","adjacentRow","adjacentCol","alt","stack","pop","shift","closedList","initialise","inClosedList","neighbour","neighbourDistance","gScore","g","gScoreIsBest","h","astar","console","log","visualisePath","pause","currentTime","pathNodes","reverse","setStats","withMyHook","hookValue","targetKey","useState","keyPressed","setKeyPressed","useEffect","downHandler","upHandler","addEventListener","removeEventListener","useKeyPressed","forwardedRef","rest","ref","useStyles","makeStyles","theme","root","display","zIndex","paper","marginRight","spacing","button","fontFamily","fontSize","color","dropDownMenu","alignItems","backgroundColor","dropDownText","MenuListComposition","classes","React","open","setOpen","anchorRef","useRef","setAlgorithm","handleClose","event","current","contains","target","handleListKeyDown","prevOpen","focus","Button","aria-controls","undefined","aria-haspopup","onClick","disabled","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","MazeGeneratorButton","generateMaze","ClearGridButton","handleResetClick","boxShadow","handleGoClick","Toolbar","setTutorialModalOpen","opacity","Stats","currStats","setCurrStats","prevStats","setPrevStats","tempStats","setTempStats","currStatsStable","pathLength","nodesChecked","algorithmUsed","clearStats","Info","renderedText","setRenderedText","selectedAlgorithm","TutorialModal","pageNum","setPageNum","incrementPage","val","prevPageNum","ReactDom","createPortal","stopPropagation","setModalOpen","PageOne","PageTwo","PageThree","PageFour","PageFive","src","AppLogo","Pathfinding","PlacingObstacles","MovingNodes","Main","gridRef","createRef","algorithmName","tutorialModalOpen","runVisualiser","clearPaths","removeWeights","ReactDOM","render","StrictMode","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5c6145e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pathfinder-logo.68ad7b69.svg\";","module.exports = __webpack_public_path__ + \"static/media/pathfinding.1e9b9135.gif\";","module.exports = __webpack_public_path__ + \"static/media/placing-obstacles.a675e19b.gif\";","module.exports = __webpack_public_path__ + \"static/media/moving-nodes.ce3e85ff.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as constants from '../constants/constants';\n\nexport default function dikstrasAlgorithm(\n  grid,\n  startNode,\n  endNode,\n  numRows,\n  numCols\n) {\n  let visitedNodes = [];\n  let queue = [];\n\n  startNode.dist = 0;\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      if (document.getElementById(`node-${i}-${j}`).className !== 'wall-node') {\n        queue.push(grid[i][j]);\n      }\n    }\n  }\n\n  while (queue.length !== 0) {\n    let s = findMinimum(queue);\n\n    if (Object.keys(s).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(s);\n\n    if (s.row === endNode.row && s.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    for (let i = 0; i < s.adjacentNodes.length; i++) {\n      if (\n        document.getElementById(\n          `node-${s.adjacentNodes[i].row}-${s.adjacentNodes[i].col}`\n        ).className !== 'wall-node'\n      ) {\n        let adjacentRow = s.adjacentNodes[i].row;\n        let adjacentCol = s.adjacentNodes[i].col;\n        let alt = s.dist + distance(s, s.adjacentNodes[i]);\n\n        if (alt < grid[adjacentRow][adjacentCol].dist) {\n          grid[adjacentRow][adjacentCol].dist = alt;\n          grid[adjacentRow][adjacentCol].prev = s;\n        }\n      }\n    }\n  }\n\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\n// change this when weights are implemented\nfunction distance(u, v) {\n  if (\n    document.getElementById(`node-${v.row}-${v.col}`).className ===\n    'weight-node'\n  ) {\n    return constants.weightValue;\n  } else {\n    return 1;\n  }\n}\n\nfunction findMinimum(queue) {\n  let min = Infinity;\n  let minIdx = 0;\n  let minItem = {};\n\n  for (let i = 0; i < queue.length; i++) {\n    if (queue[i].dist < min) {\n      min = queue[i].dist;\n      minIdx = i;\n      minItem = queue[i];\n    }\n  }\n\n  queue.splice(minIdx, 1);\n  return minItem;\n}\n","export const maxRow = 24;\nexport const maxCol = 62;\n\nexport const weightValue = 10;\n","import * as constants from '../constants/constants';\n\nexport default function astar(grid, startNode, endNode, numRows, numCols) {\n  let visitedNodes = [];\n  let openList = [];\n  let closedList = [];\n\n  initialise(grid, numRows, numCols);\n\n  openList.push(startNode);\n  startNode.inOpenList = true;\n\n  while (openList.length !== 0) {\n    let currentNode = findLowestFCost(openList);\n\n    if (currentNode === null) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(currentNode);\n    // End case -- result has been found, return the traced path\n    if (currentNode.row === endNode.row && currentNode.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    // Normal case -- move currentNode from open to closed, process each of its neighbours\n    closedList.push(currentNode);\n    currentNode.inClosedList = true;\n    for (let i = 0; i < currentNode.adjacentNodes.length; i++) {\n      let adjacentRow = currentNode.adjacentNodes[i].row;\n      let adjacentCol = currentNode.adjacentNodes[i].col;\n\n      let neighbour = grid[adjacentRow][adjacentCol];\n\n      if (\n        neighbour.inClosedList ||\n        document.getElementById(`node-${neighbour.row}-${neighbour.col}`)\n          .className === 'wall-node'\n      ) {\n        // not a valid node to process, skip to next neighbour\n        continue;\n      }\n\n      // g score is the shortest distance from start to current node, we need to check if\n      //   the path we have arrived at this neighbour is the shortest one we have seen yet\n\n      let neighbourDistance = 1;\n      if (\n        document.getElementById(`node-${neighbour.row}-${neighbour.col}`)\n          .className === 'weight-node'\n      ) {\n        neighbourDistance = constants.weightValue;\n      }\n\n      let gScore = currentNode.g + neighbourDistance; // 1 is the distance from a node to it's neighbour\n\n      let gScoreIsBest = false;\n\n      if (!neighbour.inOpenList) {\n        // This the the first time we have arrived at this node, it must be the best\n        // Also, we need to take the h (heuristic) score since we haven't done so yet\n\n        gScoreIsBest = true;\n        neighbour.h = heuristicValue(neighbour, endNode) * (1.0 + 0.001); // tiebreaker value added\n        openList.push(neighbour);\n        neighbour.inOpenList = true;\n      } else if (gScore < neighbour.g) {\n        // We have already seen the node, but last time it had a worse g (distance from start)\n        gScoreIsBest = true;\n      }\n\n      if (gScoreIsBest) {\n        // Found an optimal (so far) path to this node.   Store info on how we got here and\n        //  just how good it really is...\n        neighbour.prev = currentNode;\n        neighbour.g = gScore;\n        neighbour.f = neighbour.g + neighbour.h;\n      }\n    }\n  }\n\n  // No result was found -- empty array signifies failure to find path\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n\nfunction initialise(grid, numRows, numCols) {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      let node = grid[i][j];\n      node['f'] = null;\n      node['h'] = null;\n      node['g'] = null;\n      node['inOpenList'] = false;\n      node['inClosedList'] = false;\n    }\n  }\n\n  return grid;\n}\n\nfunction findLowestFCost(openList) {\n  let lowInd = 0;\n  for (let i = 0; i < openList.length; i++) {\n    if (openList[i].f < openList[lowInd].f) {\n      lowInd = i;\n    }\n  }\n  let minFNode = openList[lowInd];\n  openList.splice(lowInd, 1);\n  minFNode.inOpenList = false;\n  return minFNode;\n}\n\nfunction heuristicValue(pos0, pos1) {\n  let d1 = Math.abs(pos1.row - pos0.row);\n  let d2 = Math.abs(pos1.col - pos0.col);\n\n  return d1 + d2;\n}\n","import * as constants from '../constants/constants';\n\nexport default function recursiveDivision(\n  origin,\n  width,\n  height,\n  wallInfo,\n  timer,\n  withWeight\n) {\n  // Recursion termination\n  if (width < 2 || height < 2) {\n    return timer;\n  }\n\n  let isHorizontal = Boolean(width < height);\n  if (width === height) {\n    isHorizontal = randomIntFromInterval(0, 100) > 50;\n  }\n  // let isHorizontal = 0;\n\n  let wallIdx = isHorizontal\n    ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n    : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n\n  while (wallIdx % 2 === 0) {\n    wallIdx = isHorizontal\n      ? randomIntFromInterval(origin.row + 1, height + origin.row - 2)\n      : randomIntFromInterval(origin.col + 1, width + origin.col - 2);\n  }\n\n  let holeIdx = isHorizontal\n    ? Math.floor(Math.random() * (width - 1)) + origin.col\n    : Math.floor(Math.random() * (height - 1)) + origin.row;\n\n  while (holeIdx % 2 === 1) {\n    holeIdx = isHorizontal\n      ? Math.floor(Math.random() * (width - 1)) + origin.col\n      : Math.floor(Math.random() * (height - 1)) + origin.row;\n  }\n  wallInfo.isHorizontal = isHorizontal;\n  wallInfo.holeIdx = holeIdx;\n\n  let mazeDelay;\n  if (isHorizontal) {\n    if (wallIdx >= constants.maxRow) {\n      return;\n    }\n    timer = buildHorizontalWall(\n      origin,\n      wallIdx,\n      wallInfo,\n      width,\n      timer,\n      withWeight\n    );\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      width,\n      Math.abs(wallIdx - origin.row),\n      wallInfo,\n      timer,\n      withWeight\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: wallIdx + 1, col: origin.col },\n      width,\n      height + origin.row - wallIdx - 1,\n      wallInfo,\n      timer,\n      withWeight\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  } else {\n    if (wallIdx >= constants.maxCol) {\n      return;\n    }\n    timer = buildVerticalWall(\n      origin,\n      wallIdx,\n      wallInfo,\n      height,\n      timer,\n      withWeight\n    );\n    let mazeDelayOne = recursiveDivision(\n      origin,\n      Math.abs(wallIdx - origin.col),\n      height,\n      wallInfo,\n      timer,\n      withWeight\n    );\n    let mazeDelayTwo = recursiveDivision(\n      { row: origin.row, col: wallIdx + 1 },\n      width + origin.col - wallIdx - 1,\n      height,\n      wallInfo,\n      timer,\n      withWeight\n    );\n\n    mazeDelay = mazeDelayOne > mazeDelayTwo ? mazeDelayOne : mazeDelayTwo;\n  }\n\n  return mazeDelay;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildHorizontalWall(\n  origin,\n  wallIdx,\n  wallInfo,\n  width,\n  timer,\n  withWeight\n) {\n  for (let col = origin.col; col < width + origin.col; col++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${wallIdx}-${col}`).className\n      ) &&\n      col !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        if (\n          withWeight &&\n          Math.floor(Math.random() * 100) > 90 &&\n          col % 2 === 0\n        ) {\n          document.getElementById(`node-${wallIdx}-${col}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${wallIdx}-${col}`).className =\n            'wall-node';\n        }\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n\nfunction buildVerticalWall(\n  origin,\n  wallIdx,\n  wallInfo,\n  height,\n  timer,\n  withWeight\n) {\n  for (let row = origin.row; row < height + origin.row; row++) {\n    if (\n      !['start-node', 'end-node'].includes(\n        document.getElementById(`node-${row}-${wallIdx}`).className\n      ) &&\n      row !== wallInfo.holeIdx\n    ) {\n      setTimeout(() => {\n        if (\n          withWeight &&\n          Math.floor(Math.random() * 100) > 90 &&\n          row % 2 === 0\n        ) {\n          document.getElementById(`node-${row}-${wallIdx}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${row}-${wallIdx}`).className =\n            'wall-node';\n        }\n      }, 70 * timer);\n      timer++;\n    }\n  }\n\n  return timer;\n}\n","import React, { Component } from 'react';\nimport '../styles/main.css';\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n  }\n  state = {\n    mounted: false,\n  };\n\n  handleMouseEnter() {\n    if (this.props.isDragging) {\n      this.props.handleNodeClick(this.props.row, this.props.col);\n    }\n  }\n\n  handlePress() {\n    this.props.handleNodePressed(this.props.row, this.props.col);\n  }\n\n  // shouldComponentUpdate() is used to tell react whether or not this child component should re-render. By default it returns true such that\n  // whenever the parent re-renders so does the child. The check here ensures that shouldComponentUpdate() returns false (don't re-render)\n  // unless the nodeType of this Node component changes\n  shouldComponentUpdate(nextProps) {\n    return this.props.resetClicked !== nextProps.resetClicked;\n  }\n\n  render() {\n    return (\n      <div\n        id={'node-' + this.props.row + '-' + this.props.col}\n        className={this.props.node.nodeType}\n        onMouseDown={this.handlePress}\n        onMouseUp={this.props.handleNodeReleased}\n        onMouseEnter={this.handleMouseEnter}\n      >\n        <i className=\"material-icons walk\">directions_walk</i>\n        <i className=\"material-icons flag\">flag</i>\n        <i className=\"material-icons weight\">fitness_center</i>\n      </div>\n    );\n  }\n}\n\nexport default Node;\n","export const algorithms = Object.freeze({\n  none: 0,\n  dijkstras: 1,\n  DFS: 2,\n  AStar: 3,\n  BFS: 4,\n});\n\nexport const mazes = Object.freeze({\n  none: 0,\n  randomWalls: 1,\n  randomWeights: 2,\n  randomMixed: 3,\n  maze: 4,\n  mazeWithWeights: 5,\n});\n","import React, { Component, useState, useEffect } from 'react';\nimport dijkstras from '../Algorithms/dijkstras';\nimport DFS from '../Algorithms/DFS';\nimport BFS from '../Algorithms/BFS';\nimport astar from '../Algorithms/astar';\nimport recursiveDivision from '../Algorithms/recursiveDivision';\nimport Node from '../components/Node';\nimport '../styles/main.css';\nimport * as enumerations from '../constants/enumerations';\nimport * as constants from '../constants/constants';\n\nfunction useKeyPressed(targetKey) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    function downHandler({ key }) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    const upHandler = ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n\nfunction withMyHook(Component) {\n  return function WrappedComponent(props) {\n    const hookValue = useKeyPressed('w');\n    const { forwardedRef, ...rest } = props;\n    return (\n      <Component ref={forwardedRef} {...rest} weightKeyPressed={hookValue} />\n    );\n  };\n}\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleNodePressed = this.handleNodePressed.bind(this);\n    this.handleNodeReleased = this.handleNodeReleased.bind(this);\n    this.maxRow = constants.maxRow;\n    this.maxCol = constants.maxCol;\n  }\n\n  state = {\n    nodes: [],\n    startNode: {},\n    endNode: {},\n    isDragging: false,\n    dragNode: 'wall',\n  };\n\n  componentDidMount() {\n    let nodes = [];\n    for (let row = 0; row < this.maxRow; row++) {\n      let currentRow = [];\n      for (let col = 0; col < this.maxCol; col++) {\n        let currentNode = this.createNode(row, col);\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n\n    // !!! Maybe set this just before the algorithm runs in case you set walls etc\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        this.setAdjacentNodes(nodes[row][col], nodes);\n      }\n    }\n    this.setState({ nodes });\n  }\n\n  handleNodeClick(row, col) {\n    this.props.setGridModified();\n\n    let nodes = this.copyNodes();\n    let nodeType = 'wall-node';\n\n    if (this.state.dragNode === 'start') {\n      nodeType = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      nodeType = 'end-node';\n    }\n\n    if (nodeType !== 'wall-node') {\n      let rowColIndices = [-1, -1];\n      let oldRow = -1;\n      let oldCol = -1;\n\n      if (nodeType === 'start-node') {\n        rowColIndices[0] = this.state.startNode.row;\n        rowColIndices[1] = this.state.startNode.col;\n      } else {\n        rowColIndices[0] = this.state.endNode.row;\n        rowColIndices[1] = this.state.endNode.col;\n      }\n\n      oldRow = rowColIndices[0];\n      oldCol = rowColIndices[1];\n\n      if (oldRow !== -1 && oldCol !== -1) {\n        document.getElementById(`node-${oldRow}-${oldCol}`).className =\n          'normal-node';\n\n        document.getElementById(`node-${row}-${col}`).className = nodeType;\n\n        if (nodeType === 'start-node') {\n          document.getElementById(`node-${row}-${col}`).className =\n            'start-node-dragged';\n          this.setState({\n            startNode: nodes[row][col],\n          });\n        } else {\n          document.getElementById(`node-${row}-${col}`).className =\n            'end-node-dragged';\n          this.setState({\n            endNode: nodes[row][col],\n          });\n        }\n      }\n    } else {\n      if (\n        this.state.startNode.row === row &&\n        this.state.startNode.col === col\n      ) {\n        return;\n      } else if (\n        this.state.endNode.row === row &&\n        this.state.endNode.col === col\n      ) {\n        return;\n      } else if (\n        document.getElementById(`node-${row}-${col}`).className ===\n          'wall-node' ||\n        document.getElementById(`node-${row}-${col}`).className ===\n          'weight-node'\n      ) {\n        document.getElementById(`node-${row}-${col}`).className = 'normal-node';\n      } else {\n        if (this.props.weightKeyPressed && !this.props.weightsDisabled) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = 'wall-node';\n        }\n      }\n    }\n    // let audio = document.getElementById('click_sound').cloneNode(true);\n    // audio.volume = 0.1;\n    // audio.play();\n  }\n\n  handleNodePressed(row, column) {\n    if (this.props.algorithmRunning) {\n      return;\n    }\n\n    let dragNode = 'wall';\n    if (\n      this.state.startNode.row === row &&\n      this.state.startNode.col === column\n    ) {\n      dragNode = 'start';\n      document.getElementById(`node-${row}-${column}`).className =\n        'start-node-dragged';\n    } else if (\n      this.state.endNode.row === row &&\n      this.state.endNode.col === column\n    ) {\n      dragNode = 'end';\n      document.getElementById(`node-${row}-${column}`).className =\n        'end-node-dragged';\n    }\n\n    this.setState({ isDragging: true, dragNode: dragNode }, () => {\n      this.handleNodeClick(row, column);\n    });\n  }\n\n  handleNodeReleased() {\n    if (this.state.isDragging) {\n      setTimeout(() => {\n        this.setState({ isDragging: false });\n      }, 50);\n    }\n\n    if (this.state.dragNode === 'start') {\n      document.getElementById(\n        `node-${this.state.startNode.row}-${this.state.startNode.col}`\n      ).className = 'start-node';\n    } else if (this.state.dragNode === 'end') {\n      document.getElementById(\n        `node-${this.state.endNode.row}-${this.state.endNode.col}`\n      ).className = 'end-node';\n    }\n\n    this.setState({ dragNode: 'wall' });\n  }\n\n  handleDragBug(e) {\n    e.preventDefault();\n  }\n\n  // Displays the nodes on the grid with their state values\n  render() {\n    let { nodes } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          className=\"grid\"\n          onMouseLeave={this.handleNodeReleased}\n          onDragStart={this.handleDragBug}\n        >\n          {nodes.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex} className=\"grid-container\">\n                {row.map((node, colIndex) => {\n                  return (\n                    <Node\n                      key={colIndex}\n                      node={node}\n                      isDragging={this.state.isDragging}\n                      handleNodeClick={this.handleNodeClick}\n                      handleNodePressed={this.handleNodePressed}\n                      handleNodeReleased={this.handleNodeReleased}\n                      row={rowIndex}\n                      col={colIndex}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  resetGrid() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          [\n            'wall-node',\n            'visited-node',\n            'path-node',\n            'weight-node',\n            'weight-node-visited',\n            'weight-node-path',\n          ].includes(document.getElementById(`node-${row}-${col}`).className)\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        }\n      }\n    }\n\n    document.getElementById(\n      `node-${this.state.startNode.row}-${this.state.startNode.col}`\n    ).className = 'start-node';\n\n    document.getElementById(\n      `node-${this.state.endNode.row}-${this.state.endNode.col}`\n    ).className = 'end-node';\n  }\n\n  setAdjacentNodes(node) {\n    let row = node.row;\n    let col = node.col;\n\n    if (row !== 0) {\n      node.adjacentNodes.push({ row: row - 1, col: col });\n    }\n\n    if (row !== this.maxRow - 1) {\n      node.adjacentNodes.push({ row: row + 1, col: col });\n    }\n\n    if (col !== 0) {\n      node.adjacentNodes.push({ row: row, col: col - 1 });\n    }\n\n    if (col !== this.maxCol - 1) {\n      node.adjacentNodes.push({ row: row, col: col + 1 });\n    }\n  }\n\n  createNode(row, col) {\n    if (row === 8 && col === 10) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'start-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n\n      this.setState({ startNode: nodeObject });\n      return nodeObject;\n    } else if (row === 8 && col === 38) {\n      const nodeObject = {\n        row: row,\n        col: col,\n        nodeType: 'end-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n      this.setState({ endNode: nodeObject });\n      return nodeObject;\n    } else {\n      return {\n        row: row,\n        col: col,\n        nodeType: 'normal-node',\n        adjacentNodes: [],\n        visited: false,\n        dist: Infinity,\n        prev: {},\n      };\n    }\n  }\n\n  // performs a deep copy of the grid so that the state is not altered directly by accident.\n  copyNodes() {\n    let clone = [];\n    this.state.nodes.forEach((x) => {\n      let currentRow = [];\n      x.forEach((nodes) => {\n        let node = JSON.parse(JSON.stringify(nodes));\n        node.dist = Infinity; // JSON.parse for some reason sets INFINITY to NULL in a deep copy\n        currentRow.push(node);\n      });\n\n      clone.push(currentRow);\n    });\n\n    return clone;\n  }\n\n  removeWeights() {\n    let weightsRemoved = false;\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['weight-node', 'weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n          weightsRemoved = true;\n        }\n      }\n    }\n    return weightsRemoved;\n  }\n\n  clearPaths() {\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['path-node', 'visited-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        } else if (\n          ['weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else if (\n          ['start-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'start-node';\n        } else if (\n          ['end-node-found'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n  }\n\n  generateMaze(mazeType) {\n    this.resetGrid();\n    this.props.setAlgorithmRunning(true);\n\n    if (mazeType === enumerations.mazes.randomWalls) {\n      for (let row = 0; row < this.maxRow; row++) {\n        for (let col = 0; col < this.maxCol; col++) {\n          if (\n            Math.random() * 100 > 65 &&\n            !['start-node', 'end-node'].includes(\n              document.getElementById(`node-${row}-${col}`).className\n            )\n          ) {\n            setTimeout(() => {\n              document.getElementById(`node-${row}-${col}`).className =\n                'wall-node';\n            }, 25 * col);\n          }\n        }\n      }\n\n      setTimeout(() => {\n        this.props.setAlgorithmRunning(false);\n      }, 25 * this.maxCol);\n    } else if (mazeType === enumerations.mazes.maze) {\n      const mazeDelay = recursiveDivision(\n        { row: 0, col: 0 },\n        this.maxCol,\n        this.maxRow,\n        { isHorizontal: null, holeIdx: null },\n        0,\n        false\n      );\n\n      setTimeout(() => {\n        this.props.setAlgorithmRunning(false);\n      }, 70 * mazeDelay);\n    } else if (mazeType === enumerations.mazes.randomMixed) {\n      for (let row = 0; row < this.maxRow; row++) {\n        for (let col = 0; col < this.maxCol; col++) {\n          if (\n            Math.random() * 100 > 65 &&\n            !['start-node', 'end-node'].includes(\n              document.getElementById(`node-${row}-${col}`).className\n            )\n          ) {\n            if (Math.floor(Math.random() * 100) % 2 === 0) {\n              setTimeout(() => {\n                document.getElementById(`node-${row}-${col}`).className =\n                  'wall-node';\n              }, 25 * col);\n            } else {\n              setTimeout(() => {\n                document.getElementById(`node-${row}-${col}`).className =\n                  'weight-node';\n              }, 25 * col);\n            }\n          }\n        }\n      }\n\n      setTimeout(() => {\n        this.props.setAlgorithmRunning(false);\n      }, 25 * this.maxCol);\n    } else if (mazeType === enumerations.mazes.randomWeights) {\n      for (let row = 0; row < this.maxRow; row++) {\n        for (let col = 0; col < this.maxCol; col++) {\n          if (\n            Math.random() * 100 > 65 &&\n            !['start-node', 'end-node'].includes(\n              document.getElementById(`node-${row}-${col}`).className\n            )\n          ) {\n            setTimeout(() => {\n              document.getElementById(`node-${row}-${col}`).className =\n                'weight-node';\n            }, 25 * col);\n          }\n        }\n      }\n\n      setTimeout(() => {\n        this.props.setAlgorithmRunning(false);\n      }, 25 * this.maxCol);\n    } else if (mazeType === enumerations.mazes.mazeWithWeights) {\n      const mazeDelay = recursiveDivision(\n        { row: 0, col: 0 },\n        this.maxCol,\n        this.maxRow,\n        { isHorizontal: null, holeIdx: null },\n        0,\n        true\n      );\n\n      setTimeout(() => {\n        this.props.setAlgorithmRunning(false);\n      }, 70 * mazeDelay);\n    }\n  }\n\n  // ================= PATHFINDING ALGORITHMS =====================\n\n  runVisualiser(algorithm) {\n    let nodes = this.copyNodes();\n    let startNode = nodes[this.state.startNode.row][this.state.startNode.col];\n    let endNode = nodes[this.state.endNode.row][this.state.endNode.col];\n    let pathFound = true;\n    let result;\n\n    for (let row = 0; row < this.maxRow; row++) {\n      for (let col = 0; col < this.maxCol; col++) {\n        if (\n          ['weight-node-visited', 'weight-node-path'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'weight-node';\n        } else if (\n          ['visited-node', 'path-node'].includes(\n            document.getElementById(`node-${row}-${col}`).className\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className =\n            'normal-node';\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'end-node-found'\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = 'end-node';\n        }\n      }\n    }\n\n    if (algorithm === enumerations.algorithms.dijkstras) {\n      result = dijkstras(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.DFS) {\n      result = DFS(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.BFS) {\n      result = BFS(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else if (algorithm === enumerations.algorithms.AStar) {\n      result = astar(\n        nodes,\n        startNode,\n        endNode,\n        this.maxRow,\n        this.maxCol,\n        pathFound\n      );\n    } else {\n      console.log('No algorithm selected');\n    }\n\n    this.visualisePath(result, startNode, endNode);\n  }\n\n  visualisePath(result, startNode, endNode) {\n    let visitedNodes = result.visitedNodes;\n\n    // visualise visited nodes\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        let visited = visitedNodes[i];\n\n        if (visited === startNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'start-node-visited';\n        } else if (visited === endNode) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'end-node-visited';\n        } else if (\n          document.getElementById(`node-${visited.row}-${visited.col}`)\n            .className === 'weight-node'\n        ) {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'weight-node-visited';\n        } else {\n          document.getElementById(\n            `node-${visited.row}-${visited.col}`\n          ).className = 'visited-node';\n        }\n\n        // let audio = document.getElementById('loading_sound');\n        // audio.volume = 0.5;\n        // audio.play();\n      }, 25 * i);\n    }\n\n    // visualise shortest path\n    setTimeout(() => {\n      if (result.pathFound === false) {\n        document.getElementById('loading_sound').pause();\n        document.getElementById('loading_sound').currentTime = 0;\n        this.props.setAlgorithmRunning(false);\n        return;\n      }\n\n      let prev = endNode.prev;\n\n      let pathNodes = [];\n      while (prev.row !== startNode.row || prev.col !== startNode.col) {\n        pathNodes.push({ row: prev.row, col: prev.col });\n        prev = prev.prev;\n      }\n\n      pathNodes.push({ row: startNode.row, col: startNode.col });\n\n      let i = 1;\n      pathNodes.reverse().forEach((node) => {\n        setTimeout(\n          (row, col, startNode) => {\n            if (row === startNode.row && col === startNode.col) {\n              document.getElementById(`node-${row}-${col}`).className =\n                'start-node-path';\n            } else if (\n              document.getElementById(`node-${row}-${col}`).className ===\n              'weight-node-visited'\n            ) {\n              document.getElementById(`node-${row}-${col}`).className =\n                'weight-node-path';\n            } else {\n              document.getElementById(`node-${row}-${col}`).className =\n                'path-node';\n            }\n\n            // let audio = document.getElementById('path_sound').cloneNode(true);\n            // audio.volume = 0.3;\n            // audio.play();\n          },\n          40 * i,\n          node.row,\n          node.col,\n          startNode\n        );\n        i++;\n      });\n\n      setTimeout(() => {\n        document.getElementById(\n          `node-${this.state.endNode.row}-${this.state.endNode.col}`\n        ).className = 'end-node-found';\n      }, 40 * i + 1);\n\n      // document.getElementById('loading_sound').pause();\n      // document.getElementById('loading_sound').currentTime = 0;\n      this.props.setAlgorithmRunning(false);\n      this.props.setStats(pathNodes.length, visitedNodes.length);\n    }, 25 * visitedNodes.length);\n  }\n}\n\nexport default withMyHook(Grid);\n","export default function DFS(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let stack = [];\n\n  stack.push(startNode);\n\n  while (stack.length !== 0) {\n    let node = stack.pop();\n\n    if (Object.keys(node).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    if (node.visited === false) {\n      node.visited = true;\n\n      for (let i = 0; i < node.adjacentNodes.length; i++) {\n        let adjacentRow = node.adjacentNodes[i].row;\n        let adjacentCol = node.adjacentNodes[i].col;\n\n        if (\n          grid[adjacentRow][adjacentCol].visited === false &&\n          document.getElementById(`node-${adjacentRow}-${adjacentCol}`)\n            .className !== 'wall-node'\n        ) {\n          stack.push(grid[adjacentRow][adjacentCol]);\n          grid[adjacentRow][adjacentCol].prev = node;\n        }\n      }\n    }\n  }\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n","export default function DFS(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let queue = [];\n\n  queue.push(startNode);\n  startNode.visited = true;\n\n  while (queue.length !== 0) {\n    let node = queue.shift();\n\n    if (Object.keys(node).length === 0) {\n      return { visitedNodes: visitedNodes, pathFound: false };\n    }\n\n    visitedNodes.push(node);\n\n    if (node.row === endNode.row && node.col === endNode.col) {\n      return { visitedNodes: visitedNodes, pathFound: true };\n    }\n\n    for (let i = 0; i < node.adjacentNodes.length; i++) {\n      let adjacentRow = node.adjacentNodes[i].row;\n      let adjacentCol = node.adjacentNodes[i].col;\n\n      if (\n        grid[adjacentRow][adjacentCol].visited === false &&\n        document.getElementById(`node-${adjacentRow}-${adjacentCol}`)\n          .className !== 'wall-node'\n      ) {\n        queue.push(grid[adjacentRow][adjacentCol]);\n        grid[adjacentRow][adjacentCol].prev = node;\n        grid[adjacentRow][adjacentCol].visited = true;\n      }\n    }\n  }\n  return { visitedNodes: visitedNodes, pathFound: false };\n}\n","import React, { useState } from 'react';\nimport '../styles/main.css';\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport * as enumerations from '../constants/enumerations';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    zIndex: 1000,\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  button: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.8vh',\n    color: 'white',\n  },\n  dropDownMenu: {\n    alignItems: 'center',\n    zIndex: 1000,\n    width: '25vh',\n    backgroundColor: '#3775A0',\n    color: 'white',\n  },\n  dropDownText: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.5vh',\n  },\n}));\n\nexport default function MenuListComposition(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const [algorithm, setAlgorithm] = useState('Algorithms');\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          classes={{ root: classes.button }}\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n          disabled={props.algorithmRunning}\n        >\n          {algorithm}\n          <ArrowDropDownIcon />\n        </Button>\n        <Popper\n          open={open}\n          anchorEl={anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n        >\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin:\n                  placement === 'bottom' ? 'center top' : 'center bottom',\n              }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList\n                    autoFocusItem={open}\n                    id=\"menu-list-grow\"\n                    onKeyDown={handleListKeyDown}\n                    classes={{ root: classes.dropDownMenu }}\n                  >\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        setAlgorithm('Dijkstras');\n                        props.setAlgorithm(\n                          enumerations.algorithms.dijkstras,\n                          'Dijkstras'\n                        );\n                      }}\n                    >\n                      Dijkstras\n                    </MenuItem>\n\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        setAlgorithm('A*');\n                        props.setAlgorithm(enumerations.algorithms.AStar, 'A*');\n                      }}\n                    >\n                      A*\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        setAlgorithm('BFS');\n                        props.setAlgorithm(enumerations.algorithms.BFS, 'BFS');\n                      }}\n                    >\n                      BFS\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        setAlgorithm('DFS');\n                        props.setAlgorithm(enumerations.algorithms.DFS, 'DFS');\n                      }}\n                    >\n                      DFS\n                    </MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport '../styles/main.css';\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport * as enumerations from '../constants/enumerations';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    zIndex: 1000,\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  button: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.8vh',\n    color: 'white',\n  },\n  dropDownMenu: {\n    alignItems: 'center',\n    zIndex: 1000,\n    width: '25vh',\n    backgroundColor: '#3775A0',\n    color: 'white',\n  },\n  dropDownText: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.5vh',\n  },\n}));\n\nexport default function MazeGeneratorButton(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const [maze] = useState('Maze Generator');\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          classes={{ root: classes.button }}\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n          disabled={props.algorithmRunning}\n        >\n          {maze}\n          <ArrowDropDownIcon />\n        </Button>\n        <Popper\n          open={open}\n          anchorEl={anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n        >\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin:\n                  placement === 'bottom' ? 'center top' : 'center bottom',\n              }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList\n                    autoFocusItem={open}\n                    id=\"menu-list-grow\"\n                    onKeyDown={handleListKeyDown}\n                    classes={{ root: classes.dropDownMenu }}\n                  >\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        props.generateMaze(enumerations.mazes.randomWalls);\n                      }}\n                    >\n                      Random Walls\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        props.generateMaze(enumerations.mazes.randomWeights);\n                      }}\n                      disabled={\n                        [\n                          enumerations.algorithms.BFS,\n                          enumerations.algorithms.DFS,\n                        ].includes(props.algorithm)\n                          ? true\n                          : null\n                      }\n                    >\n                      Random Weights\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        props.generateMaze(enumerations.mazes.randomMixed);\n                      }}\n                      disabled={\n                        [\n                          enumerations.algorithms.BFS,\n                          enumerations.algorithms.DFS,\n                        ].includes(props.algorithm)\n                          ? true\n                          : null\n                      }\n                    >\n                      Random Mixed\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        props.generateMaze(enumerations.mazes.maze);\n                      }}\n                    >\n                      Maze\n                    </MenuItem>\n                    <MenuItem\n                      classes={{ root: classes.dropDownText }}\n                      onClick={(e) => {\n                        handleClose(e);\n                        props.generateMaze(enumerations.mazes.mazeWithWeights);\n                      }}\n                      disabled={\n                        [\n                          enumerations.algorithms.BFS,\n                          enumerations.algorithms.DFS,\n                        ].includes(props.algorithm)\n                          ? true\n                          : null\n                      }\n                    >\n                      Maze with Weights\n                    </MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.8vh',\n    color: 'white',\n  },\n}));\n\nexport default function ClearGridButton(props) {\n  const classes = useStyles();\n  return (\n    <Button\n      classes={{ root: classes.root }}\n      onClick={props.handleResetClick}\n      disabled={props.algorithmRunning}\n    >\n      Clear Grid{' '}\n    </Button>\n  );\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as enumerations from '../constants/enumerations';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    fontFamily: 'Ubuntu',\n    fontSize: '2.8vh',\n    backgroundColor: '#8F3131',\n    boxShadow: '0 0 0.4rem black',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'rgb(189, 15, 47)',\n    },\n  },\n}));\n\nexport default function ClearGridButton(props) {\n  const classes = useStyles();\n  return (\n    <Button\n      classes={{ root: classes.root }}\n      onClick={props.handleGoClick}\n      disabled={\n        props.algorithmRunning ||\n        props.algorithm === enumerations.algorithms.none\n      }\n    >\n      Run Algorithm\n    </Button>\n  );\n}\n","import React from 'react';\nimport '../styles/main.css';\nimport AlgorithmsButton from '../components/AlgorithmsButton';\nimport MazeGeneratorButton from '../components/MazeGeneratorButton';\nimport ClearGridButton from '../components/ClearGridButton';\nimport StartButton from '../components/StartButton';\n\nexport default function Toolbar(props) {\n  return (\n    <React.Fragment>\n      <div id=\"toolbar\">\n        <div\n          className=\"app-heading-name\"\n          onClick={() => {\n            props.setTutorialModalOpen(true);\n          }}\n          style={{ opacity: '1' }}\n        >\n          Visual Pathfinder\n        </div>\n        <div className=\"buttons\">\n          <AlgorithmsButton\n            setAlgorithm={props.setAlgorithm}\n            algorithmRunning={props.algorithmRunning}\n          />\n          <MazeGeneratorButton\n            generateMaze={props.generateMaze}\n            algorithm={props.algorithm}\n            algorithmRunning={props.algorithmRunning}\n          />\n          <ClearGridButton\n            handleResetClick={props.handleResetClick}\n            algorithmRunning={props.algorithmRunning}\n          />\n          <StartButton\n            handleGoClick={props.handleGoClick}\n            algorithm={props.algorithm}\n            algorithmRunning={props.algorithmRunning}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function Stats(props) {\n  const [currStats, setCurrStats] = useState(null);\n  const [prevStats, setPrevStats] = useState(null);\n  const [tempStats, setTempStats] = useState(0);\n\n  const currStatsStable = currStats;\n\n  useEffect(() => {\n    if (props.pathLength && props.nodesChecked) {\n      setCurrStats({\n        algorithmUsed: props.algorithmUsed,\n        pathLength: props.pathLength,\n        nodesChecked: props.nodesChecked,\n      });\n    } else {\n      if (currStatsStable && !props.clearStats) {\n        let algorithmUsed = currStatsStable.algorithmUsed;\n        let pathLength = currStatsStable.pathLength;\n        let nodesChecked = currStatsStable.nodesChecked;\n\n        setTempStats({\n          algorithmUsed: algorithmUsed,\n          pathLength: pathLength,\n          nodesChecked: nodesChecked,\n        });\n\n        setCurrStats(null);\n      }\n    }\n    if (props.clearStats) {\n      setCurrStats(null);\n      setPrevStats(null);\n    }\n  }, [props]);\n\n  useEffect(() => {\n    setPrevStats(tempStats);\n  }, [tempStats]);\n\n  return (\n    <React.Fragment>\n      <div className=\"stats-container\">\n        {currStats ? (\n          <React.Fragment>\n            <p className=\"label\">Current Run: </p>\n            <p>Algorithm used: {currStats.algorithmUsed}</p>\n            <p>Path Length: {currStats.pathLength}</p>\n            <p>Nodes Visited: {currStats.nodesChecked - 1}</p>\n          </React.Fragment>\n        ) : null}\n      </div>\n\n      <div className=\"prev-stats-container\">\n        {prevStats ? (\n          <React.Fragment>\n            <p className=\"label\">Previous Run: </p>\n            <p>Algorithm used: {prevStats.algorithmUsed}</p>\n            <p>Path Length: {prevStats.pathLength}</p>\n            <p>Nodes Visited: {prevStats.nodesChecked - 1}</p>\n          </React.Fragment>\n        ) : null}\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport * as enumerations from '../constants/enumerations';\n\nexport default function Info(props) {\n  const [renderedText, setRenderedText] = useState('No Algorithm Selected');\n\n  useEffect(() => {\n    if (props.selectedAlgorithm === enumerations.algorithms.none) {\n      setRenderedText(<p>No Algorithm Selected</p>);\n    } else if (props.selectedAlgorithm === enumerations.algorithms.dijkstras) {\n      setRenderedText(\n        <p>\n          Dijkstras algorithm is a <span className=\"bold\">weighted</span>{' '}\n          search.\n          <br />\n          Weight nodes are <span className=\"bold\">enabled</span>\n        </p>\n      );\n    } else if (props.selectedAlgorithm === enumerations.algorithms.DFS) {\n      setRenderedText(\n        <p>\n          DFS (Depth First Search) is an{' '}\n          <span className=\"bold\">unweighted</span> search.\n          <br />\n          Weight nodes are <span className=\"bold\">disabled</span>\n        </p>\n      );\n    } else if (props.selectedAlgorithm === enumerations.algorithms.AStar) {\n      setRenderedText(\n        <p>\n          A* is a <span className=\"bold\">weighted</span> search.\n          <br />\n          Weight nodes are <span className=\"bold\">enabled</span>\n        </p>\n      );\n    } else if (props.selectedAlgorithm === enumerations.algorithms.BFS) {\n      setRenderedText(\n        <p>\n          BFS (Breadth First Search) is an{' '}\n          <span className=\"bold\">unweighted</span> search.\n          <br />\n          Weight nodes are <span className=\"bold\">disabled</span>\n        </p>\n      );\n    }\n  }, [props]);\n\n  return (\n    <React.Fragment>\n      <div id=\"info-container\">{renderedText}</div>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactDom from 'react-dom';\nimport AppLogo from '../images/pathfinder-logo.svg';\nimport Pathfinding from '../images/pathfinding.gif';\nimport PlacingObstacles from '../images/placing-obstacles.gif';\nimport MovingNodes from '../images/moving-nodes.gif';\n\nimport {\n  AiOutlineRight,\n  AiOutlineLeft,\n  AiFillCloseCircle,\n} from 'react-icons/ai';\n\nexport default function TutorialModal(props) {\n  const [pageNum, setPageNum] = useState(1);\n\n  function incrementPage(val) {\n    if (val < 0 && pageNum > 1) {\n      setPageNum((prevPageNum) => prevPageNum + val);\n    }\n\n    if (val > 0 && pageNum < 5) {\n      setPageNum((prevPageNum) => prevPageNum + val);\n    }\n  }\n\n  return ReactDom.createPortal(\n    <React.Fragment>\n      <div className=\"modal-overlay\">\n        <div\n          className=\"modal-styles\"\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        >\n          <AiFillCloseCircle\n            className=\"close-button\"\n            onClick={() => props.setModalOpen(false)}\n          />\n          <div className=\"page-number\">{pageNum}/5</div>\n          <AiOutlineRight\n            className={\n              pageNum === 5 ? 'arrow-icons-disabled right' : 'arrow-icons right'\n            }\n            onClick={() => incrementPage(1)}\n          />\n          <AiOutlineLeft\n            className={\n              pageNum === 1 ? 'arrow-icons-disabled left' : 'arrow-icons left'\n            }\n            onClick={() => incrementPage(-1)}\n          />\n\n          <div className=\"modal-content\">\n            {pageNum === 1 ? <PageOne /> : null}\n            {pageNum === 2 ? <PageTwo /> : null}\n            {pageNum === 3 ? <PageThree /> : null}\n            {pageNum === 4 ? <PageFour /> : null}\n            {pageNum === 5 ? <PageFive /> : null}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>,\n    document.getElementById('portal')\n  );\n}\n\nfunction PageOne() {\n  return (\n    <React.Fragment>\n      <div className=\"page-one\">\n        <h1>Welcome to the Visual Pathfinder Tool! </h1>\n        <p>\n          This short tutorial will help you get started with the application. If\n          at any point this gets too boring to read feel free to close this\n          tutorial to jump right in! Click on the logo in the top left to open\n          up this tutorial at any time.\n        </p>\n        <img src={AppLogo} alt=\"logo\" width=\"30%\"></img>\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction PageTwo() {\n  return (\n    <React.Fragment>\n      <div className=\"page-two\">\n        <h1>About this app </h1>\n        <p>\n          A pathfinding algorithm is an algorithm that typically attempts to\n          find the shortest distance between two points. This app provides a\n          playground for such algorithms, to help visualise the way they behave\n          and compare.\n        </p>\n\n        <p>\n          A quick note: On this grid, these algoritms run very fast! So fast in\n          fact I have manually slowed down their searching behaviour to help\n          actually visualise what is happening, its not fun seeing everything\n          happen in a milisecond or two :)\n        </p>\n        <img src={Pathfinding} alt=\"logo\" width=\"30%\"></img>\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction PageThree() {\n  return (\n    <React.Fragment>\n      <div className=\"page-three\">\n        <h1>Placing Walls and Weights</h1>\n        <p>\n          Walls are an impenetrable obstacle that prevents potential paths.\n          Weights are also an obstacle, but can be traversed, one weight node is\n          equivalent to 10 normal nodes in 'distance'.\n        </p>\n\n        <p>\n          Walls can be placed by clicking and dragging across the grid. Holding\n          the 'W' key while clicking will place weight nodes instead. Click the\n          obstacles again to remove them.\n        </p>\n        <img src={PlacingObstacles} alt=\"placing walls gif\" width=\"90%\" />\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction PageFour() {\n  return (\n    <React.Fragment>\n      <div className=\"page-four\">\n        <h1>Moving Start and End Nodes</h1>\n        <p>\n          The Start and End nodes are your starting position and destination.\n          They can be re-positioned by clicking and dragging, then releasing\n          them anywhere on the grid.\n        </p>\n\n        <img src={MovingNodes} alt=\"placing walls gif\" width=\"90%\" />\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction PageFive() {\n  return (\n    <React.Fragment>\n      <div className=\"page-five\">\n        <h1>Algorithms</h1>\n        <p>\n          <span className=\"algorithm-bold\"> Dijkstras</span> - a very popular\n          weighted search. Will find the shortest path.\n        </p>\n        <p>\n          <span className=\"algorithm-bold\"> A* (A star)</span> - the most\n          effective algorithm in the list, is also a weighted search and uses a\n          heuristic value in its search. Will find the shortest path.\n        </p>\n        <p>\n          <span className=\"algorithm-bold\"> BFS</span> - also known as Breadth\n          First Search is an unweighted search, meaning it does not factor in\n          distances in its choice for which nodes to visit. Will find the\n          shortest path for an unweighted graph / grid. Weight nodes are\n          disabled for this type of search.\n        </p>\n        <p>\n          <span className=\"algorithm-bold\"> DFS</span> - Depth First Search. A\n          poor algorithm choice for pathfinding, this is also an unweighted\n          search and so weight nodes are disabled. Is not guaranteed to find the\n          shortest path.\n        </p>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { Component } from 'react';\nimport Grid from './containers/Grid';\nimport Toolbar from './containers/Toolbar';\nimport Stats from './containers/Stats';\nimport Info from './containers/Info';\nimport TutorialModal from './containers/TutorialModal';\nimport * as enumerations from './constants/enumerations';\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResetClick = this.handleResetClick.bind(this);\n    this.handleGoClick = this.handleGoClick.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.setAlgorithmRunning = this.setAlgorithmRunning.bind(this);\n    this.setStats = this.setStats.bind(this);\n    this.setGridModified = this.setGridModified.bind(this);\n    this.generateMaze = this.generateMaze.bind(this);\n    this.setTutorialModalOpen = this.setTutorialModalOpen.bind(this);\n\n    this.gridRef = React.createRef(); // used to handle reseting the grid.\n\n    this.state = {\n      algorithm: enumerations.algorithms.none,\n      algorithmRunning: false,\n      algorithmName: null,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: false,\n      weightsDisabled: false,\n      tutorialModalOpen: true,\n    };\n  }\n\n  handleResetClick() {\n    this.gridRef.current.resetGrid();\n    this.setState({\n      algorithmRunning: false,\n      algorithmUsed: null,\n      pathLength: null,\n      nodesChecked: null,\n      clearStats: true,\n    });\n  }\n\n  handleGoClick() {\n    this.gridRef.current.runVisualiser(this.state.algorithm);\n    this.setState({\n      algorithmRunning: true,\n      algorithmUsed: this.state.algorithmName,\n      pathLength: null,\n      nodesChecked: null,\n    });\n  }\n\n  setAlgorithmRunning(state) {\n    this.setState({ algorithmRunning: state });\n  }\n\n  setAlgorithm(algorithm, algorithmName) {\n    this.setState({ algorithm: algorithm, algorithmName: algorithmName });\n\n    if (this.state.algorithm !== enumerations.algorithms.none) {\n      this.gridRef.current.clearPaths();\n    }\n    if (\n      [enumerations.algorithms.DFS, enumerations.algorithms.BFS].includes(\n        algorithm\n      )\n    ) {\n      this.setState({ weightsDisabled: true });\n      const weightsRemoved = this.gridRef.current.removeWeights();\n      if (weightsRemoved) {\n        this.setGridModified();\n      }\n    } else {\n      this.setState({ weightsDisabled: false });\n    }\n  }\n\n  setStats(pathLength, nodesChecked) {\n    this.setState({\n      pathLength: pathLength,\n      nodesChecked: nodesChecked,\n      clearStats: false,\n    });\n  }\n\n  setGridModified() {\n    if (!this.state.clearStats) {\n      this.setState({ clearStats: true });\n    }\n  }\n\n  setTutorialModalOpen(val) {\n    this.setState({ tutorialModalOpen: val });\n  }\n\n  generateMaze(mazeType) {\n    this.setGridModified();\n    this.gridRef.current.generateMaze(mazeType);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Toolbar\n          handleResetClick={this.handleResetClick}\n          handleGoClick={this.handleGoClick}\n          algorithm={this.state.algorithm}\n          setAlgorithm={this.setAlgorithm}\n          algorithmRunning={this.state.algorithmRunning}\n          generateMaze={this.generateMaze}\n          setTutorialModalOpen={this.setTutorialModalOpen}\n        />\n        <Stats\n          algorithmUsed={this.state.algorithmUsed}\n          pathLength={this.state.pathLength}\n          nodesChecked={this.state.nodesChecked}\n          clearStats={this.state.clearStats}\n        />\n        <Info selectedAlgorithm={this.state.algorithm} />\n        <Grid\n          forwardedRef={this.gridRef}\n          setAlgorithmRunning={this.setAlgorithmRunning}\n          setStats={this.setStats}\n          setGridModified={this.setGridModified}\n          algorithmRunning={this.state.algorithmRunning}\n          weightsDisabled={this.state.weightsDisabled}\n        />\n        {this.state.tutorialModalOpen ? (\n          <div\n            onClick={() => {\n              this.setState({ tutorialModalOpen: false });\n            }}\n          >\n            <TutorialModal setModalOpen={this.setTutorialModalOpen} />\n          </div>\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}